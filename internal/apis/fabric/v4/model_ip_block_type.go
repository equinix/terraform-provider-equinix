/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// IpBlockType IP Block type
type IpBlockType string

// List of IpBlockType
const (
	IPV4 IpBlockType = "IPv4"
	IPV6 IpBlockType = "IPv6"
)

// All allowed values of IpBlockType enum
var AllowedIpBlockTypeEnumValues = []IpBlockType{
	"IPv4",
	"IPv6",
}

func (v *IpBlockType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IpBlockType(value)
	for _, existing := range AllowedIpBlockTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IpBlockType", value)
}

// NewIpBlockTypeFromValue returns a pointer to a valid IpBlockType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIpBlockTypeFromValue(v string) (*IpBlockType, error) {
	ev := IpBlockType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IpBlockType: valid values are %v", v, AllowedIpBlockTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IpBlockType) IsValid() bool {
	for _, existing := range AllowedIpBlockTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IpBlockType value
func (v IpBlockType) Ptr() *IpBlockType {
	return &v
}

type NullableIpBlockType struct {
	value *IpBlockType
	isSet bool
}

func (v NullableIpBlockType) Get() *IpBlockType {
	return v.value
}

func (v *NullableIpBlockType) Set(val *IpBlockType) {
	v.value = val
	v.isSet = true
}

func (v NullableIpBlockType) IsSet() bool {
	return v.isSet
}

func (v *NullableIpBlockType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpBlockType(val *IpBlockType) *NullableIpBlockType {
	return &NullableIpBlockType{value: val, isSet: true}
}

func (v NullableIpBlockType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpBlockType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


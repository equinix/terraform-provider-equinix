/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionPostRequest Create connection post request
type ConnectionPostRequest struct {
	Type ConnectionType `json:"type"`
	// Customer-provided connection name
	Name string `json:"name"`
	Order *Order `json:"order,omitempty"`
	// Preferences for notifications on connection configuration or status changes
	Notifications []SimplifiedNotification `json:"notifications,omitempty"`
	// Connection bandwidth in Mbps
	Bandwidth int32 `json:"bandwidth"`
	Redundancy *ConnectionRedundancy `json:"redundancy,omitempty"`
	ASide ConnectionSide `json:"aSide"`
	ZSide ConnectionSide `json:"zSide"`
}

// NewConnectionPostRequest instantiates a new ConnectionPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionPostRequest(type_ ConnectionType, name string, bandwidth int32, aSide ConnectionSide, zSide ConnectionSide) *ConnectionPostRequest {
	this := ConnectionPostRequest{}
	this.Type = type_
	this.Name = name
	this.Bandwidth = bandwidth
	this.ASide = aSide
	this.ZSide = zSide
	return &this
}

// NewConnectionPostRequestWithDefaults instantiates a new ConnectionPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionPostRequestWithDefaults() *ConnectionPostRequest {
	this := ConnectionPostRequest{}
	return &this
}

// GetType returns the Type field value
func (o *ConnectionPostRequest) GetType() ConnectionType {
	if o == nil {
		var ret ConnectionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetTypeOk() (*ConnectionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectionPostRequest) SetType(v ConnectionType) {
	o.Type = v
}

// GetName returns the Name field value
func (o *ConnectionPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectionPostRequest) SetName(v string) {
	o.Name = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetOrder() Order {
	if o == nil || o.Order == nil {
		var ret Order
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetOrderOk() (*Order, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given Order and assigns it to the Order field.
func (o *ConnectionPostRequest) SetOrder(v Order) {
	o.Order = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetNotifications() []SimplifiedNotification {
	if o == nil || o.Notifications == nil {
		var ret []SimplifiedNotification
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetNotificationsOk() ([]SimplifiedNotification, bool) {
	if o == nil || o.Notifications == nil {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasNotifications() bool {
	if o != nil && o.Notifications != nil {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []SimplifiedNotification and assigns it to the Notifications field.
func (o *ConnectionPostRequest) SetNotifications(v []SimplifiedNotification) {
	o.Notifications = v
}

// GetBandwidth returns the Bandwidth field value
func (o *ConnectionPostRequest) GetBandwidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetBandwidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bandwidth, true
}

// SetBandwidth sets field value
func (o *ConnectionPostRequest) SetBandwidth(v int32) {
	o.Bandwidth = v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *ConnectionPostRequest) GetRedundancy() ConnectionRedundancy {
	if o == nil || o.Redundancy == nil {
		var ret ConnectionRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetRedundancyOk() (*ConnectionRedundancy, bool) {
	if o == nil || o.Redundancy == nil {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *ConnectionPostRequest) HasRedundancy() bool {
	if o != nil && o.Redundancy != nil {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given ConnectionRedundancy and assigns it to the Redundancy field.
func (o *ConnectionPostRequest) SetRedundancy(v ConnectionRedundancy) {
	o.Redundancy = &v
}

// GetASide returns the ASide field value
func (o *ConnectionPostRequest) GetASide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ASide
}

// GetASideOk returns a tuple with the ASide field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetASideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ASide, true
}

// SetASide sets field value
func (o *ConnectionPostRequest) SetASide(v ConnectionSide) {
	o.ASide = v
}

// GetZSide returns the ZSide field value
func (o *ConnectionPostRequest) GetZSide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value
// and a boolean to check if the value has been set.
func (o *ConnectionPostRequest) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZSide, true
}

// SetZSide sets field value
func (o *ConnectionPostRequest) SetZSide(v ConnectionSide) {
	o.ZSide = v
}

func (o ConnectionPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.Notifications != nil {
		toSerialize["notifications"] = o.Notifications
	}
	if true {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if o.Redundancy != nil {
		toSerialize["redundancy"] = o.Redundancy
	}
	if true {
		toSerialize["aSide"] = o.ASide
	}
	if true {
		toSerialize["zSide"] = o.ZSide
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionPostRequest struct {
	value *ConnectionPostRequest
	isSet bool
}

func (v NullableConnectionPostRequest) Get() *ConnectionPostRequest {
	return v.value
}

func (v *NullableConnectionPostRequest) Set(val *ConnectionPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionPostRequest(val *ConnectionPostRequest) *NullableConnectionPostRequest {
	return &NullableConnectionPostRequest{value: val, isSet: true}
}

func (v NullableConnectionPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



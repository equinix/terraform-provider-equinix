/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// DirectConnectionIpv6 struct for DirectConnectionIpv6
type DirectConnectionIpv6 struct {
	// Equinix side Interface IP address
	EquinixIfaceIp string `json:"equinixIfaceIp"`
}

// NewDirectConnectionIpv6 instantiates a new DirectConnectionIpv6 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDirectConnectionIpv6(equinixIfaceIp string) *DirectConnectionIpv6 {
	this := DirectConnectionIpv6{}
	this.EquinixIfaceIp = equinixIfaceIp
	return &this
}

// NewDirectConnectionIpv6WithDefaults instantiates a new DirectConnectionIpv6 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDirectConnectionIpv6WithDefaults() *DirectConnectionIpv6 {
	this := DirectConnectionIpv6{}
	return &this
}

// GetEquinixIfaceIp returns the EquinixIfaceIp field value
func (o *DirectConnectionIpv6) GetEquinixIfaceIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EquinixIfaceIp
}

// GetEquinixIfaceIpOk returns a tuple with the EquinixIfaceIp field value
// and a boolean to check if the value has been set.
func (o *DirectConnectionIpv6) GetEquinixIfaceIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EquinixIfaceIp, true
}

// SetEquinixIfaceIp sets field value
func (o *DirectConnectionIpv6) SetEquinixIfaceIp(v string) {
	o.EquinixIfaceIp = v
}

func (o DirectConnectionIpv6) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["equinixIfaceIp"] = o.EquinixIfaceIp
	}
	return json.Marshal(toSerialize)
}

type NullableDirectConnectionIpv6 struct {
	value *DirectConnectionIpv6
	isSet bool
}

func (v NullableDirectConnectionIpv6) Get() *DirectConnectionIpv6 {
	return v.value
}

func (v *NullableDirectConnectionIpv6) Set(val *DirectConnectionIpv6) {
	v.value = val
	v.isSet = true
}

func (v NullableDirectConnectionIpv6) IsSet() bool {
	return v.isSet
}

func (v *NullableDirectConnectionIpv6) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDirectConnectionIpv6(val *DirectConnectionIpv6) *NullableDirectConnectionIpv6 {
	return &NullableDirectConnectionIpv6{value: val, isSet: true}
}

func (v NullableDirectConnectionIpv6) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDirectConnectionIpv6) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



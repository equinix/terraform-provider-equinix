/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// PortSearchFieldName Possible field names to use on filters
type PortSearchFieldName string

// List of PortSearchFieldName
const (
	DEVICE_NAME PortSearchFieldName = "/device/name"
	PHYSICAL_PORTS_TETHER_CROSS_CONNECT_ID PortSearchFieldName = "/physicalPorts/tether/crossConnectId"
	PHYSICAL_PORTS_INTERFACE_NAME PortSearchFieldName = "/physicalPorts/interface/name"
	STATE PortSearchFieldName = "/state"
)

// All allowed values of PortSearchFieldName enum
var AllowedPortSearchFieldNameEnumValues = []PortSearchFieldName{
	"/device/name",
	"/physicalPorts/tether/crossConnectId",
	"/physicalPorts/interface/name",
	"/state",
}

func (v *PortSearchFieldName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortSearchFieldName(value)
	for _, existing := range AllowedPortSearchFieldNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortSearchFieldName", value)
}

// NewPortSearchFieldNameFromValue returns a pointer to a valid PortSearchFieldName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortSearchFieldNameFromValue(v string) (*PortSearchFieldName, error) {
	ev := PortSearchFieldName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortSearchFieldName: valid values are %v", v, AllowedPortSearchFieldNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortSearchFieldName) IsValid() bool {
	for _, existing := range AllowedPortSearchFieldNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortSearchFieldName value
func (v PortSearchFieldName) Ptr() *PortSearchFieldName {
	return &v
}

type NullablePortSearchFieldName struct {
	value *PortSearchFieldName
	isSet bool
}

func (v NullablePortSearchFieldName) Get() *PortSearchFieldName {
	return v.value
}

func (v *NullablePortSearchFieldName) Set(val *PortSearchFieldName) {
	v.value = val
	v.isSet = true
}

func (v NullablePortSearchFieldName) IsSet() bool {
	return v.isSet
}

func (v *NullablePortSearchFieldName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortSearchFieldName(val *PortSearchFieldName) *NullablePortSearchFieldName {
	return &NullablePortSearchFieldName{value: val, isSet: true}
}

func (v NullablePortSearchFieldName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortSearchFieldName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


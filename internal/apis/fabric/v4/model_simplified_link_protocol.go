/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// SimplifiedLinkProtocol Connection link protocol Configuration
type SimplifiedLinkProtocol struct {
	Type *LinkProtocolType `json:"type,omitempty"`
	// vlanTag value specified for DOT1Q connections
	VlanTag *int32 `json:"vlanTag,omitempty"`
	// vlanSTag value specified for QINQ connections
	VlanSTag *int32 `json:"vlanSTag,omitempty"`
	// vlanCTag value specified for QINQ connections
	VlanCTag *int32 `json:"vlanCTag,omitempty"`
	Unit *int32 `json:"unit,omitempty"`
	Vni *int32 `json:"vni,omitempty"`
	IntUnit *int32 `json:"intUnit,omitempty"`
}

// NewSimplifiedLinkProtocol instantiates a new SimplifiedLinkProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimplifiedLinkProtocol() *SimplifiedLinkProtocol {
	this := SimplifiedLinkProtocol{}
	return &this
}

// NewSimplifiedLinkProtocolWithDefaults instantiates a new SimplifiedLinkProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimplifiedLinkProtocolWithDefaults() *SimplifiedLinkProtocol {
	this := SimplifiedLinkProtocol{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SimplifiedLinkProtocol) GetType() LinkProtocolType {
	if o == nil || o.Type == nil {
		var ret LinkProtocolType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLinkProtocol) GetTypeOk() (*LinkProtocolType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SimplifiedLinkProtocol) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given LinkProtocolType and assigns it to the Type field.
func (o *SimplifiedLinkProtocol) SetType(v LinkProtocolType) {
	o.Type = &v
}

// GetVlanTag returns the VlanTag field value if set, zero value otherwise.
func (o *SimplifiedLinkProtocol) GetVlanTag() int32 {
	if o == nil || o.VlanTag == nil {
		var ret int32
		return ret
	}
	return *o.VlanTag
}

// GetVlanTagOk returns a tuple with the VlanTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLinkProtocol) GetVlanTagOk() (*int32, bool) {
	if o == nil || o.VlanTag == nil {
		return nil, false
	}
	return o.VlanTag, true
}

// HasVlanTag returns a boolean if a field has been set.
func (o *SimplifiedLinkProtocol) HasVlanTag() bool {
	if o != nil && o.VlanTag != nil {
		return true
	}

	return false
}

// SetVlanTag gets a reference to the given int32 and assigns it to the VlanTag field.
func (o *SimplifiedLinkProtocol) SetVlanTag(v int32) {
	o.VlanTag = &v
}

// GetVlanSTag returns the VlanSTag field value if set, zero value otherwise.
func (o *SimplifiedLinkProtocol) GetVlanSTag() int32 {
	if o == nil || o.VlanSTag == nil {
		var ret int32
		return ret
	}
	return *o.VlanSTag
}

// GetVlanSTagOk returns a tuple with the VlanSTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLinkProtocol) GetVlanSTagOk() (*int32, bool) {
	if o == nil || o.VlanSTag == nil {
		return nil, false
	}
	return o.VlanSTag, true
}

// HasVlanSTag returns a boolean if a field has been set.
func (o *SimplifiedLinkProtocol) HasVlanSTag() bool {
	if o != nil && o.VlanSTag != nil {
		return true
	}

	return false
}

// SetVlanSTag gets a reference to the given int32 and assigns it to the VlanSTag field.
func (o *SimplifiedLinkProtocol) SetVlanSTag(v int32) {
	o.VlanSTag = &v
}

// GetVlanCTag returns the VlanCTag field value if set, zero value otherwise.
func (o *SimplifiedLinkProtocol) GetVlanCTag() int32 {
	if o == nil || o.VlanCTag == nil {
		var ret int32
		return ret
	}
	return *o.VlanCTag
}

// GetVlanCTagOk returns a tuple with the VlanCTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLinkProtocol) GetVlanCTagOk() (*int32, bool) {
	if o == nil || o.VlanCTag == nil {
		return nil, false
	}
	return o.VlanCTag, true
}

// HasVlanCTag returns a boolean if a field has been set.
func (o *SimplifiedLinkProtocol) HasVlanCTag() bool {
	if o != nil && o.VlanCTag != nil {
		return true
	}

	return false
}

// SetVlanCTag gets a reference to the given int32 and assigns it to the VlanCTag field.
func (o *SimplifiedLinkProtocol) SetVlanCTag(v int32) {
	o.VlanCTag = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *SimplifiedLinkProtocol) GetUnit() int32 {
	if o == nil || o.Unit == nil {
		var ret int32
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLinkProtocol) GetUnitOk() (*int32, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *SimplifiedLinkProtocol) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given int32 and assigns it to the Unit field.
func (o *SimplifiedLinkProtocol) SetUnit(v int32) {
	o.Unit = &v
}

// GetVni returns the Vni field value if set, zero value otherwise.
func (o *SimplifiedLinkProtocol) GetVni() int32 {
	if o == nil || o.Vni == nil {
		var ret int32
		return ret
	}
	return *o.Vni
}

// GetVniOk returns a tuple with the Vni field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLinkProtocol) GetVniOk() (*int32, bool) {
	if o == nil || o.Vni == nil {
		return nil, false
	}
	return o.Vni, true
}

// HasVni returns a boolean if a field has been set.
func (o *SimplifiedLinkProtocol) HasVni() bool {
	if o != nil && o.Vni != nil {
		return true
	}

	return false
}

// SetVni gets a reference to the given int32 and assigns it to the Vni field.
func (o *SimplifiedLinkProtocol) SetVni(v int32) {
	o.Vni = &v
}

// GetIntUnit returns the IntUnit field value if set, zero value otherwise.
func (o *SimplifiedLinkProtocol) GetIntUnit() int32 {
	if o == nil || o.IntUnit == nil {
		var ret int32
		return ret
	}
	return *o.IntUnit
}

// GetIntUnitOk returns a tuple with the IntUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedLinkProtocol) GetIntUnitOk() (*int32, bool) {
	if o == nil || o.IntUnit == nil {
		return nil, false
	}
	return o.IntUnit, true
}

// HasIntUnit returns a boolean if a field has been set.
func (o *SimplifiedLinkProtocol) HasIntUnit() bool {
	if o != nil && o.IntUnit != nil {
		return true
	}

	return false
}

// SetIntUnit gets a reference to the given int32 and assigns it to the IntUnit field.
func (o *SimplifiedLinkProtocol) SetIntUnit(v int32) {
	o.IntUnit = &v
}

func (o SimplifiedLinkProtocol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.VlanTag != nil {
		toSerialize["vlanTag"] = o.VlanTag
	}
	if o.VlanSTag != nil {
		toSerialize["vlanSTag"] = o.VlanSTag
	}
	if o.VlanCTag != nil {
		toSerialize["vlanCTag"] = o.VlanCTag
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.Vni != nil {
		toSerialize["vni"] = o.Vni
	}
	if o.IntUnit != nil {
		toSerialize["intUnit"] = o.IntUnit
	}
	return json.Marshal(toSerialize)
}

type NullableSimplifiedLinkProtocol struct {
	value *SimplifiedLinkProtocol
	isSet bool
}

func (v NullableSimplifiedLinkProtocol) Get() *SimplifiedLinkProtocol {
	return v.value
}

func (v *NullableSimplifiedLinkProtocol) Set(val *SimplifiedLinkProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplifiedLinkProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplifiedLinkProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplifiedLinkProtocol(val *SimplifiedLinkProtocol) *NullableSimplifiedLinkProtocol {
	return &NullableSimplifiedLinkProtocol{value: val, isSet: true}
}

func (v NullableSimplifiedLinkProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplifiedLinkProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



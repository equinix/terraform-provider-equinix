/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectivitySource Physical or virtual port that houses the connection.
type ConnectivitySource struct {
	Type *ConnectivitySourceType `json:"type,omitempty"`
}

// NewConnectivitySource instantiates a new ConnectivitySource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectivitySource() *ConnectivitySource {
	this := ConnectivitySource{}
	var type_ ConnectivitySourceType = COLO
	this.Type = &type_
	return &this
}

// NewConnectivitySourceWithDefaults instantiates a new ConnectivitySource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectivitySourceWithDefaults() *ConnectivitySource {
	this := ConnectivitySource{}
	var type_ ConnectivitySourceType = COLO
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectivitySource) GetType() ConnectivitySourceType {
	if o == nil || o.Type == nil {
		var ret ConnectivitySourceType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectivitySource) GetTypeOk() (*ConnectivitySourceType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectivitySource) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given ConnectivitySourceType and assigns it to the Type field.
func (o *ConnectivitySource) SetType(v ConnectivitySourceType) {
	o.Type = &v
}

func (o ConnectivitySource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableConnectivitySource struct {
	value *ConnectivitySource
	isSet bool
}

func (v NullableConnectivitySource) Get() *ConnectivitySource {
	return v.value
}

func (v *NullableConnectivitySource) Set(val *ConnectivitySource) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectivitySource) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectivitySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectivitySource(val *ConnectivitySource) *NullableConnectivitySource {
	return &NullableConnectivitySource{value: val, isSet: true}
}

func (v NullableConnectivitySource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectivitySource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



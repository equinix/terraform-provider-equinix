/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionRedundancy Connection redundancy configuration
type ConnectionRedundancy struct {
	// Redundancy group identifier (UUID of primary connection)
	Group *string `json:"group,omitempty"`
	Priority *ConnectionPriority `json:"priority,omitempty"`
}

// NewConnectionRedundancy instantiates a new ConnectionRedundancy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionRedundancy() *ConnectionRedundancy {
	this := ConnectionRedundancy{}
	return &this
}

// NewConnectionRedundancyWithDefaults instantiates a new ConnectionRedundancy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionRedundancyWithDefaults() *ConnectionRedundancy {
	this := ConnectionRedundancy{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *ConnectionRedundancy) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRedundancy) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *ConnectionRedundancy) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *ConnectionRedundancy) SetGroup(v string) {
	o.Group = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ConnectionRedundancy) GetPriority() ConnectionPriority {
	if o == nil || o.Priority == nil {
		var ret ConnectionPriority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRedundancy) GetPriorityOk() (*ConnectionPriority, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ConnectionRedundancy) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given ConnectionPriority and assigns it to the Priority field.
func (o *ConnectionRedundancy) SetPriority(v ConnectionPriority) {
	o.Priority = &v
}

func (o ConnectionRedundancy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionRedundancy struct {
	value *ConnectionRedundancy
	isSet bool
}

func (v NullableConnectionRedundancy) Get() *ConnectionRedundancy {
	return v.value
}

func (v *NullableConnectionRedundancy) Set(val *ConnectionRedundancy) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRedundancy) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRedundancy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRedundancy(val *ConnectionRedundancy) *NullableConnectionRedundancy {
	return &NullableConnectionRedundancy{value: val, isSet: true}
}

func (v NullableConnectionRedundancy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRedundancy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



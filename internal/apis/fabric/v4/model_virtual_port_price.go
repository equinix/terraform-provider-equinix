/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// VirtualPortPrice Preferences and settings for a virtual port connected to an internet service provider (ISP) or other Equinix platform entity.
type VirtualPortPrice struct {
	// Unique identifier assigned to the virtual port. Either the uuid or the remaining attributes must be supplied.
	Uuid *string `json:"uuid,omitempty"`
	Type *VirtualPortType `json:"type,omitempty"`
	Location *VirtualPortLocation `json:"location,omitempty"`
	Lag *LinkAggregationGroup `json:"lag,omitempty"`
	// Number of physical ports requested. The defaults is 1.
	PhysicalPortsQuantity *int32 `json:"physicalPortsQuantity,omitempty"`
	// Aggregated data transfer capacity,  expressed as follows <br> -> Mbps, megabits (1 million bits) per second <br> -> Gbps, gigabits (1 billion bits) per second <br> Bandwidth must be divisible by physicalPortsQuantity.
	Bandwidth *int32 `json:"bandwidth,omitempty"`
	Redundancy *VirtualPortRedundancy `json:"redundancy,omitempty"`
	ConnectivitySource *ConnectivitySource `json:"connectivitySource,omitempty"`
	ServiceType *VirtualPortServiceType `json:"serviceType,omitempty"`
	Settings *VirtualPortConfiguration `json:"settings,omitempty"`
}

// NewVirtualPortPrice instantiates a new VirtualPortPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualPortPrice() *VirtualPortPrice {
	this := VirtualPortPrice{}
	var physicalPortsQuantity int32 = 1
	this.PhysicalPortsQuantity = &physicalPortsQuantity
	var serviceType VirtualPortServiceType = MSP
	this.ServiceType = &serviceType
	return &this
}

// NewVirtualPortPriceWithDefaults instantiates a new VirtualPortPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualPortPriceWithDefaults() *VirtualPortPrice {
	this := VirtualPortPrice{}
	var physicalPortsQuantity int32 = 1
	this.PhysicalPortsQuantity = &physicalPortsQuantity
	var serviceType VirtualPortServiceType = MSP
	this.ServiceType = &serviceType
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VirtualPortPrice) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetType() VirtualPortType {
	if o == nil || o.Type == nil {
		var ret VirtualPortType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetTypeOk() (*VirtualPortType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given VirtualPortType and assigns it to the Type field.
func (o *VirtualPortPrice) SetType(v VirtualPortType) {
	o.Type = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetLocation() VirtualPortLocation {
	if o == nil || o.Location == nil {
		var ret VirtualPortLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetLocationOk() (*VirtualPortLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given VirtualPortLocation and assigns it to the Location field.
func (o *VirtualPortPrice) SetLocation(v VirtualPortLocation) {
	o.Location = &v
}

// GetLag returns the Lag field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetLag() LinkAggregationGroup {
	if o == nil || o.Lag == nil {
		var ret LinkAggregationGroup
		return ret
	}
	return *o.Lag
}

// GetLagOk returns a tuple with the Lag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetLagOk() (*LinkAggregationGroup, bool) {
	if o == nil || o.Lag == nil {
		return nil, false
	}
	return o.Lag, true
}

// HasLag returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasLag() bool {
	if o != nil && o.Lag != nil {
		return true
	}

	return false
}

// SetLag gets a reference to the given LinkAggregationGroup and assigns it to the Lag field.
func (o *VirtualPortPrice) SetLag(v LinkAggregationGroup) {
	o.Lag = &v
}

// GetPhysicalPortsQuantity returns the PhysicalPortsQuantity field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetPhysicalPortsQuantity() int32 {
	if o == nil || o.PhysicalPortsQuantity == nil {
		var ret int32
		return ret
	}
	return *o.PhysicalPortsQuantity
}

// GetPhysicalPortsQuantityOk returns a tuple with the PhysicalPortsQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetPhysicalPortsQuantityOk() (*int32, bool) {
	if o == nil || o.PhysicalPortsQuantity == nil {
		return nil, false
	}
	return o.PhysicalPortsQuantity, true
}

// HasPhysicalPortsQuantity returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasPhysicalPortsQuantity() bool {
	if o != nil && o.PhysicalPortsQuantity != nil {
		return true
	}

	return false
}

// SetPhysicalPortsQuantity gets a reference to the given int32 and assigns it to the PhysicalPortsQuantity field.
func (o *VirtualPortPrice) SetPhysicalPortsQuantity(v int32) {
	o.PhysicalPortsQuantity = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetBandwidth() int32 {
	if o == nil || o.Bandwidth == nil {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetBandwidthOk() (*int32, bool) {
	if o == nil || o.Bandwidth == nil {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasBandwidth() bool {
	if o != nil && o.Bandwidth != nil {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *VirtualPortPrice) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetRedundancy() VirtualPortRedundancy {
	if o == nil || o.Redundancy == nil {
		var ret VirtualPortRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetRedundancyOk() (*VirtualPortRedundancy, bool) {
	if o == nil || o.Redundancy == nil {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasRedundancy() bool {
	if o != nil && o.Redundancy != nil {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given VirtualPortRedundancy and assigns it to the Redundancy field.
func (o *VirtualPortPrice) SetRedundancy(v VirtualPortRedundancy) {
	o.Redundancy = &v
}

// GetConnectivitySource returns the ConnectivitySource field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetConnectivitySource() ConnectivitySource {
	if o == nil || o.ConnectivitySource == nil {
		var ret ConnectivitySource
		return ret
	}
	return *o.ConnectivitySource
}

// GetConnectivitySourceOk returns a tuple with the ConnectivitySource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetConnectivitySourceOk() (*ConnectivitySource, bool) {
	if o == nil || o.ConnectivitySource == nil {
		return nil, false
	}
	return o.ConnectivitySource, true
}

// HasConnectivitySource returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasConnectivitySource() bool {
	if o != nil && o.ConnectivitySource != nil {
		return true
	}

	return false
}

// SetConnectivitySource gets a reference to the given ConnectivitySource and assigns it to the ConnectivitySource field.
func (o *VirtualPortPrice) SetConnectivitySource(v ConnectivitySource) {
	o.ConnectivitySource = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetServiceType() VirtualPortServiceType {
	if o == nil || o.ServiceType == nil {
		var ret VirtualPortServiceType
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetServiceTypeOk() (*VirtualPortServiceType, bool) {
	if o == nil || o.ServiceType == nil {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasServiceType() bool {
	if o != nil && o.ServiceType != nil {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given VirtualPortServiceType and assigns it to the ServiceType field.
func (o *VirtualPortPrice) SetServiceType(v VirtualPortServiceType) {
	o.ServiceType = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *VirtualPortPrice) GetSettings() VirtualPortConfiguration {
	if o == nil || o.Settings == nil {
		var ret VirtualPortConfiguration
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortPrice) GetSettingsOk() (*VirtualPortConfiguration, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *VirtualPortPrice) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given VirtualPortConfiguration and assigns it to the Settings field.
func (o *VirtualPortPrice) SetSettings(v VirtualPortConfiguration) {
	o.Settings = &v
}

func (o VirtualPortPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Lag != nil {
		toSerialize["lag"] = o.Lag
	}
	if o.PhysicalPortsQuantity != nil {
		toSerialize["physicalPortsQuantity"] = o.PhysicalPortsQuantity
	}
	if o.Bandwidth != nil {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if o.Redundancy != nil {
		toSerialize["redundancy"] = o.Redundancy
	}
	if o.ConnectivitySource != nil {
		toSerialize["connectivitySource"] = o.ConnectivitySource
	}
	if o.ServiceType != nil {
		toSerialize["serviceType"] = o.ServiceType
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualPortPrice struct {
	value *VirtualPortPrice
	isSet bool
}

func (v NullableVirtualPortPrice) Get() *VirtualPortPrice {
	return v.value
}

func (v *NullableVirtualPortPrice) Set(val *VirtualPortPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualPortPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualPortPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualPortPrice(val *VirtualPortPrice) *NullableVirtualPortPrice {
	return &NullableVirtualPortPrice{value: val, isSet: true}
}

func (v NullableVirtualPortPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualPortPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



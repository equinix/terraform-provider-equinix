/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// SearchFieldName Possible field names to use on filters
type SearchFieldName string

// List of SearchFieldName
const (
	IS_REMOTE SearchFieldName = "/isRemote"
	NAME SearchFieldName = "/name"
	UUID SearchFieldName = "/uuid"
	ACCOUNT_ORG_ID SearchFieldName = "/account/orgId"
	A_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NAME SearchFieldName = "/aSide/accessPoint/account/accountName"
	A_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NUMBER SearchFieldName = "/aSide/accessPoint/account/accountNumber"
	A_SIDE_ACCESS_POINT_GATEWAY_UUID SearchFieldName = "/aSide/accessPoint/gateway/uuid"
	A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_C_TAG SearchFieldName = "/aSide/accessPoint/linkProtocol/vlanCTag"
	A_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_S_TAG SearchFieldName = "/aSide/accessPoint/linkProtocol/vlanSTag"
	A_SIDE_ACCESS_POINT_LOCATION_METRO_CODE SearchFieldName = "/aSide/accessPoint/location/metroCode"
	A_SIDE_ACCESS_POINT_LOCATION_METRO_NAME SearchFieldName = "/aSide/accessPoint/location/metroName"
	A_SIDE_ACCESS_POINT_NAME SearchFieldName = "/aSide/accessPoint/name"
	A_SIDE_ACCESS_POINT_PORT_UUID SearchFieldName = "/aSide/accessPoint/port/uuid"
	A_SIDE_ACCESS_POINT_PORT_NAME SearchFieldName = "/aSide/accessPoint/port/name"
	A_SIDE_ACCESS_POINT_TYPE SearchFieldName = "/aSide/accessPoint/type"
	A_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_NAME SearchFieldName = "/aSide/accessPoint/virtualDevice/name"
	A_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_UUID SearchFieldName = "/aSide/accessPoint/virtualDevice/uuid"
	A_SIDE_SERVICE_TOKEN_UUID SearchFieldName = "/aSide/serviceToken/uuid"
	CHANGE_STATUS SearchFieldName = "/change/status"
	OPERATION_EQUINIX_STATUS SearchFieldName = "/operation/equinixStatus"
	OPERATION_PROVIDER_STATUS SearchFieldName = "/operation/providerStatus"
	PROJECT_PROJECT_ID SearchFieldName = "/project/projectId"
	REDUNDANCY_GROUP SearchFieldName = "/redundancy/group"
	REDUNDANCY_PRIORITY SearchFieldName = "/redundancy/priority"
	Z_SIDE_ACCESS_POINT_ACCOUNT_ACCOUNT_NAME SearchFieldName = "/zSide/accessPoint/account/accountName"
	Z_SIDE_ACCESS_POINT_AUTHENTICATION_KEY SearchFieldName = "/zSide/accessPoint/authenticationKey"
	Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_C_TAG SearchFieldName = "/zSide/accessPoint/linkProtocol/vlanCTag"
	Z_SIDE_ACCESS_POINT_LINK_PROTOCOL_VLAN_S_TAG SearchFieldName = "/zSide/accessPoint/linkProtocol/vlanSTag"
	Z_SIDE_ACCESS_POINT_LOCATION_METRO_CODE SearchFieldName = "/zSide/accessPoint/location/metroCode"
	Z_SIDE_ACCESS_POINT_LOCATION_METRO_NAME SearchFieldName = "/zSide/accessPoint/location/metroName"
	Z_SIDE_ACCESS_POINT_NAME SearchFieldName = "/zSide/accessPoint/name"
	Z_SIDE_ACCESS_POINT_PORT_UUID SearchFieldName = "/zSide/accessPoint/port/uuid"
	Z_SIDE_ACCESS_POINT_PORT_NAME SearchFieldName = "/zSide/accessPoint/port/name"
	Z_SIDE_ACCESS_POINT_PROFILE_UUID SearchFieldName = "/zSide/accessPoint/profile/uuid"
	Z_SIDE_ACCESS_POINT_TYPE SearchFieldName = "/zSide/accessPoint/type"
	Z_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_NAME SearchFieldName = "/zSide/accessPoint/virtualDevice/name"
	Z_SIDE_ACCESS_POINT_VIRTUAL_DEVICE_UUID SearchFieldName = "/zSide/accessPoint/virtualDevice/uuid"
	Z_SIDE_SERVICE_TOKEN_UUID SearchFieldName = "/zSide/serviceToken/uuid"
	STAR SearchFieldName = "*"
)

// All allowed values of SearchFieldName enum
var AllowedSearchFieldNameEnumValues = []SearchFieldName{
	"/isRemote",
	"/name",
	"/uuid",
	"/account/orgId",
	"/aSide/accessPoint/account/accountName",
	"/aSide/accessPoint/account/accountNumber",
	"/aSide/accessPoint/gateway/uuid",
	"/aSide/accessPoint/linkProtocol/vlanCTag",
	"/aSide/accessPoint/linkProtocol/vlanSTag",
	"/aSide/accessPoint/location/metroCode",
	"/aSide/accessPoint/location/metroName",
	"/aSide/accessPoint/name",
	"/aSide/accessPoint/port/uuid",
	"/aSide/accessPoint/port/name",
	"/aSide/accessPoint/type",
	"/aSide/accessPoint/virtualDevice/name",
	"/aSide/accessPoint/virtualDevice/uuid",
	"/aSide/serviceToken/uuid",
	"/change/status",
	"/operation/equinixStatus",
	"/operation/providerStatus",
	"/project/projectId",
	"/redundancy/group",
	"/redundancy/priority",
	"/zSide/accessPoint/account/accountName",
	"/zSide/accessPoint/authenticationKey",
	"/zSide/accessPoint/linkProtocol/vlanCTag",
	"/zSide/accessPoint/linkProtocol/vlanSTag",
	"/zSide/accessPoint/location/metroCode",
	"/zSide/accessPoint/location/metroName",
	"/zSide/accessPoint/name",
	"/zSide/accessPoint/port/uuid",
	"/zSide/accessPoint/port/name",
	"/zSide/accessPoint/profile/uuid",
	"/zSide/accessPoint/type",
	"/zSide/accessPoint/virtualDevice/name",
	"/zSide/accessPoint/virtualDevice/uuid",
	"/zSide/serviceToken/uuid",
	"*",
}

func (v *SearchFieldName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchFieldName(value)
	for _, existing := range AllowedSearchFieldNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchFieldName", value)
}

// NewSearchFieldNameFromValue returns a pointer to a valid SearchFieldName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchFieldNameFromValue(v string) (*SearchFieldName, error) {
	ev := SearchFieldName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchFieldName: valid values are %v", v, AllowedSearchFieldNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchFieldName) IsValid() bool {
	for _, existing := range AllowedSearchFieldNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchFieldName value
func (v SearchFieldName) Ptr() *SearchFieldName {
	return &v
}

type NullableSearchFieldName struct {
	value *SearchFieldName
	isSet bool
}

func (v NullableSearchFieldName) Get() *SearchFieldName {
	return v.value
}

func (v *NullableSearchFieldName) Set(val *SearchFieldName) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchFieldName) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchFieldName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchFieldName(val *SearchFieldName) *NullableSearchFieldName {
	return &NullableSearchFieldName{value: val, isSet: true}
}

func (v NullableSearchFieldName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchFieldName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


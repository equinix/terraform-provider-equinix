/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// PortSettings Port configuration settings
type PortSettings struct {
	PortType string `json:"portType"`
}

// NewPortSettings instantiates a new PortSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortSettings(portType string) *PortSettings {
	this := PortSettings{}
	this.PortType = portType
	return &this
}

// NewPortSettingsWithDefaults instantiates a new PortSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortSettingsWithDefaults() *PortSettings {
	this := PortSettings{}
	return &this
}

// GetPortType returns the PortType field value
func (o *PortSettings) GetPortType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PortType
}

// GetPortTypeOk returns a tuple with the PortType field value
// and a boolean to check if the value has been set.
func (o *PortSettings) GetPortTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PortType, true
}

// SetPortType sets field value
func (o *PortSettings) SetPortType(v string) {
	o.PortType = v
}

func (o PortSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["portType"] = o.PortType
	}
	return json.Marshal(toSerialize)
}

type NullablePortSettings struct {
	value *PortSettings
	isSet bool
}

func (v NullablePortSettings) Get() *PortSettings {
	return v.value
}

func (v *NullablePortSettings) Set(val *PortSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePortSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePortSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortSettings(val *PortSettings) *NullablePortSettings {
	return &NullablePortSettings{value: val, isSet: true}
}

func (v NullablePortSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



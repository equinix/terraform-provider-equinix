/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// PortRedundancy Port redundancy configuration
type PortRedundancy struct {
	// Access point redundancy
	Enabled *bool `json:"enabled,omitempty"`
	// Port redundancy group
	Group *int32 `json:"group,omitempty"`
	Priority *PortPriority `json:"priority,omitempty"`
}

// NewPortRedundancy instantiates a new PortRedundancy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortRedundancy() *PortRedundancy {
	this := PortRedundancy{}
	return &this
}

// NewPortRedundancyWithDefaults instantiates a new PortRedundancy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortRedundancyWithDefaults() *PortRedundancy {
	this := PortRedundancy{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PortRedundancy) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortRedundancy) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PortRedundancy) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PortRedundancy) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *PortRedundancy) GetGroup() int32 {
	if o == nil || o.Group == nil {
		var ret int32
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortRedundancy) GetGroupOk() (*int32, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *PortRedundancy) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given int32 and assigns it to the Group field.
func (o *PortRedundancy) SetGroup(v int32) {
	o.Group = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *PortRedundancy) GetPriority() PortPriority {
	if o == nil || o.Priority == nil {
		var ret PortPriority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortRedundancy) GetPriorityOk() (*PortPriority, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *PortRedundancy) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given PortPriority and assigns it to the Priority field.
func (o *PortRedundancy) SetPriority(v PortPriority) {
	o.Priority = &v
}

func (o PortRedundancy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	return json.Marshal(toSerialize)
}

type NullablePortRedundancy struct {
	value *PortRedundancy
	isSet bool
}

func (v NullablePortRedundancy) Get() *PortRedundancy {
	return v.value
}

func (v *NullablePortRedundancy) Set(val *PortRedundancy) {
	v.value = val
	v.isSet = true
}

func (v NullablePortRedundancy) IsSet() bool {
	return v.isSet
}

func (v *NullablePortRedundancy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortRedundancy(val *PortRedundancy) *NullablePortRedundancy {
	return &NullablePortRedundancy{value: val, isSet: true}
}

func (v NullablePortRedundancy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortRedundancy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



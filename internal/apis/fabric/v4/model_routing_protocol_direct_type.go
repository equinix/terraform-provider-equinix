/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// RoutingProtocolDirectType struct for RoutingProtocolDirectType
type RoutingProtocolDirectType struct {
	// Routing protocol type
	Type string `json:"type"`
	Name *string `json:"name,omitempty"`
	DirectIpv4 *DirectConnectionIpv4 `json:"directIpv4,omitempty"`
	DirectIpv6 *DirectConnectionIpv6 `json:"directIpv6,omitempty"`
}

// NewRoutingProtocolDirectType instantiates a new RoutingProtocolDirectType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolDirectType(type_ string) *RoutingProtocolDirectType {
	this := RoutingProtocolDirectType{}
	this.Type = type_
	return &this
}

// NewRoutingProtocolDirectTypeWithDefaults instantiates a new RoutingProtocolDirectType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolDirectTypeWithDefaults() *RoutingProtocolDirectType {
	this := RoutingProtocolDirectType{}
	return &this
}

// GetType returns the Type field value
func (o *RoutingProtocolDirectType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RoutingProtocolDirectType) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoutingProtocolDirectType) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectType) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoutingProtocolDirectType) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoutingProtocolDirectType) SetName(v string) {
	o.Name = &v
}

// GetDirectIpv4 returns the DirectIpv4 field value if set, zero value otherwise.
func (o *RoutingProtocolDirectType) GetDirectIpv4() DirectConnectionIpv4 {
	if o == nil || o.DirectIpv4 == nil {
		var ret DirectConnectionIpv4
		return ret
	}
	return *o.DirectIpv4
}

// GetDirectIpv4Ok returns a tuple with the DirectIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectType) GetDirectIpv4Ok() (*DirectConnectionIpv4, bool) {
	if o == nil || o.DirectIpv4 == nil {
		return nil, false
	}
	return o.DirectIpv4, true
}

// HasDirectIpv4 returns a boolean if a field has been set.
func (o *RoutingProtocolDirectType) HasDirectIpv4() bool {
	if o != nil && o.DirectIpv4 != nil {
		return true
	}

	return false
}

// SetDirectIpv4 gets a reference to the given DirectConnectionIpv4 and assigns it to the DirectIpv4 field.
func (o *RoutingProtocolDirectType) SetDirectIpv4(v DirectConnectionIpv4) {
	o.DirectIpv4 = &v
}

// GetDirectIpv6 returns the DirectIpv6 field value if set, zero value otherwise.
func (o *RoutingProtocolDirectType) GetDirectIpv6() DirectConnectionIpv6 {
	if o == nil || o.DirectIpv6 == nil {
		var ret DirectConnectionIpv6
		return ret
	}
	return *o.DirectIpv6
}

// GetDirectIpv6Ok returns a tuple with the DirectIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectType) GetDirectIpv6Ok() (*DirectConnectionIpv6, bool) {
	if o == nil || o.DirectIpv6 == nil {
		return nil, false
	}
	return o.DirectIpv6, true
}

// HasDirectIpv6 returns a boolean if a field has been set.
func (o *RoutingProtocolDirectType) HasDirectIpv6() bool {
	if o != nil && o.DirectIpv6 != nil {
		return true
	}

	return false
}

// SetDirectIpv6 gets a reference to the given DirectConnectionIpv6 and assigns it to the DirectIpv6 field.
func (o *RoutingProtocolDirectType) SetDirectIpv6(v DirectConnectionIpv6) {
	o.DirectIpv6 = &v
}

func (o RoutingProtocolDirectType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DirectIpv4 != nil {
		toSerialize["directIpv4"] = o.DirectIpv4
	}
	if o.DirectIpv6 != nil {
		toSerialize["directIpv6"] = o.DirectIpv6
	}
	return json.Marshal(toSerialize)
}

type NullableRoutingProtocolDirectType struct {
	value *RoutingProtocolDirectType
	isSet bool
}

func (v NullableRoutingProtocolDirectType) Get() *RoutingProtocolDirectType {
	return v.value
}

func (v *NullableRoutingProtocolDirectType) Set(val *RoutingProtocolDirectType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolDirectType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolDirectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolDirectType(val *RoutingProtocolDirectType) *NullableRoutingProtocolDirectType {
	return &NullableRoutingProtocolDirectType{value: val, isSet: true}
}

func (v NullableRoutingProtocolDirectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolDirectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



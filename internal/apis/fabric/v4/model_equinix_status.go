/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// EquinixStatus Connection status
type EquinixStatus string

// List of EquinixStatus
const (
	REJECTED_ACK EquinixStatus = "REJECTED_ACK"
	REJECTED EquinixStatus = "REJECTED"
	PENDING_DELETE EquinixStatus = "PENDING_DELETE"
	PROVISIONED EquinixStatus = "PROVISIONED"
	BEING_REPROVISIONED EquinixStatus = "BEING_REPROVISIONED"
	BEING_DEPROVISIONED EquinixStatus = "BEING_DEPROVISIONED"
	BEING_PROVISIONED EquinixStatus = "BEING_PROVISIONED"
	CREATED EquinixStatus = "CREATED"
	ERRORED EquinixStatus = "ERRORED"
	PENDING_DEPROVISIONING EquinixStatus = "PENDING_DEPROVISIONING"
	APPROVED EquinixStatus = "APPROVED"
	ORDERING EquinixStatus = "ORDERING"
	PENDING_APPROVAL EquinixStatus = "PENDING_APPROVAL"
	NOT_PROVISIONED EquinixStatus = "NOT_PROVISIONED"
	DEPROVISIONING EquinixStatus = "DEPROVISIONING"
	NOT_DEPROVISIONED EquinixStatus = "NOT_DEPROVISIONED"
	PENDING_AUTO_APPROVAL EquinixStatus = "PENDING_AUTO_APPROVAL"
	PROVISIONING EquinixStatus = "PROVISIONING"
	PENDING_BGP_PEERING EquinixStatus = "PENDING_BGP_PEERING"
	PENDING_PROVIDER_VLAN EquinixStatus = "PENDING_PROVIDER_VLAN"
	DEPROVISIONED EquinixStatus = "DEPROVISIONED"
	DELETED EquinixStatus = "DELETED"
	PENDING_BANDWIDTH_APPROVAL EquinixStatus = "PENDING_BANDWIDTH_APPROVAL"
	AUTO_APPROVAL_FAILED EquinixStatus = "AUTO_APPROVAL_FAILED"
	UPDATE_PENDING EquinixStatus = "UPDATE_PENDING"
	DELETED_API EquinixStatus = "DELETED_API"
	MODIFIED EquinixStatus = "MODIFIED"
	PENDING_PROVIDER_VLAN_ERROR EquinixStatus = "PENDING_PROVIDER_VLAN_ERROR"
	DRAFT EquinixStatus = "DRAFT"
	CANCELLED EquinixStatus = "CANCELLED"
	PENDING_INTERFACE_CONFIGURATION EquinixStatus = "PENDING_INTERFACE_CONFIGURATION"
)

// All allowed values of EquinixStatus enum
var AllowedEquinixStatusEnumValues = []EquinixStatus{
	"REJECTED_ACK",
	"REJECTED",
	"PENDING_DELETE",
	"PROVISIONED",
	"BEING_REPROVISIONED",
	"BEING_DEPROVISIONED",
	"BEING_PROVISIONED",
	"CREATED",
	"ERRORED",
	"PENDING_DEPROVISIONING",
	"APPROVED",
	"ORDERING",
	"PENDING_APPROVAL",
	"NOT_PROVISIONED",
	"DEPROVISIONING",
	"NOT_DEPROVISIONED",
	"PENDING_AUTO_APPROVAL",
	"PROVISIONING",
	"PENDING_BGP_PEERING",
	"PENDING_PROVIDER_VLAN",
	"DEPROVISIONED",
	"DELETED",
	"PENDING_BANDWIDTH_APPROVAL",
	"AUTO_APPROVAL_FAILED",
	"UPDATE_PENDING",
	"DELETED_API",
	"MODIFIED",
	"PENDING_PROVIDER_VLAN_ERROR",
	"DRAFT",
	"CANCELLED",
	"PENDING_INTERFACE_CONFIGURATION",
}

func (v *EquinixStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EquinixStatus(value)
	for _, existing := range AllowedEquinixStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EquinixStatus", value)
}

// NewEquinixStatusFromValue returns a pointer to a valid EquinixStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEquinixStatusFromValue(v string) (*EquinixStatus, error) {
	ev := EquinixStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EquinixStatus: valid values are %v", v, AllowedEquinixStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EquinixStatus) IsValid() bool {
	for _, existing := range AllowedEquinixStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EquinixStatus value
func (v EquinixStatus) Ptr() *EquinixStatus {
	return &v
}

type NullableEquinixStatus struct {
	value *EquinixStatus
	isSet bool
}

func (v NullableEquinixStatus) Get() *EquinixStatus {
	return v.value
}

func (v *NullableEquinixStatus) Set(val *EquinixStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEquinixStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEquinixStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEquinixStatus(val *EquinixStatus) *NullableEquinixStatus {
	return &NullableEquinixStatus{value: val, isSet: true}
}

func (v NullableEquinixStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEquinixStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ProcessStep Definition of customized step while making connection
type ProcessStep struct {
	// Service profile custom step title
	Title *string `json:"title,omitempty"`
	// Service profile custom step sub title
	SubTitle *string `json:"subTitle,omitempty"`
	// Service profile custom step description
	Description *string `json:"description,omitempty"`
}

// NewProcessStep instantiates a new ProcessStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessStep() *ProcessStep {
	this := ProcessStep{}
	return &this
}

// NewProcessStepWithDefaults instantiates a new ProcessStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessStepWithDefaults() *ProcessStep {
	this := ProcessStep{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ProcessStep) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStep) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ProcessStep) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ProcessStep) SetTitle(v string) {
	o.Title = &v
}

// GetSubTitle returns the SubTitle field value if set, zero value otherwise.
func (o *ProcessStep) GetSubTitle() string {
	if o == nil || o.SubTitle == nil {
		var ret string
		return ret
	}
	return *o.SubTitle
}

// GetSubTitleOk returns a tuple with the SubTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStep) GetSubTitleOk() (*string, bool) {
	if o == nil || o.SubTitle == nil {
		return nil, false
	}
	return o.SubTitle, true
}

// HasSubTitle returns a boolean if a field has been set.
func (o *ProcessStep) HasSubTitle() bool {
	if o != nil && o.SubTitle != nil {
		return true
	}

	return false
}

// SetSubTitle gets a reference to the given string and assigns it to the SubTitle field.
func (o *ProcessStep) SetSubTitle(v string) {
	o.SubTitle = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProcessStep) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessStep) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProcessStep) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProcessStep) SetDescription(v string) {
	o.Description = &v
}

func (o ProcessStep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.SubTitle != nil {
		toSerialize["subTitle"] = o.SubTitle
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableProcessStep struct {
	value *ProcessStep
	isSet bool
}

func (v NullableProcessStep) Get() *ProcessStep {
	return v.value
}

func (v *NullableProcessStep) Set(val *ProcessStep) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessStep) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessStep(val *ProcessStep) *NullableProcessStep {
	return &NullableProcessStep{value: val, isSet: true}
}

func (v NullableProcessStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



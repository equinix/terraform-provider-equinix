/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// PortExpression struct for PortExpression
type PortExpression struct {
	And []PortExpression `json:"and,omitempty"`
	Or []PortExpression `json:"or,omitempty"`
	Property *PortSearchFieldName `json:"property,omitempty"`
	Operator *string `json:"operator,omitempty"`
	Values []string `json:"values,omitempty"`
}

// NewPortExpression instantiates a new PortExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortExpression() *PortExpression {
	this := PortExpression{}
	return &this
}

// NewPortExpressionWithDefaults instantiates a new PortExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortExpressionWithDefaults() *PortExpression {
	this := PortExpression{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *PortExpression) GetAnd() []PortExpression {
	if o == nil || o.And == nil {
		var ret []PortExpression
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortExpression) GetAndOk() ([]PortExpression, bool) {
	if o == nil || o.And == nil {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *PortExpression) HasAnd() bool {
	if o != nil && o.And != nil {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []PortExpression and assigns it to the And field.
func (o *PortExpression) SetAnd(v []PortExpression) {
	o.And = v
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *PortExpression) GetOr() []PortExpression {
	if o == nil || o.Or == nil {
		var ret []PortExpression
		return ret
	}
	return o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortExpression) GetOrOk() ([]PortExpression, bool) {
	if o == nil || o.Or == nil {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *PortExpression) HasOr() bool {
	if o != nil && o.Or != nil {
		return true
	}

	return false
}

// SetOr gets a reference to the given []PortExpression and assigns it to the Or field.
func (o *PortExpression) SetOr(v []PortExpression) {
	o.Or = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *PortExpression) GetProperty() PortSearchFieldName {
	if o == nil || o.Property == nil {
		var ret PortSearchFieldName
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortExpression) GetPropertyOk() (*PortSearchFieldName, bool) {
	if o == nil || o.Property == nil {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *PortExpression) HasProperty() bool {
	if o != nil && o.Property != nil {
		return true
	}

	return false
}

// SetProperty gets a reference to the given PortSearchFieldName and assigns it to the Property field.
func (o *PortExpression) SetProperty(v PortSearchFieldName) {
	o.Property = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *PortExpression) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortExpression) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *PortExpression) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *PortExpression) SetOperator(v string) {
	o.Operator = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *PortExpression) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortExpression) GetValuesOk() ([]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *PortExpression) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *PortExpression) SetValues(v []string) {
	o.Values = v
}

func (o PortExpression) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.And != nil {
		toSerialize["and"] = o.And
	}
	if o.Or != nil {
		toSerialize["or"] = o.Or
	}
	if o.Property != nil {
		toSerialize["property"] = o.Property
	}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullablePortExpression struct {
	value *PortExpression
	isSet bool
}

func (v NullablePortExpression) Get() *PortExpression {
	return v.value
}

func (v *NullablePortExpression) Set(val *PortExpression) {
	v.value = val
	v.isSet = true
}

func (v NullablePortExpression) IsSet() bool {
	return v.isSet
}

func (v *NullablePortExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortExpression(val *PortExpression) *NullablePortExpression {
	return &NullablePortExpression{value: val, isSet: true}
}

func (v NullablePortExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionActionRequest Connection action request
type ConnectionActionRequest struct {
	Type Actions `json:"type"`
	// Connection rejection reason datail
	Description *string `json:"description,omitempty"`
	Data *ConnectionAcceptanceData `json:"data,omitempty"`
}

// NewConnectionActionRequest instantiates a new ConnectionActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionActionRequest(type_ Actions) *ConnectionActionRequest {
	this := ConnectionActionRequest{}
	this.Type = type_
	return &this
}

// NewConnectionActionRequestWithDefaults instantiates a new ConnectionActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionActionRequestWithDefaults() *ConnectionActionRequest {
	this := ConnectionActionRequest{}
	return &this
}

// GetType returns the Type field value
func (o *ConnectionActionRequest) GetType() Actions {
	if o == nil {
		var ret Actions
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectionActionRequest) GetTypeOk() (*Actions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectionActionRequest) SetType(v Actions) {
	o.Type = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectionActionRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionActionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectionActionRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectionActionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConnectionActionRequest) GetData() ConnectionAcceptanceData {
	if o == nil || o.Data == nil {
		var ret ConnectionAcceptanceData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionActionRequest) GetDataOk() (*ConnectionAcceptanceData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConnectionActionRequest) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given ConnectionAcceptanceData and assigns it to the Data field.
func (o *ConnectionActionRequest) SetData(v ConnectionAcceptanceData) {
	o.Data = &v
}

func (o ConnectionActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionActionRequest struct {
	value *ConnectionActionRequest
	isSet bool
}

func (v NullableConnectionActionRequest) Get() *ConnectionActionRequest {
	return v.value
}

func (v *NullableConnectionActionRequest) Set(val *ConnectionActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionActionRequest(val *ConnectionActionRequest) *NullableConnectionActionRequest {
	return &NullableConnectionActionRequest{value: val, isSet: true}
}

func (v NullableConnectionActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



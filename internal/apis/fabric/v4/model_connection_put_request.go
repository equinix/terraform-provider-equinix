/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionPutRequest Create connection put request
type ConnectionPutRequest struct {
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
	Type ConnectionType `json:"type"`
	// Customer-provided connection name
	Name *string `json:"name,omitempty"`
	Order *Order `json:"order,omitempty"`
	// Preferences for notifications on connection configuration or status changes
	Notifications []SimplifiedNotification `json:"notifications,omitempty"`
	// Connection bandwidth in Mbps
	Bandwidth *int32 `json:"bandwidth,omitempty"`
	Redundancy *ConnectionRedundancy `json:"redundancy,omitempty"`
	ASide ConnectionSide `json:"aSide"`
	ZSide ConnectionSide `json:"zSide"`
}

// NewConnectionPutRequest instantiates a new ConnectionPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionPutRequest(type_ ConnectionType, aSide ConnectionSide, zSide ConnectionSide) *ConnectionPutRequest {
	this := ConnectionPutRequest{}
	this.Type = type_
	this.ASide = aSide
	this.ZSide = zSide
	return &this
}

// NewConnectionPutRequestWithDefaults instantiates a new ConnectionPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionPutRequestWithDefaults() *ConnectionPutRequest {
	this := ConnectionPutRequest{}
	return &this
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *ConnectionPutRequest) GetAdditionalInfo() map[string]interface{} {
	if o == nil || o.AdditionalInfo == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || o.AdditionalInfo == nil {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *ConnectionPutRequest) HasAdditionalInfo() bool {
	if o != nil && o.AdditionalInfo != nil {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *ConnectionPutRequest) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

// GetType returns the Type field value
func (o *ConnectionPutRequest) GetType() ConnectionType {
	if o == nil {
		var ret ConnectionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetTypeOk() (*ConnectionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectionPutRequest) SetType(v ConnectionType) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectionPutRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectionPutRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectionPutRequest) SetName(v string) {
	o.Name = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *ConnectionPutRequest) GetOrder() Order {
	if o == nil || o.Order == nil {
		var ret Order
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetOrderOk() (*Order, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *ConnectionPutRequest) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given Order and assigns it to the Order field.
func (o *ConnectionPutRequest) SetOrder(v Order) {
	o.Order = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *ConnectionPutRequest) GetNotifications() []SimplifiedNotification {
	if o == nil || o.Notifications == nil {
		var ret []SimplifiedNotification
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetNotificationsOk() ([]SimplifiedNotification, bool) {
	if o == nil || o.Notifications == nil {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *ConnectionPutRequest) HasNotifications() bool {
	if o != nil && o.Notifications != nil {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []SimplifiedNotification and assigns it to the Notifications field.
func (o *ConnectionPutRequest) SetNotifications(v []SimplifiedNotification) {
	o.Notifications = v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *ConnectionPutRequest) GetBandwidth() int32 {
	if o == nil || o.Bandwidth == nil {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetBandwidthOk() (*int32, bool) {
	if o == nil || o.Bandwidth == nil {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *ConnectionPutRequest) HasBandwidth() bool {
	if o != nil && o.Bandwidth != nil {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *ConnectionPutRequest) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *ConnectionPutRequest) GetRedundancy() ConnectionRedundancy {
	if o == nil || o.Redundancy == nil {
		var ret ConnectionRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetRedundancyOk() (*ConnectionRedundancy, bool) {
	if o == nil || o.Redundancy == nil {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *ConnectionPutRequest) HasRedundancy() bool {
	if o != nil && o.Redundancy != nil {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given ConnectionRedundancy and assigns it to the Redundancy field.
func (o *ConnectionPutRequest) SetRedundancy(v ConnectionRedundancy) {
	o.Redundancy = &v
}

// GetASide returns the ASide field value
func (o *ConnectionPutRequest) GetASide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ASide
}

// GetASideOk returns a tuple with the ASide field value
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetASideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ASide, true
}

// SetASide sets field value
func (o *ConnectionPutRequest) SetASide(v ConnectionSide) {
	o.ASide = v
}

// GetZSide returns the ZSide field value
func (o *ConnectionPutRequest) GetZSide() ConnectionSide {
	if o == nil {
		var ret ConnectionSide
		return ret
	}

	return o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value
// and a boolean to check if the value has been set.
func (o *ConnectionPutRequest) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZSide, true
}

// SetZSide sets field value
func (o *ConnectionPutRequest) SetZSide(v ConnectionSide) {
	o.ZSide = v
}

func (o ConnectionPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalInfo != nil {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.Notifications != nil {
		toSerialize["notifications"] = o.Notifications
	}
	if o.Bandwidth != nil {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if o.Redundancy != nil {
		toSerialize["redundancy"] = o.Redundancy
	}
	if true {
		toSerialize["aSide"] = o.ASide
	}
	if true {
		toSerialize["zSide"] = o.ZSide
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionPutRequest struct {
	value *ConnectionPutRequest
	isSet bool
}

func (v NullableConnectionPutRequest) Get() *ConnectionPutRequest {
	return v.value
}

func (v *NullableConnectionPutRequest) Set(val *ConnectionPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionPutRequest(val *ConnectionPutRequest) *NullableConnectionPutRequest {
	return &NullableConnectionPutRequest{value: val, isSet: true}
}

func (v NullableConnectionPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



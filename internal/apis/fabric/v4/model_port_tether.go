/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// PortTether Port physical connection
type PortTether struct {
	// Port cross connect identifier
	CrossConnectId *string `json:"crossConnectId,omitempty"`
	// Port cabinet number
	CabinetNumber *string `json:"cabinetNumber,omitempty"`
	// Port system name
	SystemName *string `json:"systemName,omitempty"`
	// Port patch panel
	PatchPanel *string `json:"patchPanel,omitempty"`
	// Port patch panel port A
	PatchPanelPortA *string `json:"patchPanelPortA,omitempty"`
	// Port patch panel port B
	PatchPanelPortB *string `json:"patchPanelPortB,omitempty"`
}

// NewPortTether instantiates a new PortTether object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortTether() *PortTether {
	this := PortTether{}
	return &this
}

// NewPortTetherWithDefaults instantiates a new PortTether object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortTetherWithDefaults() *PortTether {
	this := PortTether{}
	return &this
}

// GetCrossConnectId returns the CrossConnectId field value if set, zero value otherwise.
func (o *PortTether) GetCrossConnectId() string {
	if o == nil || o.CrossConnectId == nil {
		var ret string
		return ret
	}
	return *o.CrossConnectId
}

// GetCrossConnectIdOk returns a tuple with the CrossConnectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortTether) GetCrossConnectIdOk() (*string, bool) {
	if o == nil || o.CrossConnectId == nil {
		return nil, false
	}
	return o.CrossConnectId, true
}

// HasCrossConnectId returns a boolean if a field has been set.
func (o *PortTether) HasCrossConnectId() bool {
	if o != nil && o.CrossConnectId != nil {
		return true
	}

	return false
}

// SetCrossConnectId gets a reference to the given string and assigns it to the CrossConnectId field.
func (o *PortTether) SetCrossConnectId(v string) {
	o.CrossConnectId = &v
}

// GetCabinetNumber returns the CabinetNumber field value if set, zero value otherwise.
func (o *PortTether) GetCabinetNumber() string {
	if o == nil || o.CabinetNumber == nil {
		var ret string
		return ret
	}
	return *o.CabinetNumber
}

// GetCabinetNumberOk returns a tuple with the CabinetNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortTether) GetCabinetNumberOk() (*string, bool) {
	if o == nil || o.CabinetNumber == nil {
		return nil, false
	}
	return o.CabinetNumber, true
}

// HasCabinetNumber returns a boolean if a field has been set.
func (o *PortTether) HasCabinetNumber() bool {
	if o != nil && o.CabinetNumber != nil {
		return true
	}

	return false
}

// SetCabinetNumber gets a reference to the given string and assigns it to the CabinetNumber field.
func (o *PortTether) SetCabinetNumber(v string) {
	o.CabinetNumber = &v
}

// GetSystemName returns the SystemName field value if set, zero value otherwise.
func (o *PortTether) GetSystemName() string {
	if o == nil || o.SystemName == nil {
		var ret string
		return ret
	}
	return *o.SystemName
}

// GetSystemNameOk returns a tuple with the SystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortTether) GetSystemNameOk() (*string, bool) {
	if o == nil || o.SystemName == nil {
		return nil, false
	}
	return o.SystemName, true
}

// HasSystemName returns a boolean if a field has been set.
func (o *PortTether) HasSystemName() bool {
	if o != nil && o.SystemName != nil {
		return true
	}

	return false
}

// SetSystemName gets a reference to the given string and assigns it to the SystemName field.
func (o *PortTether) SetSystemName(v string) {
	o.SystemName = &v
}

// GetPatchPanel returns the PatchPanel field value if set, zero value otherwise.
func (o *PortTether) GetPatchPanel() string {
	if o == nil || o.PatchPanel == nil {
		var ret string
		return ret
	}
	return *o.PatchPanel
}

// GetPatchPanelOk returns a tuple with the PatchPanel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortTether) GetPatchPanelOk() (*string, bool) {
	if o == nil || o.PatchPanel == nil {
		return nil, false
	}
	return o.PatchPanel, true
}

// HasPatchPanel returns a boolean if a field has been set.
func (o *PortTether) HasPatchPanel() bool {
	if o != nil && o.PatchPanel != nil {
		return true
	}

	return false
}

// SetPatchPanel gets a reference to the given string and assigns it to the PatchPanel field.
func (o *PortTether) SetPatchPanel(v string) {
	o.PatchPanel = &v
}

// GetPatchPanelPortA returns the PatchPanelPortA field value if set, zero value otherwise.
func (o *PortTether) GetPatchPanelPortA() string {
	if o == nil || o.PatchPanelPortA == nil {
		var ret string
		return ret
	}
	return *o.PatchPanelPortA
}

// GetPatchPanelPortAOk returns a tuple with the PatchPanelPortA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortTether) GetPatchPanelPortAOk() (*string, bool) {
	if o == nil || o.PatchPanelPortA == nil {
		return nil, false
	}
	return o.PatchPanelPortA, true
}

// HasPatchPanelPortA returns a boolean if a field has been set.
func (o *PortTether) HasPatchPanelPortA() bool {
	if o != nil && o.PatchPanelPortA != nil {
		return true
	}

	return false
}

// SetPatchPanelPortA gets a reference to the given string and assigns it to the PatchPanelPortA field.
func (o *PortTether) SetPatchPanelPortA(v string) {
	o.PatchPanelPortA = &v
}

// GetPatchPanelPortB returns the PatchPanelPortB field value if set, zero value otherwise.
func (o *PortTether) GetPatchPanelPortB() string {
	if o == nil || o.PatchPanelPortB == nil {
		var ret string
		return ret
	}
	return *o.PatchPanelPortB
}

// GetPatchPanelPortBOk returns a tuple with the PatchPanelPortB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortTether) GetPatchPanelPortBOk() (*string, bool) {
	if o == nil || o.PatchPanelPortB == nil {
		return nil, false
	}
	return o.PatchPanelPortB, true
}

// HasPatchPanelPortB returns a boolean if a field has been set.
func (o *PortTether) HasPatchPanelPortB() bool {
	if o != nil && o.PatchPanelPortB != nil {
		return true
	}

	return false
}

// SetPatchPanelPortB gets a reference to the given string and assigns it to the PatchPanelPortB field.
func (o *PortTether) SetPatchPanelPortB(v string) {
	o.PatchPanelPortB = &v
}

func (o PortTether) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CrossConnectId != nil {
		toSerialize["crossConnectId"] = o.CrossConnectId
	}
	if o.CabinetNumber != nil {
		toSerialize["cabinetNumber"] = o.CabinetNumber
	}
	if o.SystemName != nil {
		toSerialize["systemName"] = o.SystemName
	}
	if o.PatchPanel != nil {
		toSerialize["patchPanel"] = o.PatchPanel
	}
	if o.PatchPanelPortA != nil {
		toSerialize["patchPanelPortA"] = o.PatchPanelPortA
	}
	if o.PatchPanelPortB != nil {
		toSerialize["patchPanelPortB"] = o.PatchPanelPortB
	}
	return json.Marshal(toSerialize)
}

type NullablePortTether struct {
	value *PortTether
	isSet bool
}

func (v NullablePortTether) Get() *PortTether {
	return v.value
}

func (v *NullablePortTether) Set(val *PortTether) {
	v.value = val
	v.isSet = true
}

func (v NullablePortTether) IsSet() bool {
	return v.isSet
}

func (v *NullablePortTether) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortTether(val *PortTether) *NullablePortTether {
	return &NullablePortTether{value: val, isSet: true}
}

func (v NullablePortTether) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortTether) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



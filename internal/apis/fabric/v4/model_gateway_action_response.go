/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// GatewayActionResponse Gateway actions response object
type GatewayActionResponse struct {
	Type GatewayActionType `json:"type"`
	Uuid string `json:"uuid"`
	Description *string `json:"description,omitempty"`
	State GatewayActionState `json:"state"`
	ChangeLog Changelog `json:"changeLog"`
}

// NewGatewayActionResponse instantiates a new GatewayActionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGatewayActionResponse(type_ GatewayActionType, uuid string, state GatewayActionState, changeLog Changelog) *GatewayActionResponse {
	this := GatewayActionResponse{}
	this.Type = type_
	this.Uuid = uuid
	this.State = state
	this.ChangeLog = changeLog
	return &this
}

// NewGatewayActionResponseWithDefaults instantiates a new GatewayActionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGatewayActionResponseWithDefaults() *GatewayActionResponse {
	this := GatewayActionResponse{}
	return &this
}

// GetType returns the Type field value
func (o *GatewayActionResponse) GetType() GatewayActionType {
	if o == nil {
		var ret GatewayActionType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *GatewayActionResponse) GetTypeOk() (*GatewayActionType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *GatewayActionResponse) SetType(v GatewayActionType) {
	o.Type = v
}

// GetUuid returns the Uuid field value
func (o *GatewayActionResponse) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *GatewayActionResponse) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *GatewayActionResponse) SetUuid(v string) {
	o.Uuid = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GatewayActionResponse) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GatewayActionResponse) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GatewayActionResponse) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GatewayActionResponse) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value
func (o *GatewayActionResponse) GetState() GatewayActionState {
	if o == nil {
		var ret GatewayActionState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *GatewayActionResponse) GetStateOk() (*GatewayActionState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *GatewayActionResponse) SetState(v GatewayActionState) {
	o.State = v
}

// GetChangeLog returns the ChangeLog field value
func (o *GatewayActionResponse) GetChangeLog() Changelog {
	if o == nil {
		var ret Changelog
		return ret
	}

	return o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value
// and a boolean to check if the value has been set.
func (o *GatewayActionResponse) GetChangeLogOk() (*Changelog, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeLog, true
}

// SetChangeLog sets field value
func (o *GatewayActionResponse) SetChangeLog(v Changelog) {
	o.ChangeLog = v
}

func (o GatewayActionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["changeLog"] = o.ChangeLog
	}
	return json.Marshal(toSerialize)
}

type NullableGatewayActionResponse struct {
	value *GatewayActionResponse
	isSet bool
}

func (v NullableGatewayActionResponse) Get() *GatewayActionResponse {
	return v.value
}

func (v *NullableGatewayActionResponse) Set(val *GatewayActionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGatewayActionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGatewayActionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGatewayActionResponse(val *GatewayActionResponse) *NullableGatewayActionResponse {
	return &NullableGatewayActionResponse{value: val, isSet: true}
}

func (v NullableGatewayActionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGatewayActionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



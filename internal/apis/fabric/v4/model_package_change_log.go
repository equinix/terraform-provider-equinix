/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"time"
)

// PackageChangeLog Gateway package change log
type PackageChangeLog struct {
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	UpdatedDateTime *time.Time `json:"updatedDateTime,omitempty"`
}

// NewPackageChangeLog instantiates a new PackageChangeLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageChangeLog() *PackageChangeLog {
	this := PackageChangeLog{}
	return &this
}

// NewPackageChangeLogWithDefaults instantiates a new PackageChangeLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageChangeLogWithDefaults() *PackageChangeLog {
	this := PackageChangeLog{}
	return &this
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *PackageChangeLog) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageChangeLog) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreatedDateTime == nil {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *PackageChangeLog) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime != nil {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *PackageChangeLog) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetUpdatedDateTime returns the UpdatedDateTime field value if set, zero value otherwise.
func (o *PackageChangeLog) GetUpdatedDateTime() time.Time {
	if o == nil || o.UpdatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageChangeLog) GetUpdatedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.UpdatedDateTime == nil {
		return nil, false
	}
	return o.UpdatedDateTime, true
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *PackageChangeLog) HasUpdatedDateTime() bool {
	if o != nil && o.UpdatedDateTime != nil {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given time.Time and assigns it to the UpdatedDateTime field.
func (o *PackageChangeLog) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime = &v
}

func (o PackageChangeLog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedDateTime != nil {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.UpdatedDateTime != nil {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime
	}
	return json.Marshal(toSerialize)
}

type NullablePackageChangeLog struct {
	value *PackageChangeLog
	isSet bool
}

func (v NullablePackageChangeLog) Get() *PackageChangeLog {
	return v.value
}

func (v *NullablePackageChangeLog) Set(val *PackageChangeLog) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageChangeLog) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageChangeLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageChangeLog(val *PackageChangeLog) *NullablePackageChangeLog {
	return &NullablePackageChangeLog{value: val, isSet: true}
}

func (v NullablePackageChangeLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageChangeLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



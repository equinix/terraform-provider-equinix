/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// RoutingProtocol Connection routing protocol
type RoutingProtocol struct {
	// Routing protocol type
	Type string `json:"type"`
	// Routing protocol instance identifier
	Uuid *string `json:"uuid,omitempty"`
	// Routing protocol instance state
	State *string `json:"state,omitempty"`
}

// NewRoutingProtocol instantiates a new RoutingProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocol(type_ string) *RoutingProtocol {
	this := RoutingProtocol{}
	this.Type = type_
	return &this
}

// NewRoutingProtocolWithDefaults instantiates a new RoutingProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolWithDefaults() *RoutingProtocol {
	this := RoutingProtocol{}
	return &this
}

// GetType returns the Type field value
func (o *RoutingProtocol) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RoutingProtocol) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RoutingProtocol) SetType(v string) {
	o.Type = v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *RoutingProtocol) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocol) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *RoutingProtocol) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *RoutingProtocol) SetUuid(v string) {
	o.Uuid = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RoutingProtocol) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocol) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RoutingProtocol) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RoutingProtocol) SetState(v string) {
	o.State = &v
}

func (o RoutingProtocol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableRoutingProtocol struct {
	value *RoutingProtocol
	isSet bool
}

func (v NullableRoutingProtocol) Get() *RoutingProtocol {
	return v.value
}

func (v *NullableRoutingProtocol) Set(val *RoutingProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocol(val *RoutingProtocol) *NullableRoutingProtocol {
	return &NullableRoutingProtocol{value: val, isSet: true}
}

func (v NullableRoutingProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// VirtualConnectionPrice Virtual Connection Product configuration
type VirtualConnectionPrice struct {
	// Either uuid or rest of attributes are required
	Uuid *string `json:"uuid,omitempty"`
	Type *VirtualConnectionPriceConnectionType `json:"type,omitempty"`
	Bandwidth *int32 `json:"bandwidth,omitempty"`
	ASide *VirtualConnectionPriceASide `json:"aSide,omitempty"`
	ZSide *VirtualConnectionPriceZSide `json:"zSide,omitempty"`
}

// NewVirtualConnectionPrice instantiates a new VirtualConnectionPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualConnectionPrice() *VirtualConnectionPrice {
	this := VirtualConnectionPrice{}
	return &this
}

// NewVirtualConnectionPriceWithDefaults instantiates a new VirtualConnectionPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualConnectionPriceWithDefaults() *VirtualConnectionPrice {
	this := VirtualConnectionPrice{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *VirtualConnectionPrice) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPrice) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *VirtualConnectionPrice) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *VirtualConnectionPrice) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VirtualConnectionPrice) GetType() VirtualConnectionPriceConnectionType {
	if o == nil || o.Type == nil {
		var ret VirtualConnectionPriceConnectionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPrice) GetTypeOk() (*VirtualConnectionPriceConnectionType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VirtualConnectionPrice) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given VirtualConnectionPriceConnectionType and assigns it to the Type field.
func (o *VirtualConnectionPrice) SetType(v VirtualConnectionPriceConnectionType) {
	o.Type = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *VirtualConnectionPrice) GetBandwidth() int32 {
	if o == nil || o.Bandwidth == nil {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPrice) GetBandwidthOk() (*int32, bool) {
	if o == nil || o.Bandwidth == nil {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *VirtualConnectionPrice) HasBandwidth() bool {
	if o != nil && o.Bandwidth != nil {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *VirtualConnectionPrice) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

// GetASide returns the ASide field value if set, zero value otherwise.
func (o *VirtualConnectionPrice) GetASide() VirtualConnectionPriceASide {
	if o == nil || o.ASide == nil {
		var ret VirtualConnectionPriceASide
		return ret
	}
	return *o.ASide
}

// GetASideOk returns a tuple with the ASide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPrice) GetASideOk() (*VirtualConnectionPriceASide, bool) {
	if o == nil || o.ASide == nil {
		return nil, false
	}
	return o.ASide, true
}

// HasASide returns a boolean if a field has been set.
func (o *VirtualConnectionPrice) HasASide() bool {
	if o != nil && o.ASide != nil {
		return true
	}

	return false
}

// SetASide gets a reference to the given VirtualConnectionPriceASide and assigns it to the ASide field.
func (o *VirtualConnectionPrice) SetASide(v VirtualConnectionPriceASide) {
	o.ASide = &v
}

// GetZSide returns the ZSide field value if set, zero value otherwise.
func (o *VirtualConnectionPrice) GetZSide() VirtualConnectionPriceZSide {
	if o == nil || o.ZSide == nil {
		var ret VirtualConnectionPriceZSide
		return ret
	}
	return *o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPrice) GetZSideOk() (*VirtualConnectionPriceZSide, bool) {
	if o == nil || o.ZSide == nil {
		return nil, false
	}
	return o.ZSide, true
}

// HasZSide returns a boolean if a field has been set.
func (o *VirtualConnectionPrice) HasZSide() bool {
	if o != nil && o.ZSide != nil {
		return true
	}

	return false
}

// SetZSide gets a reference to the given VirtualConnectionPriceZSide and assigns it to the ZSide field.
func (o *VirtualConnectionPrice) SetZSide(v VirtualConnectionPriceZSide) {
	o.ZSide = &v
}

func (o VirtualConnectionPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Bandwidth != nil {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if o.ASide != nil {
		toSerialize["aSide"] = o.ASide
	}
	if o.ZSide != nil {
		toSerialize["zSide"] = o.ZSide
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualConnectionPrice struct {
	value *VirtualConnectionPrice
	isSet bool
}

func (v NullableVirtualConnectionPrice) Get() *VirtualConnectionPrice {
	return v.value
}

func (v *NullableVirtualConnectionPrice) Set(val *VirtualConnectionPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualConnectionPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualConnectionPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualConnectionPrice(val *VirtualConnectionPrice) *NullableVirtualConnectionPrice {
	return &NullableVirtualConnectionPrice{value: val, isSet: true}
}

func (v NullableVirtualConnectionPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualConnectionPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



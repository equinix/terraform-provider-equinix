/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// LinkProtocol Connection link protocol Configuration
type LinkProtocol struct {
	Type LinkProtocolType `json:"type"`
}

// NewLinkProtocol instantiates a new LinkProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkProtocol(type_ LinkProtocolType) *LinkProtocol {
	this := LinkProtocol{}
	this.Type = type_
	return &this
}

// NewLinkProtocolWithDefaults instantiates a new LinkProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkProtocolWithDefaults() *LinkProtocol {
	this := LinkProtocol{}
	return &this
}

// GetType returns the Type field value
func (o *LinkProtocol) GetType() LinkProtocolType {
	if o == nil {
		var ret LinkProtocolType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LinkProtocol) GetTypeOk() (*LinkProtocolType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LinkProtocol) SetType(v LinkProtocolType) {
	o.Type = v
}

func (o LinkProtocol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableLinkProtocol struct {
	value *LinkProtocol
	isSet bool
}

func (v NullableLinkProtocol) Get() *LinkProtocol {
	return v.value
}

func (v *NullableLinkProtocol) Set(val *LinkProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocol(val *LinkProtocol) *NullableLinkProtocol {
	return &NullableLinkProtocol{value: val, isSet: true}
}

func (v NullableLinkProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



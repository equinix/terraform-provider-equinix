/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// Order struct for Order
type Order struct {
	// Purchase order number
	PurchaseOrderNumber *string `json:"purchaseOrderNumber,omitempty"`
	// Billing tier for connection bandwidth
	BillingTier *string `json:"billingTier,omitempty"`
	// Order Identification
	OrderId *string `json:"orderId,omitempty"`
	// Order Reference Number
	OrderNumber *string `json:"orderNumber,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	return &this
}

// GetPurchaseOrderNumber returns the PurchaseOrderNumber field value if set, zero value otherwise.
func (o *Order) GetPurchaseOrderNumber() string {
	if o == nil || o.PurchaseOrderNumber == nil {
		var ret string
		return ret
	}
	return *o.PurchaseOrderNumber
}

// GetPurchaseOrderNumberOk returns a tuple with the PurchaseOrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetPurchaseOrderNumberOk() (*string, bool) {
	if o == nil || o.PurchaseOrderNumber == nil {
		return nil, false
	}
	return o.PurchaseOrderNumber, true
}

// HasPurchaseOrderNumber returns a boolean if a field has been set.
func (o *Order) HasPurchaseOrderNumber() bool {
	if o != nil && o.PurchaseOrderNumber != nil {
		return true
	}

	return false
}

// SetPurchaseOrderNumber gets a reference to the given string and assigns it to the PurchaseOrderNumber field.
func (o *Order) SetPurchaseOrderNumber(v string) {
	o.PurchaseOrderNumber = &v
}

// GetBillingTier returns the BillingTier field value if set, zero value otherwise.
func (o *Order) GetBillingTier() string {
	if o == nil || o.BillingTier == nil {
		var ret string
		return ret
	}
	return *o.BillingTier
}

// GetBillingTierOk returns a tuple with the BillingTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBillingTierOk() (*string, bool) {
	if o == nil || o.BillingTier == nil {
		return nil, false
	}
	return o.BillingTier, true
}

// HasBillingTier returns a boolean if a field has been set.
func (o *Order) HasBillingTier() bool {
	if o != nil && o.BillingTier != nil {
		return true
	}

	return false
}

// SetBillingTier gets a reference to the given string and assigns it to the BillingTier field.
func (o *Order) SetBillingTier(v string) {
	o.BillingTier = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *Order) GetOrderId() string {
	if o == nil || o.OrderId == nil {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderIdOk() (*string, bool) {
	if o == nil || o.OrderId == nil {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *Order) HasOrderId() bool {
	if o != nil && o.OrderId != nil {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *Order) SetOrderId(v string) {
	o.OrderId = &v
}

// GetOrderNumber returns the OrderNumber field value if set, zero value otherwise.
func (o *Order) GetOrderNumber() string {
	if o == nil || o.OrderNumber == nil {
		var ret string
		return ret
	}
	return *o.OrderNumber
}

// GetOrderNumberOk returns a tuple with the OrderNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderNumberOk() (*string, bool) {
	if o == nil || o.OrderNumber == nil {
		return nil, false
	}
	return o.OrderNumber, true
}

// HasOrderNumber returns a boolean if a field has been set.
func (o *Order) HasOrderNumber() bool {
	if o != nil && o.OrderNumber != nil {
		return true
	}

	return false
}

// SetOrderNumber gets a reference to the given string and assigns it to the OrderNumber field.
func (o *Order) SetOrderNumber(v string) {
	o.OrderNumber = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PurchaseOrderNumber != nil {
		toSerialize["purchaseOrderNumber"] = o.PurchaseOrderNumber
	}
	if o.BillingTier != nil {
		toSerialize["billingTier"] = o.BillingTier
	}
	if o.OrderId != nil {
		toSerialize["orderId"] = o.OrderId
	}
	if o.OrderNumber != nil {
		toSerialize["orderNumber"] = o.OrderNumber
	}
	return json.Marshal(toSerialize)
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"time"
)

// Change Current state of latest connection change
type Change struct {
	// Uniquely identifies a change
	Uuid *string `json:"uuid,omitempty"`
	// Type of change
	Type map[string]interface{} `json:"type"`
	// Current outcome of the change flow
	Status map[string]interface{} `json:"status,omitempty"`
	// Set when change flow starts
	CreatedDateTime time.Time `json:"createdDateTime"`
	// Set when change object is updated
	UpdatedDateTime *time.Time `json:"updatedDateTime,omitempty"`
	// Additional information
	Information *string `json:"information,omitempty"`
	Data *ConnectionChangeOperation `json:"data,omitempty"`
}

// NewChange instantiates a new Change object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChange(type_ map[string]interface{}, createdDateTime time.Time) *Change {
	this := Change{}
	this.Type = type_
	this.CreatedDateTime = createdDateTime
	return &this
}

// NewChangeWithDefaults instantiates a new Change object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeWithDefaults() *Change {
	this := Change{}
	return &this
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Change) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Change) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Change) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Change) SetUuid(v string) {
	o.Uuid = &v
}

// GetType returns the Type field value
func (o *Change) GetType() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Change) GetTypeOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type, true
}

// SetType sets field value
func (o *Change) SetType(v map[string]interface{}) {
	o.Type = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Change) GetStatus() map[string]interface{} {
	if o == nil || o.Status == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Change) GetStatusOk() (map[string]interface{}, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Change) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given map[string]interface{} and assigns it to the Status field.
func (o *Change) SetStatus(v map[string]interface{}) {
	o.Status = v
}

// GetCreatedDateTime returns the CreatedDateTime field value
func (o *Change) GetCreatedDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value
// and a boolean to check if the value has been set.
func (o *Change) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedDateTime, true
}

// SetCreatedDateTime sets field value
func (o *Change) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = v
}

// GetUpdatedDateTime returns the UpdatedDateTime field value if set, zero value otherwise.
func (o *Change) GetUpdatedDateTime() time.Time {
	if o == nil || o.UpdatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Change) GetUpdatedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.UpdatedDateTime == nil {
		return nil, false
	}
	return o.UpdatedDateTime, true
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *Change) HasUpdatedDateTime() bool {
	if o != nil && o.UpdatedDateTime != nil {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given time.Time and assigns it to the UpdatedDateTime field.
func (o *Change) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime = &v
}

// GetInformation returns the Information field value if set, zero value otherwise.
func (o *Change) GetInformation() string {
	if o == nil || o.Information == nil {
		var ret string
		return ret
	}
	return *o.Information
}

// GetInformationOk returns a tuple with the Information field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Change) GetInformationOk() (*string, bool) {
	if o == nil || o.Information == nil {
		return nil, false
	}
	return o.Information, true
}

// HasInformation returns a boolean if a field has been set.
func (o *Change) HasInformation() bool {
	if o != nil && o.Information != nil {
		return true
	}

	return false
}

// SetInformation gets a reference to the given string and assigns it to the Information field.
func (o *Change) SetInformation(v string) {
	o.Information = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Change) GetData() ConnectionChangeOperation {
	if o == nil || o.Data == nil {
		var ret ConnectionChangeOperation
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Change) GetDataOk() (*ConnectionChangeOperation, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Change) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given ConnectionChangeOperation and assigns it to the Data field.
func (o *Change) SetData(v ConnectionChangeOperation) {
	o.Data = &v
}

func (o Change) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.UpdatedDateTime != nil {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime
	}
	if o.Information != nil {
		toSerialize["information"] = o.Information
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableChange struct {
	value *Change
	isSet bool
}

func (v NullableChange) Get() *Change {
	return v.value
}

func (v *NullableChange) Set(val *Change) {
	v.value = val
	v.isSet = true
}

func (v NullableChange) IsSet() bool {
	return v.isSet
}

func (v *NullableChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChange(val *Change) *NullableChange {
	return &NullableChange{value: val, isSet: true}
}

func (v NullableChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



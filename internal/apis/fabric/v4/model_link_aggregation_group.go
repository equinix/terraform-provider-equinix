/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// LinkAggregationGroup Link aggregation group (LAG) preferences and settings.
type LinkAggregationGroup struct {
	// Parameter showing whether LAG configuration is mandatory. The default is false.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewLinkAggregationGroup instantiates a new LinkAggregationGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkAggregationGroup() *LinkAggregationGroup {
	this := LinkAggregationGroup{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewLinkAggregationGroupWithDefaults instantiates a new LinkAggregationGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkAggregationGroupWithDefaults() *LinkAggregationGroup {
	this := LinkAggregationGroup{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *LinkAggregationGroup) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkAggregationGroup) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *LinkAggregationGroup) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *LinkAggregationGroup) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o LinkAggregationGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableLinkAggregationGroup struct {
	value *LinkAggregationGroup
	isSet bool
}

func (v NullableLinkAggregationGroup) Get() *LinkAggregationGroup {
	return v.value
}

func (v *NullableLinkAggregationGroup) Set(val *LinkAggregationGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkAggregationGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkAggregationGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkAggregationGroup(val *LinkAggregationGroup) *NullableLinkAggregationGroup {
	return &NullableLinkAggregationGroup{value: val, isSet: true}
}

func (v NullableLinkAggregationGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkAggregationGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



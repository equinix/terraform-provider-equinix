/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// LinkProtocolQinq Connection link protocol configuration - QINQ
type LinkProtocolQinq struct {
	// Inner tag protocol identifier
	InnerTagProtocolId int32 `json:"innerTagProtocolId"`
	// Outer tag protocol identifier
	OuterTagProtocolId int32 `json:"outerTagProtocolId"`
	// Inner tag, i.e., C-VLAN tag
	VlanCTag int32 `json:"vlanCTag"`
	// Outer tag, i.e., S-VLAN tag
	VlanSTag int32 `json:"vlanSTag"`
	// Subinterface identifier
	SubInterface *int32 `json:"subInterface,omitempty"`
}

// NewLinkProtocolQinq instantiates a new LinkProtocolQinq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkProtocolQinq(innerTagProtocolId int32, outerTagProtocolId int32, vlanCTag int32, vlanSTag int32, type_ LinkProtocolType) *LinkProtocolQinq {
	this := LinkProtocolQinq{}
	this.Type = type_
	return &this
}

// NewLinkProtocolQinqWithDefaults instantiates a new LinkProtocolQinq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkProtocolQinqWithDefaults() *LinkProtocolQinq {
	this := LinkProtocolQinq{}
	return &this
}

// GetInnerTagProtocolId returns the InnerTagProtocolId field value
func (o *LinkProtocolQinq) GetInnerTagProtocolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InnerTagProtocolId
}

// GetInnerTagProtocolIdOk returns a tuple with the InnerTagProtocolId field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetInnerTagProtocolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InnerTagProtocolId, true
}

// SetInnerTagProtocolId sets field value
func (o *LinkProtocolQinq) SetInnerTagProtocolId(v int32) {
	o.InnerTagProtocolId = v
}

// GetOuterTagProtocolId returns the OuterTagProtocolId field value
func (o *LinkProtocolQinq) GetOuterTagProtocolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OuterTagProtocolId
}

// GetOuterTagProtocolIdOk returns a tuple with the OuterTagProtocolId field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetOuterTagProtocolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OuterTagProtocolId, true
}

// SetOuterTagProtocolId sets field value
func (o *LinkProtocolQinq) SetOuterTagProtocolId(v int32) {
	o.OuterTagProtocolId = v
}

// GetVlanCTag returns the VlanCTag field value
func (o *LinkProtocolQinq) GetVlanCTag() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VlanCTag
}

// GetVlanCTagOk returns a tuple with the VlanCTag field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetVlanCTagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanCTag, true
}

// SetVlanCTag sets field value
func (o *LinkProtocolQinq) SetVlanCTag(v int32) {
	o.VlanCTag = v
}

// GetVlanSTag returns the VlanSTag field value
func (o *LinkProtocolQinq) GetVlanSTag() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VlanSTag
}

// GetVlanSTagOk returns a tuple with the VlanSTag field value
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetVlanSTagOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VlanSTag, true
}

// SetVlanSTag sets field value
func (o *LinkProtocolQinq) SetVlanSTag(v int32) {
	o.VlanSTag = v
}

// GetSubInterface returns the SubInterface field value if set, zero value otherwise.
func (o *LinkProtocolQinq) GetSubInterface() int32 {
	if o == nil || o.SubInterface == nil {
		var ret int32
		return ret
	}
	return *o.SubInterface
}

// GetSubInterfaceOk returns a tuple with the SubInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolQinq) GetSubInterfaceOk() (*int32, bool) {
	if o == nil || o.SubInterface == nil {
		return nil, false
	}
	return o.SubInterface, true
}

// HasSubInterface returns a boolean if a field has been set.
func (o *LinkProtocolQinq) HasSubInterface() bool {
	if o != nil && o.SubInterface != nil {
		return true
	}

	return false
}

// SetSubInterface gets a reference to the given int32 and assigns it to the SubInterface field.
func (o *LinkProtocolQinq) SetSubInterface(v int32) {
	o.SubInterface = &v
}

func (o LinkProtocolQinq) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["innerTagProtocolId"] = o.InnerTagProtocolId
	}
	if true {
		toSerialize["outerTagProtocolId"] = o.OuterTagProtocolId
	}
	if true {
		toSerialize["vlanCTag"] = o.VlanCTag
	}
	if true {
		toSerialize["vlanSTag"] = o.VlanSTag
	}
	if o.SubInterface != nil {
		toSerialize["subInterface"] = o.SubInterface
	}
	return json.Marshal(toSerialize)
}

type NullableLinkProtocolQinq struct {
	value *LinkProtocolQinq
	isSet bool
}

func (v NullableLinkProtocolQinq) Get() *LinkProtocolQinq {
	return v.value
}

func (v *NullableLinkProtocolQinq) Set(val *LinkProtocolQinq) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocolQinq) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocolQinq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocolQinq(val *LinkProtocolQinq) *NullableLinkProtocolQinq {
	return &NullableLinkProtocolQinq{value: val, isSet: true}
}

func (v NullableLinkProtocolQinq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocolQinq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// RoutingProtocolDirectData struct for RoutingProtocolDirectData
type RoutingProtocolDirectData struct {
	// Routing protocol type
	Type *string `json:"type,omitempty"`
	Name *string `json:"name,omitempty"`
	DirectIpv4 *DirectConnectionIpv4 `json:"directIpv4,omitempty"`
	DirectIpv6 *DirectConnectionIpv6 `json:"directIpv6,omitempty"`
	// Routing Protocol URI
	Href *string `json:"href,omitempty"`
	// Routing protocol identifier
	Uuid *string `json:"uuid,omitempty"`
	State *string `json:"state,omitempty"`
	Operation *RoutingProtocolOperation `json:"operation,omitempty"`
	Changelog *Changelog `json:"changelog,omitempty"`
}

// NewRoutingProtocolDirectData instantiates a new RoutingProtocolDirectData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolDirectData() *RoutingProtocolDirectData {
	this := RoutingProtocolDirectData{}
	return &this
}

// NewRoutingProtocolDirectDataWithDefaults instantiates a new RoutingProtocolDirectData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolDirectDataWithDefaults() *RoutingProtocolDirectData {
	this := RoutingProtocolDirectData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RoutingProtocolDirectData) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoutingProtocolDirectData) SetName(v string) {
	o.Name = &v
}

// GetDirectIpv4 returns the DirectIpv4 field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetDirectIpv4() DirectConnectionIpv4 {
	if o == nil || o.DirectIpv4 == nil {
		var ret DirectConnectionIpv4
		return ret
	}
	return *o.DirectIpv4
}

// GetDirectIpv4Ok returns a tuple with the DirectIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetDirectIpv4Ok() (*DirectConnectionIpv4, bool) {
	if o == nil || o.DirectIpv4 == nil {
		return nil, false
	}
	return o.DirectIpv4, true
}

// HasDirectIpv4 returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasDirectIpv4() bool {
	if o != nil && o.DirectIpv4 != nil {
		return true
	}

	return false
}

// SetDirectIpv4 gets a reference to the given DirectConnectionIpv4 and assigns it to the DirectIpv4 field.
func (o *RoutingProtocolDirectData) SetDirectIpv4(v DirectConnectionIpv4) {
	o.DirectIpv4 = &v
}

// GetDirectIpv6 returns the DirectIpv6 field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetDirectIpv6() DirectConnectionIpv6 {
	if o == nil || o.DirectIpv6 == nil {
		var ret DirectConnectionIpv6
		return ret
	}
	return *o.DirectIpv6
}

// GetDirectIpv6Ok returns a tuple with the DirectIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetDirectIpv6Ok() (*DirectConnectionIpv6, bool) {
	if o == nil || o.DirectIpv6 == nil {
		return nil, false
	}
	return o.DirectIpv6, true
}

// HasDirectIpv6 returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasDirectIpv6() bool {
	if o != nil && o.DirectIpv6 != nil {
		return true
	}

	return false
}

// SetDirectIpv6 gets a reference to the given DirectConnectionIpv6 and assigns it to the DirectIpv6 field.
func (o *RoutingProtocolDirectData) SetDirectIpv6(v DirectConnectionIpv6) {
	o.DirectIpv6 = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *RoutingProtocolDirectData) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *RoutingProtocolDirectData) SetUuid(v string) {
	o.Uuid = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RoutingProtocolDirectData) SetState(v string) {
	o.State = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetOperation() RoutingProtocolOperation {
	if o == nil || o.Operation == nil {
		var ret RoutingProtocolOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetOperationOk() (*RoutingProtocolOperation, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given RoutingProtocolOperation and assigns it to the Operation field.
func (o *RoutingProtocolDirectData) SetOperation(v RoutingProtocolOperation) {
	o.Operation = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *RoutingProtocolDirectData) GetChangelog() Changelog {
	if o == nil || o.Changelog == nil {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolDirectData) GetChangelogOk() (*Changelog, bool) {
	if o == nil || o.Changelog == nil {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *RoutingProtocolDirectData) HasChangelog() bool {
	if o != nil && o.Changelog != nil {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *RoutingProtocolDirectData) SetChangelog(v Changelog) {
	o.Changelog = &v
}

func (o RoutingProtocolDirectData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DirectIpv4 != nil {
		toSerialize["directIpv4"] = o.DirectIpv4
	}
	if o.DirectIpv6 != nil {
		toSerialize["directIpv6"] = o.DirectIpv6
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Operation != nil {
		toSerialize["operation"] = o.Operation
	}
	if o.Changelog != nil {
		toSerialize["changelog"] = o.Changelog
	}
	return json.Marshal(toSerialize)
}

type NullableRoutingProtocolDirectData struct {
	value *RoutingProtocolDirectData
	isSet bool
}

func (v NullableRoutingProtocolDirectData) Get() *RoutingProtocolDirectData {
	return v.value
}

func (v *NullableRoutingProtocolDirectData) Set(val *RoutingProtocolDirectData) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolDirectData) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolDirectData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolDirectData(val *RoutingProtocolDirectData) *NullableRoutingProtocolDirectData {
	return &NullableRoutingProtocolDirectData{value: val, isSet: true}
}

func (v NullableRoutingProtocolDirectData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolDirectData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



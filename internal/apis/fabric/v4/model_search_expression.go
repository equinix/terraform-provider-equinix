/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// SearchExpression struct for SearchExpression
type SearchExpression struct {
	And []SearchExpression `json:"and,omitempty"`
	Or []SearchExpression `json:"or,omitempty"`
	Property *string `json:"property,omitempty"`
	Operator *string `json:"operator,omitempty"`
	Values []string `json:"values,omitempty"`
}

// NewSearchExpression instantiates a new SearchExpression object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchExpression() *SearchExpression {
	this := SearchExpression{}
	return &this
}

// NewSearchExpressionWithDefaults instantiates a new SearchExpression object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchExpressionWithDefaults() *SearchExpression {
	this := SearchExpression{}
	return &this
}

// GetAnd returns the And field value if set, zero value otherwise.
func (o *SearchExpression) GetAnd() []SearchExpression {
	if o == nil || o.And == nil {
		var ret []SearchExpression
		return ret
	}
	return o.And
}

// GetAndOk returns a tuple with the And field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchExpression) GetAndOk() ([]SearchExpression, bool) {
	if o == nil || o.And == nil {
		return nil, false
	}
	return o.And, true
}

// HasAnd returns a boolean if a field has been set.
func (o *SearchExpression) HasAnd() bool {
	if o != nil && o.And != nil {
		return true
	}

	return false
}

// SetAnd gets a reference to the given []SearchExpression and assigns it to the And field.
func (o *SearchExpression) SetAnd(v []SearchExpression) {
	o.And = v
}

// GetOr returns the Or field value if set, zero value otherwise.
func (o *SearchExpression) GetOr() []SearchExpression {
	if o == nil || o.Or == nil {
		var ret []SearchExpression
		return ret
	}
	return o.Or
}

// GetOrOk returns a tuple with the Or field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchExpression) GetOrOk() ([]SearchExpression, bool) {
	if o == nil || o.Or == nil {
		return nil, false
	}
	return o.Or, true
}

// HasOr returns a boolean if a field has been set.
func (o *SearchExpression) HasOr() bool {
	if o != nil && o.Or != nil {
		return true
	}

	return false
}

// SetOr gets a reference to the given []SearchExpression and assigns it to the Or field.
func (o *SearchExpression) SetOr(v []SearchExpression) {
	o.Or = v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *SearchExpression) GetProperty() string {
	if o == nil || o.Property == nil {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchExpression) GetPropertyOk() (*string, bool) {
	if o == nil || o.Property == nil {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *SearchExpression) HasProperty() bool {
	if o != nil && o.Property != nil {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *SearchExpression) SetProperty(v string) {
	o.Property = &v
}

// GetOperator returns the Operator field value if set, zero value otherwise.
func (o *SearchExpression) GetOperator() string {
	if o == nil || o.Operator == nil {
		var ret string
		return ret
	}
	return *o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchExpression) GetOperatorOk() (*string, bool) {
	if o == nil || o.Operator == nil {
		return nil, false
	}
	return o.Operator, true
}

// HasOperator returns a boolean if a field has been set.
func (o *SearchExpression) HasOperator() bool {
	if o != nil && o.Operator != nil {
		return true
	}

	return false
}

// SetOperator gets a reference to the given string and assigns it to the Operator field.
func (o *SearchExpression) SetOperator(v string) {
	o.Operator = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *SearchExpression) GetValues() []string {
	if o == nil || o.Values == nil {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchExpression) GetValuesOk() ([]string, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *SearchExpression) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *SearchExpression) SetValues(v []string) {
	o.Values = v
}

func (o SearchExpression) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.And != nil {
		toSerialize["and"] = o.And
	}
	if o.Or != nil {
		toSerialize["or"] = o.Or
	}
	if o.Property != nil {
		toSerialize["property"] = o.Property
	}
	if o.Operator != nil {
		toSerialize["operator"] = o.Operator
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	return json.Marshal(toSerialize)
}

type NullableSearchExpression struct {
	value *SearchExpression
	isSet bool
}

func (v NullableSearchExpression) Get() *SearchExpression {
	return v.value
}

func (v *NullableSearchExpression) Set(val *SearchExpression) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchExpression) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchExpression) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchExpression(val *SearchExpression) *NullableSearchExpression {
	return &NullableSearchExpression{value: val, isSet: true}
}

func (v NullableSearchExpression) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchExpression) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



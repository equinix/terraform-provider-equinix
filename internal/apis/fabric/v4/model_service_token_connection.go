/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ServiceTokenConnection Service Token Connection Type Information
type ServiceTokenConnection struct {
	// Type of Connection
	Type string `json:"type"`
	// Authorization to connect remotely
	AllowRemoteConnection *bool `json:"allowRemoteConnection,omitempty"`
	// Connection bandwidth limit in Mbps
	BandwidthLimit *int32 `json:"bandwidthLimit,omitempty"`
	// List of permitted bandwidths.
	SupportedBandwidths []int32 `json:"supportedBandwidths,omitempty"`
	ASide ServiceTokenSide `json:"aSide"`
	ZSide ServiceTokenSide `json:"zSide"`
}

// NewServiceTokenConnection instantiates a new ServiceTokenConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTokenConnection(type_ string, aSide ServiceTokenSide, zSide ServiceTokenSide) *ServiceTokenConnection {
	this := ServiceTokenConnection{}
	this.Type = type_
	var allowRemoteConnection bool = false
	this.AllowRemoteConnection = &allowRemoteConnection
	this.ASide = aSide
	this.ZSide = zSide
	return &this
}

// NewServiceTokenConnectionWithDefaults instantiates a new ServiceTokenConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTokenConnectionWithDefaults() *ServiceTokenConnection {
	this := ServiceTokenConnection{}
	var allowRemoteConnection bool = false
	this.AllowRemoteConnection = &allowRemoteConnection
	return &this
}

// GetType returns the Type field value
func (o *ServiceTokenConnection) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServiceTokenConnection) SetType(v string) {
	o.Type = v
}

// GetAllowRemoteConnection returns the AllowRemoteConnection field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetAllowRemoteConnection() bool {
	if o == nil || o.AllowRemoteConnection == nil {
		var ret bool
		return ret
	}
	return *o.AllowRemoteConnection
}

// GetAllowRemoteConnectionOk returns a tuple with the AllowRemoteConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetAllowRemoteConnectionOk() (*bool, bool) {
	if o == nil || o.AllowRemoteConnection == nil {
		return nil, false
	}
	return o.AllowRemoteConnection, true
}

// HasAllowRemoteConnection returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasAllowRemoteConnection() bool {
	if o != nil && o.AllowRemoteConnection != nil {
		return true
	}

	return false
}

// SetAllowRemoteConnection gets a reference to the given bool and assigns it to the AllowRemoteConnection field.
func (o *ServiceTokenConnection) SetAllowRemoteConnection(v bool) {
	o.AllowRemoteConnection = &v
}

// GetBandwidthLimit returns the BandwidthLimit field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetBandwidthLimit() int32 {
	if o == nil || o.BandwidthLimit == nil {
		var ret int32
		return ret
	}
	return *o.BandwidthLimit
}

// GetBandwidthLimitOk returns a tuple with the BandwidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetBandwidthLimitOk() (*int32, bool) {
	if o == nil || o.BandwidthLimit == nil {
		return nil, false
	}
	return o.BandwidthLimit, true
}

// HasBandwidthLimit returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasBandwidthLimit() bool {
	if o != nil && o.BandwidthLimit != nil {
		return true
	}

	return false
}

// SetBandwidthLimit gets a reference to the given int32 and assigns it to the BandwidthLimit field.
func (o *ServiceTokenConnection) SetBandwidthLimit(v int32) {
	o.BandwidthLimit = &v
}

// GetSupportedBandwidths returns the SupportedBandwidths field value if set, zero value otherwise.
func (o *ServiceTokenConnection) GetSupportedBandwidths() []int32 {
	if o == nil || o.SupportedBandwidths == nil {
		var ret []int32
		return ret
	}
	return o.SupportedBandwidths
}

// GetSupportedBandwidthsOk returns a tuple with the SupportedBandwidths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetSupportedBandwidthsOk() ([]int32, bool) {
	if o == nil || o.SupportedBandwidths == nil {
		return nil, false
	}
	return o.SupportedBandwidths, true
}

// HasSupportedBandwidths returns a boolean if a field has been set.
func (o *ServiceTokenConnection) HasSupportedBandwidths() bool {
	if o != nil && o.SupportedBandwidths != nil {
		return true
	}

	return false
}

// SetSupportedBandwidths gets a reference to the given []int32 and assigns it to the SupportedBandwidths field.
func (o *ServiceTokenConnection) SetSupportedBandwidths(v []int32) {
	o.SupportedBandwidths = v
}

// GetASide returns the ASide field value
func (o *ServiceTokenConnection) GetASide() ServiceTokenSide {
	if o == nil {
		var ret ServiceTokenSide
		return ret
	}

	return o.ASide
}

// GetASideOk returns a tuple with the ASide field value
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetASideOk() (*ServiceTokenSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ASide, true
}

// SetASide sets field value
func (o *ServiceTokenConnection) SetASide(v ServiceTokenSide) {
	o.ASide = v
}

// GetZSide returns the ZSide field value
func (o *ServiceTokenConnection) GetZSide() ServiceTokenSide {
	if o == nil {
		var ret ServiceTokenSide
		return ret
	}

	return o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value
// and a boolean to check if the value has been set.
func (o *ServiceTokenConnection) GetZSideOk() (*ServiceTokenSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ZSide, true
}

// SetZSide sets field value
func (o *ServiceTokenConnection) SetZSide(v ServiceTokenSide) {
	o.ZSide = v
}

func (o ServiceTokenConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.AllowRemoteConnection != nil {
		toSerialize["allowRemoteConnection"] = o.AllowRemoteConnection
	}
	if o.BandwidthLimit != nil {
		toSerialize["bandwidthLimit"] = o.BandwidthLimit
	}
	if o.SupportedBandwidths != nil {
		toSerialize["supportedBandwidths"] = o.SupportedBandwidths
	}
	if true {
		toSerialize["aSide"] = o.ASide
	}
	if true {
		toSerialize["zSide"] = o.ZSide
	}
	return json.Marshal(toSerialize)
}

type NullableServiceTokenConnection struct {
	value *ServiceTokenConnection
	isSet bool
}

func (v NullableServiceTokenConnection) Get() *ServiceTokenConnection {
	return v.value
}

func (v *NullableServiceTokenConnection) Set(val *ServiceTokenConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTokenConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTokenConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTokenConnection(val *ServiceTokenConnection) *NullableServiceTokenConnection {
	return &NullableServiceTokenConnection{value: val, isSet: true}
}

func (v NullableServiceTokenConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTokenConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



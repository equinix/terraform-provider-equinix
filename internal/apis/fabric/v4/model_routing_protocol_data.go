/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// RoutingProtocolData struct for RoutingProtocolData
type RoutingProtocolData struct {
	RoutingProtocolBGPData *RoutingProtocolBGPData
	RoutingProtocolDirectData *RoutingProtocolDirectData
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *RoutingProtocolData) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into RoutingProtocolBGPData
	err = json.Unmarshal(data, &dst.RoutingProtocolBGPData);
	if err == nil {
		jsonRoutingProtocolBGPData, _ := json.Marshal(dst.RoutingProtocolBGPData)
		if string(jsonRoutingProtocolBGPData) == "{}" { // empty struct
			dst.RoutingProtocolBGPData = nil
		} else {
			return nil // data stored in dst.RoutingProtocolBGPData, return on the first match
		}
	} else {
		dst.RoutingProtocolBGPData = nil
	}

	// try to unmarshal JSON data into RoutingProtocolDirectData
	err = json.Unmarshal(data, &dst.RoutingProtocolDirectData);
	if err == nil {
		jsonRoutingProtocolDirectData, _ := json.Marshal(dst.RoutingProtocolDirectData)
		if string(jsonRoutingProtocolDirectData) == "{}" { // empty struct
			dst.RoutingProtocolDirectData = nil
		} else {
			return nil // data stored in dst.RoutingProtocolDirectData, return on the first match
		}
	} else {
		dst.RoutingProtocolDirectData = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(RoutingProtocolData)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *RoutingProtocolData) MarshalJSON() ([]byte, error) {
	if src.RoutingProtocolBGPData != nil {
		return json.Marshal(&src.RoutingProtocolBGPData)
	}

	if src.RoutingProtocolDirectData != nil {
		return json.Marshal(&src.RoutingProtocolDirectData)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableRoutingProtocolData struct {
	value *RoutingProtocolData
	isSet bool
}

func (v NullableRoutingProtocolData) Get() *RoutingProtocolData {
	return v.value
}

func (v *NullableRoutingProtocolData) Set(val *RoutingProtocolData) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolData) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolData(val *RoutingProtocolData) *NullableRoutingProtocolData {
	return &NullableRoutingProtocolData{value: val, isSet: true}
}

func (v NullableRoutingProtocolData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



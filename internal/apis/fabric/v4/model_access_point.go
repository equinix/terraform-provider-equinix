/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// AccessPoint Access point object
type AccessPoint struct {
	Type AccessPointType `json:"type"`
	Account *SimplifiedAccount `json:"account,omitempty"`
	Location SimplifiedLocation `json:"location"`
	Port *Port `json:"port,omitempty"`
	Profile *SimplifiedServiceProfile `json:"profile,omitempty"`
	Gateway *VirtualGateway `json:"gateway,omitempty"`
	LinkProtocol *SimplifiedLinkProtocol `json:"linkProtocol,omitempty"`
	VirtualDevice *VirtualDevice `json:"virtualDevice,omitempty"`
	Interface *Interface `json:"interface,omitempty"`
	// Access point seller region
	SellerRegion *string `json:"sellerRegion,omitempty"`
	PeeringType *PeeringType `json:"peeringType,omitempty"`
	// Access point authentication key
	AuthenticationKey *string `json:"authenticationKey,omitempty"`
	// Access point routing protocols configuration
	RoutingProtocols []RoutingProtocol `json:"routingProtocols,omitempty"`
	// Additional information
	AdditionalInfo map[string]interface{} `json:"additionalInfo,omitempty"`
	// Provider assigned Connection Id
	ProviderConnectionId *string `json:"providerConnectionId,omitempty"`
}

// NewAccessPoint instantiates a new AccessPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessPoint(type_ AccessPointType, location SimplifiedLocation) *AccessPoint {
	this := AccessPoint{}
	this.Type = type_
	this.Location = location
	return &this
}

// NewAccessPointWithDefaults instantiates a new AccessPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessPointWithDefaults() *AccessPoint {
	this := AccessPoint{}
	return &this
}

// GetType returns the Type field value
func (o *AccessPoint) GetType() AccessPointType {
	if o == nil {
		var ret AccessPointType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetTypeOk() (*AccessPointType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AccessPoint) SetType(v AccessPointType) {
	o.Type = v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *AccessPoint) GetAccount() SimplifiedAccount {
	if o == nil || o.Account == nil {
		var ret SimplifiedAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetAccountOk() (*SimplifiedAccount, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *AccessPoint) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SimplifiedAccount and assigns it to the Account field.
func (o *AccessPoint) SetAccount(v SimplifiedAccount) {
	o.Account = &v
}

// GetLocation returns the Location field value
func (o *AccessPoint) GetLocation() SimplifiedLocation {
	if o == nil {
		var ret SimplifiedLocation
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetLocationOk() (*SimplifiedLocation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *AccessPoint) SetLocation(v SimplifiedLocation) {
	o.Location = v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *AccessPoint) GetPort() Port {
	if o == nil || o.Port == nil {
		var ret Port
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetPortOk() (*Port, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *AccessPoint) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given Port and assigns it to the Port field.
func (o *AccessPoint) SetPort(v Port) {
	o.Port = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *AccessPoint) GetProfile() SimplifiedServiceProfile {
	if o == nil || o.Profile == nil {
		var ret SimplifiedServiceProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetProfileOk() (*SimplifiedServiceProfile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *AccessPoint) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given SimplifiedServiceProfile and assigns it to the Profile field.
func (o *AccessPoint) SetProfile(v SimplifiedServiceProfile) {
	o.Profile = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *AccessPoint) GetGateway() VirtualGateway {
	if o == nil || o.Gateway == nil {
		var ret VirtualGateway
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetGatewayOk() (*VirtualGateway, bool) {
	if o == nil || o.Gateway == nil {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *AccessPoint) HasGateway() bool {
	if o != nil && o.Gateway != nil {
		return true
	}

	return false
}

// SetGateway gets a reference to the given VirtualGateway and assigns it to the Gateway field.
func (o *AccessPoint) SetGateway(v VirtualGateway) {
	o.Gateway = &v
}

// GetLinkProtocol returns the LinkProtocol field value if set, zero value otherwise.
func (o *AccessPoint) GetLinkProtocol() SimplifiedLinkProtocol {
	if o == nil || o.LinkProtocol == nil {
		var ret SimplifiedLinkProtocol
		return ret
	}
	return *o.LinkProtocol
}

// GetLinkProtocolOk returns a tuple with the LinkProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetLinkProtocolOk() (*SimplifiedLinkProtocol, bool) {
	if o == nil || o.LinkProtocol == nil {
		return nil, false
	}
	return o.LinkProtocol, true
}

// HasLinkProtocol returns a boolean if a field has been set.
func (o *AccessPoint) HasLinkProtocol() bool {
	if o != nil && o.LinkProtocol != nil {
		return true
	}

	return false
}

// SetLinkProtocol gets a reference to the given SimplifiedLinkProtocol and assigns it to the LinkProtocol field.
func (o *AccessPoint) SetLinkProtocol(v SimplifiedLinkProtocol) {
	o.LinkProtocol = &v
}

// GetVirtualDevice returns the VirtualDevice field value if set, zero value otherwise.
func (o *AccessPoint) GetVirtualDevice() VirtualDevice {
	if o == nil || o.VirtualDevice == nil {
		var ret VirtualDevice
		return ret
	}
	return *o.VirtualDevice
}

// GetVirtualDeviceOk returns a tuple with the VirtualDevice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetVirtualDeviceOk() (*VirtualDevice, bool) {
	if o == nil || o.VirtualDevice == nil {
		return nil, false
	}
	return o.VirtualDevice, true
}

// HasVirtualDevice returns a boolean if a field has been set.
func (o *AccessPoint) HasVirtualDevice() bool {
	if o != nil && o.VirtualDevice != nil {
		return true
	}

	return false
}

// SetVirtualDevice gets a reference to the given VirtualDevice and assigns it to the VirtualDevice field.
func (o *AccessPoint) SetVirtualDevice(v VirtualDevice) {
	o.VirtualDevice = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *AccessPoint) GetInterface() Interface {
	if o == nil || o.Interface == nil {
		var ret Interface
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetInterfaceOk() (*Interface, bool) {
	if o == nil || o.Interface == nil {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *AccessPoint) HasInterface() bool {
	if o != nil && o.Interface != nil {
		return true
	}

	return false
}

// SetInterface gets a reference to the given Interface and assigns it to the Interface field.
func (o *AccessPoint) SetInterface(v Interface) {
	o.Interface = &v
}

// GetSellerRegion returns the SellerRegion field value if set, zero value otherwise.
func (o *AccessPoint) GetSellerRegion() string {
	if o == nil || o.SellerRegion == nil {
		var ret string
		return ret
	}
	return *o.SellerRegion
}

// GetSellerRegionOk returns a tuple with the SellerRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetSellerRegionOk() (*string, bool) {
	if o == nil || o.SellerRegion == nil {
		return nil, false
	}
	return o.SellerRegion, true
}

// HasSellerRegion returns a boolean if a field has been set.
func (o *AccessPoint) HasSellerRegion() bool {
	if o != nil && o.SellerRegion != nil {
		return true
	}

	return false
}

// SetSellerRegion gets a reference to the given string and assigns it to the SellerRegion field.
func (o *AccessPoint) SetSellerRegion(v string) {
	o.SellerRegion = &v
}

// GetPeeringType returns the PeeringType field value if set, zero value otherwise.
func (o *AccessPoint) GetPeeringType() PeeringType {
	if o == nil || o.PeeringType == nil {
		var ret PeeringType
		return ret
	}
	return *o.PeeringType
}

// GetPeeringTypeOk returns a tuple with the PeeringType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetPeeringTypeOk() (*PeeringType, bool) {
	if o == nil || o.PeeringType == nil {
		return nil, false
	}
	return o.PeeringType, true
}

// HasPeeringType returns a boolean if a field has been set.
func (o *AccessPoint) HasPeeringType() bool {
	if o != nil && o.PeeringType != nil {
		return true
	}

	return false
}

// SetPeeringType gets a reference to the given PeeringType and assigns it to the PeeringType field.
func (o *AccessPoint) SetPeeringType(v PeeringType) {
	o.PeeringType = &v
}

// GetAuthenticationKey returns the AuthenticationKey field value if set, zero value otherwise.
func (o *AccessPoint) GetAuthenticationKey() string {
	if o == nil || o.AuthenticationKey == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationKey
}

// GetAuthenticationKeyOk returns a tuple with the AuthenticationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetAuthenticationKeyOk() (*string, bool) {
	if o == nil || o.AuthenticationKey == nil {
		return nil, false
	}
	return o.AuthenticationKey, true
}

// HasAuthenticationKey returns a boolean if a field has been set.
func (o *AccessPoint) HasAuthenticationKey() bool {
	if o != nil && o.AuthenticationKey != nil {
		return true
	}

	return false
}

// SetAuthenticationKey gets a reference to the given string and assigns it to the AuthenticationKey field.
func (o *AccessPoint) SetAuthenticationKey(v string) {
	o.AuthenticationKey = &v
}

// GetRoutingProtocols returns the RoutingProtocols field value if set, zero value otherwise.
func (o *AccessPoint) GetRoutingProtocols() []RoutingProtocol {
	if o == nil || o.RoutingProtocols == nil {
		var ret []RoutingProtocol
		return ret
	}
	return o.RoutingProtocols
}

// GetRoutingProtocolsOk returns a tuple with the RoutingProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetRoutingProtocolsOk() ([]RoutingProtocol, bool) {
	if o == nil || o.RoutingProtocols == nil {
		return nil, false
	}
	return o.RoutingProtocols, true
}

// HasRoutingProtocols returns a boolean if a field has been set.
func (o *AccessPoint) HasRoutingProtocols() bool {
	if o != nil && o.RoutingProtocols != nil {
		return true
	}

	return false
}

// SetRoutingProtocols gets a reference to the given []RoutingProtocol and assigns it to the RoutingProtocols field.
func (o *AccessPoint) SetRoutingProtocols(v []RoutingProtocol) {
	o.RoutingProtocols = v
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *AccessPoint) GetAdditionalInfo() map[string]interface{} {
	if o == nil || o.AdditionalInfo == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetAdditionalInfoOk() (map[string]interface{}, bool) {
	if o == nil || o.AdditionalInfo == nil {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *AccessPoint) HasAdditionalInfo() bool {
	if o != nil && o.AdditionalInfo != nil {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given map[string]interface{} and assigns it to the AdditionalInfo field.
func (o *AccessPoint) SetAdditionalInfo(v map[string]interface{}) {
	o.AdditionalInfo = v
}

// GetProviderConnectionId returns the ProviderConnectionId field value if set, zero value otherwise.
func (o *AccessPoint) GetProviderConnectionId() string {
	if o == nil || o.ProviderConnectionId == nil {
		var ret string
		return ret
	}
	return *o.ProviderConnectionId
}

// GetProviderConnectionIdOk returns a tuple with the ProviderConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessPoint) GetProviderConnectionIdOk() (*string, bool) {
	if o == nil || o.ProviderConnectionId == nil {
		return nil, false
	}
	return o.ProviderConnectionId, true
}

// HasProviderConnectionId returns a boolean if a field has been set.
func (o *AccessPoint) HasProviderConnectionId() bool {
	if o != nil && o.ProviderConnectionId != nil {
		return true
	}

	return false
}

// SetProviderConnectionId gets a reference to the given string and assigns it to the ProviderConnectionId field.
func (o *AccessPoint) SetProviderConnectionId(v string) {
	o.ProviderConnectionId = &v
}

func (o AccessPoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if true {
		toSerialize["location"] = o.Location
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}
	if o.Gateway != nil {
		toSerialize["gateway"] = o.Gateway
	}
	if o.LinkProtocol != nil {
		toSerialize["linkProtocol"] = o.LinkProtocol
	}
	if o.VirtualDevice != nil {
		toSerialize["virtualDevice"] = o.VirtualDevice
	}
	if o.Interface != nil {
		toSerialize["interface"] = o.Interface
	}
	if o.SellerRegion != nil {
		toSerialize["sellerRegion"] = o.SellerRegion
	}
	if o.PeeringType != nil {
		toSerialize["peeringType"] = o.PeeringType
	}
	if o.AuthenticationKey != nil {
		toSerialize["authenticationKey"] = o.AuthenticationKey
	}
	if o.RoutingProtocols != nil {
		toSerialize["routingProtocols"] = o.RoutingProtocols
	}
	if o.AdditionalInfo != nil {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if o.ProviderConnectionId != nil {
		toSerialize["providerConnectionId"] = o.ProviderConnectionId
	}
	return json.Marshal(toSerialize)
}

type NullableAccessPoint struct {
	value *AccessPoint
	isSet bool
}

func (v NullableAccessPoint) Get() *AccessPoint {
	return v.value
}

func (v *NullableAccessPoint) Set(val *AccessPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPoint(val *AccessPoint) *NullableAccessPoint {
	return &NullableAccessPoint{value: val, isSet: true}
}

func (v NullableAccessPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



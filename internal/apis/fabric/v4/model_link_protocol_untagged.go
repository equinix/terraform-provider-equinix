/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// LinkProtocolUntagged Connection link protocol configuration - UNTAGGED
type LinkProtocolUntagged struct {
	Ipv4 *LinkProtocolIpv4Ipv6Config `json:"ipv4,omitempty"`
	Ipv6 *LinkProtocolIpv4Ipv6Config `json:"ipv6,omitempty"`
}

// NewLinkProtocolUntagged instantiates a new LinkProtocolUntagged object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkProtocolUntagged(type_ LinkProtocolType) *LinkProtocolUntagged {
	this := LinkProtocolUntagged{}
	this.Type = type_
	return &this
}

// NewLinkProtocolUntaggedWithDefaults instantiates a new LinkProtocolUntagged object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkProtocolUntaggedWithDefaults() *LinkProtocolUntagged {
	this := LinkProtocolUntagged{}
	return &this
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *LinkProtocolUntagged) GetIpv4() LinkProtocolIpv4Ipv6Config {
	if o == nil || o.Ipv4 == nil {
		var ret LinkProtocolIpv4Ipv6Config
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolUntagged) GetIpv4Ok() (*LinkProtocolIpv4Ipv6Config, bool) {
	if o == nil || o.Ipv4 == nil {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *LinkProtocolUntagged) HasIpv4() bool {
	if o != nil && o.Ipv4 != nil {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given LinkProtocolIpv4Ipv6Config and assigns it to the Ipv4 field.
func (o *LinkProtocolUntagged) SetIpv4(v LinkProtocolIpv4Ipv6Config) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *LinkProtocolUntagged) GetIpv6() LinkProtocolIpv4Ipv6Config {
	if o == nil || o.Ipv6 == nil {
		var ret LinkProtocolIpv4Ipv6Config
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkProtocolUntagged) GetIpv6Ok() (*LinkProtocolIpv4Ipv6Config, bool) {
	if o == nil || o.Ipv6 == nil {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *LinkProtocolUntagged) HasIpv6() bool {
	if o != nil && o.Ipv6 != nil {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given LinkProtocolIpv4Ipv6Config and assigns it to the Ipv6 field.
func (o *LinkProtocolUntagged) SetIpv6(v LinkProtocolIpv4Ipv6Config) {
	o.Ipv6 = &v
}

func (o LinkProtocolUntagged) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ipv4 != nil {
		toSerialize["ipv4"] = o.Ipv4
	}
	if o.Ipv6 != nil {
		toSerialize["ipv6"] = o.Ipv6
	}
	return json.Marshal(toSerialize)
}

type NullableLinkProtocolUntagged struct {
	value *LinkProtocolUntagged
	isSet bool
}

func (v NullableLinkProtocolUntagged) Get() *LinkProtocolUntagged {
	return v.value
}

func (v *NullableLinkProtocolUntagged) Set(val *LinkProtocolUntagged) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkProtocolUntagged) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkProtocolUntagged) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkProtocolUntagged(val *LinkProtocolUntagged) *NullableLinkProtocolUntagged {
	return &NullableLinkProtocolUntagged{value: val, isSet: true}
}

func (v NullableLinkProtocolUntagged) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkProtocolUntagged) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// CustomField Define Custom Attributes
type CustomField struct {
	Label string `json:"label"`
	Description string `json:"description"`
	Required *bool `json:"required,omitempty"`
	DataType string `json:"dataType"`
	Options []string `json:"options,omitempty"`
	// capture this field as a part of email notification
	CaptureInEmail *bool `json:"captureInEmail,omitempty"`
}

// NewCustomField instantiates a new CustomField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomField(label string, description string, dataType string) *CustomField {
	this := CustomField{}
	this.Label = label
	this.Description = description
	this.DataType = dataType
	return &this
}

// NewCustomFieldWithDefaults instantiates a new CustomField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldWithDefaults() *CustomField {
	this := CustomField{}
	return &this
}

// GetLabel returns the Label field value
func (o *CustomField) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *CustomField) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *CustomField) SetLabel(v string) {
	o.Label = v
}

// GetDescription returns the Description field value
func (o *CustomField) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CustomField) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CustomField) SetDescription(v string) {
	o.Description = v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *CustomField) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *CustomField) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *CustomField) SetRequired(v bool) {
	o.Required = &v
}

// GetDataType returns the DataType field value
func (o *CustomField) GetDataType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *CustomField) GetDataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *CustomField) SetDataType(v string) {
	o.DataType = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *CustomField) GetOptions() []string {
	if o == nil || o.Options == nil {
		var ret []string
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetOptionsOk() ([]string, bool) {
	if o == nil || o.Options == nil {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *CustomField) HasOptions() bool {
	if o != nil && o.Options != nil {
		return true
	}

	return false
}

// SetOptions gets a reference to the given []string and assigns it to the Options field.
func (o *CustomField) SetOptions(v []string) {
	o.Options = v
}

// GetCaptureInEmail returns the CaptureInEmail field value if set, zero value otherwise.
func (o *CustomField) GetCaptureInEmail() bool {
	if o == nil || o.CaptureInEmail == nil {
		var ret bool
		return ret
	}
	return *o.CaptureInEmail
}

// GetCaptureInEmailOk returns a tuple with the CaptureInEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomField) GetCaptureInEmailOk() (*bool, bool) {
	if o == nil || o.CaptureInEmail == nil {
		return nil, false
	}
	return o.CaptureInEmail, true
}

// HasCaptureInEmail returns a boolean if a field has been set.
func (o *CustomField) HasCaptureInEmail() bool {
	if o != nil && o.CaptureInEmail != nil {
		return true
	}

	return false
}

// SetCaptureInEmail gets a reference to the given bool and assigns it to the CaptureInEmail field.
func (o *CustomField) SetCaptureInEmail(v bool) {
	o.CaptureInEmail = &v
}

func (o CustomField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if true {
		toSerialize["dataType"] = o.DataType
	}
	if o.Options != nil {
		toSerialize["options"] = o.Options
	}
	if o.CaptureInEmail != nil {
		toSerialize["captureInEmail"] = o.CaptureInEmail
	}
	return json.Marshal(toSerialize)
}

type NullableCustomField struct {
	value *CustomField
	isSet bool
}

func (v NullableCustomField) Get() *CustomField {
	return v.value
}

func (v *NullableCustomField) Set(val *CustomField) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomField) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomField(val *CustomField) *NullableCustomField {
	return &NullableCustomField{value: val, isSet: true}
}

func (v NullableCustomField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// ProviderStatus Connection provider readiness status
type ProviderStatus string

// List of ProviderStatus
const (
	AVAILABLE ProviderStatus = "AVAILABLE"
	DEPROVISIONED ProviderStatus = "DEPROVISIONED"
	DEPROVISIONING ProviderStatus = "DEPROVISIONING"
	FAILED ProviderStatus = "FAILED"
	NOT_AVAILABLE ProviderStatus = "NOT_AVAILABLE"
	PENDING_APPROVAL ProviderStatus = "PENDING_APPROVAL"
	PROVISIONED ProviderStatus = "PROVISIONED"
	PROVISIONING ProviderStatus = "PROVISIONING"
	REJECTED ProviderStatus = "REJECTED"
	PENDING_BGP ProviderStatus = "PENDING_BGP"
	OUT_OF_BANDWIDTH ProviderStatus = "OUT_OF_BANDWIDTH"
	DELETED ProviderStatus = "DELETED"
	ERROR ProviderStatus = "ERROR"
	ERRORED ProviderStatus = "ERRORED"
	NOTPROVISIONED ProviderStatus = "NOTPROVISIONED"
	NOT_PROVISIONED ProviderStatus = "NOT_PROVISIONED"
	ORDERING ProviderStatus = "ORDERING"
	DELETING ProviderStatus = "DELETING"
	PENDING_DELETE ProviderStatus = "PENDING DELETE"
	N_A ProviderStatus = "N/A"
)

// All allowed values of ProviderStatus enum
var AllowedProviderStatusEnumValues = []ProviderStatus{
	"AVAILABLE",
	"DEPROVISIONED",
	"DEPROVISIONING",
	"FAILED",
	"NOT_AVAILABLE",
	"PENDING_APPROVAL",
	"PROVISIONED",
	"PROVISIONING",
	"REJECTED",
	"PENDING_BGP",
	"OUT_OF_BANDWIDTH",
	"DELETED",
	"ERROR",
	"ERRORED",
	"NOTPROVISIONED",
	"NOT_PROVISIONED",
	"ORDERING",
	"DELETING",
	"PENDING DELETE",
	"N/A",
}

func (v *ProviderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProviderStatus(value)
	for _, existing := range AllowedProviderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProviderStatus", value)
}

// NewProviderStatusFromValue returns a pointer to a valid ProviderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProviderStatusFromValue(v string) (*ProviderStatus, error) {
	ev := ProviderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProviderStatus: valid values are %v", v, AllowedProviderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProviderStatus) IsValid() bool {
	for _, existing := range AllowedProviderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProviderStatus value
func (v ProviderStatus) Ptr() *ProviderStatus {
	return &v
}

type NullableProviderStatus struct {
	value *ProviderStatus
	isSet bool
}

func (v NullableProviderStatus) Get() *ProviderStatus {
	return v.value
}

func (v *NullableProviderStatus) Set(val *ProviderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProviderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProviderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProviderStatus(val *ProviderStatus) *NullableProviderStatus {
	return &NullableProviderStatus{value: val, isSet: true}
}

func (v NullableProviderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProviderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


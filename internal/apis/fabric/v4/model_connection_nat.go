/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionNat Connection Network Address Translation
type ConnectionNat struct {
	// Network Address Translation type
	Type string `json:"type"`
}

// NewConnectionNat instantiates a new ConnectionNat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionNat(type_ string) *ConnectionNat {
	this := ConnectionNat{}
	this.Type = type_
	return &this
}

// NewConnectionNatWithDefaults instantiates a new ConnectionNat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionNatWithDefaults() *ConnectionNat {
	this := ConnectionNat{}
	return &this
}

// GetType returns the Type field value
func (o *ConnectionNat) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectionNat) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectionNat) SetType(v string) {
	o.Type = v
}

func (o ConnectionNat) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionNat struct {
	value *ConnectionNat
	isSet bool
}

func (v NullableConnectionNat) Get() *ConnectionNat {
	return v.value
}

func (v *NullableConnectionNat) Set(val *ConnectionNat) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionNat) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionNat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionNat(val *ConnectionNat) *NullableConnectionNat {
	return &NullableConnectionNat{value: val, isSet: true}
}

func (v NullableConnectionNat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionNat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"time"
)

// Changelog Change log
type Changelog struct {
	// Created by User Key
	CreatedBy *string `json:"createdBy,omitempty"`
	// Created by User Full Name
	CreatedByFullName *string `json:"createdByFullName,omitempty"`
	// Created by User Email Address
	CreatedByEmail *string `json:"createdByEmail,omitempty"`
	// Created by Date and Time
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// Updated by User Key
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Updated by User Full Name
	UpdatedByFullName *string `json:"updatedByFullName,omitempty"`
	// Updated by User Email Address
	UpdatedByEmail *string `json:"updatedByEmail,omitempty"`
	// Updated by Date and Time
	UpdatedDateTime *time.Time `json:"updatedDateTime,omitempty"`
	// Deleted by User Key
	DeletedBy *string `json:"deletedBy,omitempty"`
	// Deleted by User Full Name
	DeletedByFullName *string `json:"deletedByFullName,omitempty"`
	// Deleted by User Email Address
	DeletedByEmail *string `json:"deletedByEmail,omitempty"`
	// Deleted by Date and Time
	DeletedDateTime *time.Time `json:"deletedDateTime,omitempty"`
}

// NewChangelog instantiates a new Changelog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangelog() *Changelog {
	this := Changelog{}
	return &this
}

// NewChangelogWithDefaults instantiates a new Changelog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangelogWithDefaults() *Changelog {
	this := Changelog{}
	return &this
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Changelog) GetCreatedBy() string {
	if o == nil || o.CreatedBy == nil {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetCreatedByOk() (*string, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Changelog) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *Changelog) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetCreatedByFullName returns the CreatedByFullName field value if set, zero value otherwise.
func (o *Changelog) GetCreatedByFullName() string {
	if o == nil || o.CreatedByFullName == nil {
		var ret string
		return ret
	}
	return *o.CreatedByFullName
}

// GetCreatedByFullNameOk returns a tuple with the CreatedByFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetCreatedByFullNameOk() (*string, bool) {
	if o == nil || o.CreatedByFullName == nil {
		return nil, false
	}
	return o.CreatedByFullName, true
}

// HasCreatedByFullName returns a boolean if a field has been set.
func (o *Changelog) HasCreatedByFullName() bool {
	if o != nil && o.CreatedByFullName != nil {
		return true
	}

	return false
}

// SetCreatedByFullName gets a reference to the given string and assigns it to the CreatedByFullName field.
func (o *Changelog) SetCreatedByFullName(v string) {
	o.CreatedByFullName = &v
}

// GetCreatedByEmail returns the CreatedByEmail field value if set, zero value otherwise.
func (o *Changelog) GetCreatedByEmail() string {
	if o == nil || o.CreatedByEmail == nil {
		var ret string
		return ret
	}
	return *o.CreatedByEmail
}

// GetCreatedByEmailOk returns a tuple with the CreatedByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetCreatedByEmailOk() (*string, bool) {
	if o == nil || o.CreatedByEmail == nil {
		return nil, false
	}
	return o.CreatedByEmail, true
}

// HasCreatedByEmail returns a boolean if a field has been set.
func (o *Changelog) HasCreatedByEmail() bool {
	if o != nil && o.CreatedByEmail != nil {
		return true
	}

	return false
}

// SetCreatedByEmail gets a reference to the given string and assigns it to the CreatedByEmail field.
func (o *Changelog) SetCreatedByEmail(v string) {
	o.CreatedByEmail = &v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *Changelog) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreatedDateTime == nil {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *Changelog) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime != nil {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *Changelog) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Changelog) GetUpdatedBy() string {
	if o == nil || o.UpdatedBy == nil {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetUpdatedByOk() (*string, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Changelog) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *Changelog) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetUpdatedByFullName returns the UpdatedByFullName field value if set, zero value otherwise.
func (o *Changelog) GetUpdatedByFullName() string {
	if o == nil || o.UpdatedByFullName == nil {
		var ret string
		return ret
	}
	return *o.UpdatedByFullName
}

// GetUpdatedByFullNameOk returns a tuple with the UpdatedByFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetUpdatedByFullNameOk() (*string, bool) {
	if o == nil || o.UpdatedByFullName == nil {
		return nil, false
	}
	return o.UpdatedByFullName, true
}

// HasUpdatedByFullName returns a boolean if a field has been set.
func (o *Changelog) HasUpdatedByFullName() bool {
	if o != nil && o.UpdatedByFullName != nil {
		return true
	}

	return false
}

// SetUpdatedByFullName gets a reference to the given string and assigns it to the UpdatedByFullName field.
func (o *Changelog) SetUpdatedByFullName(v string) {
	o.UpdatedByFullName = &v
}

// GetUpdatedByEmail returns the UpdatedByEmail field value if set, zero value otherwise.
func (o *Changelog) GetUpdatedByEmail() string {
	if o == nil || o.UpdatedByEmail == nil {
		var ret string
		return ret
	}
	return *o.UpdatedByEmail
}

// GetUpdatedByEmailOk returns a tuple with the UpdatedByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetUpdatedByEmailOk() (*string, bool) {
	if o == nil || o.UpdatedByEmail == nil {
		return nil, false
	}
	return o.UpdatedByEmail, true
}

// HasUpdatedByEmail returns a boolean if a field has been set.
func (o *Changelog) HasUpdatedByEmail() bool {
	if o != nil && o.UpdatedByEmail != nil {
		return true
	}

	return false
}

// SetUpdatedByEmail gets a reference to the given string and assigns it to the UpdatedByEmail field.
func (o *Changelog) SetUpdatedByEmail(v string) {
	o.UpdatedByEmail = &v
}

// GetUpdatedDateTime returns the UpdatedDateTime field value if set, zero value otherwise.
func (o *Changelog) GetUpdatedDateTime() time.Time {
	if o == nil || o.UpdatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetUpdatedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.UpdatedDateTime == nil {
		return nil, false
	}
	return o.UpdatedDateTime, true
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *Changelog) HasUpdatedDateTime() bool {
	if o != nil && o.UpdatedDateTime != nil {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given time.Time and assigns it to the UpdatedDateTime field.
func (o *Changelog) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime = &v
}

// GetDeletedBy returns the DeletedBy field value if set, zero value otherwise.
func (o *Changelog) GetDeletedBy() string {
	if o == nil || o.DeletedBy == nil {
		var ret string
		return ret
	}
	return *o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetDeletedByOk() (*string, bool) {
	if o == nil || o.DeletedBy == nil {
		return nil, false
	}
	return o.DeletedBy, true
}

// HasDeletedBy returns a boolean if a field has been set.
func (o *Changelog) HasDeletedBy() bool {
	if o != nil && o.DeletedBy != nil {
		return true
	}

	return false
}

// SetDeletedBy gets a reference to the given string and assigns it to the DeletedBy field.
func (o *Changelog) SetDeletedBy(v string) {
	o.DeletedBy = &v
}

// GetDeletedByFullName returns the DeletedByFullName field value if set, zero value otherwise.
func (o *Changelog) GetDeletedByFullName() string {
	if o == nil || o.DeletedByFullName == nil {
		var ret string
		return ret
	}
	return *o.DeletedByFullName
}

// GetDeletedByFullNameOk returns a tuple with the DeletedByFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetDeletedByFullNameOk() (*string, bool) {
	if o == nil || o.DeletedByFullName == nil {
		return nil, false
	}
	return o.DeletedByFullName, true
}

// HasDeletedByFullName returns a boolean if a field has been set.
func (o *Changelog) HasDeletedByFullName() bool {
	if o != nil && o.DeletedByFullName != nil {
		return true
	}

	return false
}

// SetDeletedByFullName gets a reference to the given string and assigns it to the DeletedByFullName field.
func (o *Changelog) SetDeletedByFullName(v string) {
	o.DeletedByFullName = &v
}

// GetDeletedByEmail returns the DeletedByEmail field value if set, zero value otherwise.
func (o *Changelog) GetDeletedByEmail() string {
	if o == nil || o.DeletedByEmail == nil {
		var ret string
		return ret
	}
	return *o.DeletedByEmail
}

// GetDeletedByEmailOk returns a tuple with the DeletedByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetDeletedByEmailOk() (*string, bool) {
	if o == nil || o.DeletedByEmail == nil {
		return nil, false
	}
	return o.DeletedByEmail, true
}

// HasDeletedByEmail returns a boolean if a field has been set.
func (o *Changelog) HasDeletedByEmail() bool {
	if o != nil && o.DeletedByEmail != nil {
		return true
	}

	return false
}

// SetDeletedByEmail gets a reference to the given string and assigns it to the DeletedByEmail field.
func (o *Changelog) SetDeletedByEmail(v string) {
	o.DeletedByEmail = &v
}

// GetDeletedDateTime returns the DeletedDateTime field value if set, zero value otherwise.
func (o *Changelog) GetDeletedDateTime() time.Time {
	if o == nil || o.DeletedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletedDateTime
}

// GetDeletedDateTimeOk returns a tuple with the DeletedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Changelog) GetDeletedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.DeletedDateTime == nil {
		return nil, false
	}
	return o.DeletedDateTime, true
}

// HasDeletedDateTime returns a boolean if a field has been set.
func (o *Changelog) HasDeletedDateTime() bool {
	if o != nil && o.DeletedDateTime != nil {
		return true
	}

	return false
}

// SetDeletedDateTime gets a reference to the given time.Time and assigns it to the DeletedDateTime field.
func (o *Changelog) SetDeletedDateTime(v time.Time) {
	o.DeletedDateTime = &v
}

func (o Changelog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedByFullName != nil {
		toSerialize["createdByFullName"] = o.CreatedByFullName
	}
	if o.CreatedByEmail != nil {
		toSerialize["createdByEmail"] = o.CreatedByEmail
	}
	if o.CreatedDateTime != nil {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.UpdatedBy != nil {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if o.UpdatedByFullName != nil {
		toSerialize["updatedByFullName"] = o.UpdatedByFullName
	}
	if o.UpdatedByEmail != nil {
		toSerialize["updatedByEmail"] = o.UpdatedByEmail
	}
	if o.UpdatedDateTime != nil {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime
	}
	if o.DeletedBy != nil {
		toSerialize["deletedBy"] = o.DeletedBy
	}
	if o.DeletedByFullName != nil {
		toSerialize["deletedByFullName"] = o.DeletedByFullName
	}
	if o.DeletedByEmail != nil {
		toSerialize["deletedByEmail"] = o.DeletedByEmail
	}
	if o.DeletedDateTime != nil {
		toSerialize["deletedDateTime"] = o.DeletedDateTime
	}
	return json.Marshal(toSerialize)
}

type NullableChangelog struct {
	value *Changelog
	isSet bool
}

func (v NullableChangelog) Get() *Changelog {
	return v.value
}

func (v *NullableChangelog) Set(val *Changelog) {
	v.value = val
	v.isSet = true
}

func (v NullableChangelog) IsSet() bool {
	return v.isSet
}

func (v *NullableChangelog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangelog(val *Changelog) *NullableChangelog {
	return &NullableChangelog{value: val, isSet: true}
}

func (v NullableChangelog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangelog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



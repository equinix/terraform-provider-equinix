/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// VirtualConnectionPriceConnectionType Virtual Connection type
type VirtualConnectionPriceConnectionType string

// List of VirtualConnectionPriceConnectionType
const (
	EVPL_VC VirtualConnectionPriceConnectionType = "EVPL_VC"
	EPL_VC VirtualConnectionPriceConnectionType = "EPL_VC"
	EC_VC VirtualConnectionPriceConnectionType = "EC_VC"
	GW_VC VirtualConnectionPriceConnectionType = "GW_VC"
	VD_CHAIN_VC VirtualConnectionPriceConnectionType = "VD_CHAIN_VC"
	ACCESS_EPL_VC VirtualConnectionPriceConnectionType = "ACCESS_EPL_VC"
)

// All allowed values of VirtualConnectionPriceConnectionType enum
var AllowedVirtualConnectionPriceConnectionTypeEnumValues = []VirtualConnectionPriceConnectionType{
	"EVPL_VC",
	"EPL_VC",
	"EC_VC",
	"GW_VC",
	"VD_CHAIN_VC",
	"ACCESS_EPL_VC",
}

func (v *VirtualConnectionPriceConnectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VirtualConnectionPriceConnectionType(value)
	for _, existing := range AllowedVirtualConnectionPriceConnectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VirtualConnectionPriceConnectionType", value)
}

// NewVirtualConnectionPriceConnectionTypeFromValue returns a pointer to a valid VirtualConnectionPriceConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVirtualConnectionPriceConnectionTypeFromValue(v string) (*VirtualConnectionPriceConnectionType, error) {
	ev := VirtualConnectionPriceConnectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VirtualConnectionPriceConnectionType: valid values are %v", v, AllowedVirtualConnectionPriceConnectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VirtualConnectionPriceConnectionType) IsValid() bool {
	for _, existing := range AllowedVirtualConnectionPriceConnectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VirtualConnectionPriceConnectionType value
func (v VirtualConnectionPriceConnectionType) Ptr() *VirtualConnectionPriceConnectionType {
	return &v
}

type NullableVirtualConnectionPriceConnectionType struct {
	value *VirtualConnectionPriceConnectionType
	isSet bool
}

func (v NullableVirtualConnectionPriceConnectionType) Get() *VirtualConnectionPriceConnectionType {
	return v.value
}

func (v *NullableVirtualConnectionPriceConnectionType) Set(val *VirtualConnectionPriceConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualConnectionPriceConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualConnectionPriceConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualConnectionPriceConnectionType(val *VirtualConnectionPriceConnectionType) *NullableVirtualConnectionPriceConnectionType {
	return &NullableVirtualConnectionPriceConnectionType{value: val, isSet: true}
}

func (v NullableVirtualConnectionPriceConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualConnectionPriceConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


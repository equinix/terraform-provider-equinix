/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"time"
)

// PortOperation Operational specifications for ports.
type PortOperation struct {
	// Availability of a given physical port.
	OperationalStatus *string `json:"operationalStatus,omitempty"`
	// Total number of connections.
	ConnectionCount *int32 `json:"connectionCount,omitempty"`
	// Date and time at which port availability changed.
	OpStatusChangedAt *time.Time `json:"opStatusChangedAt,omitempty"`
}

// NewPortOperation instantiates a new PortOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortOperation() *PortOperation {
	this := PortOperation{}
	return &this
}

// NewPortOperationWithDefaults instantiates a new PortOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortOperationWithDefaults() *PortOperation {
	this := PortOperation{}
	return &this
}

// GetOperationalStatus returns the OperationalStatus field value if set, zero value otherwise.
func (o *PortOperation) GetOperationalStatus() string {
	if o == nil || o.OperationalStatus == nil {
		var ret string
		return ret
	}
	return *o.OperationalStatus
}

// GetOperationalStatusOk returns a tuple with the OperationalStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortOperation) GetOperationalStatusOk() (*string, bool) {
	if o == nil || o.OperationalStatus == nil {
		return nil, false
	}
	return o.OperationalStatus, true
}

// HasOperationalStatus returns a boolean if a field has been set.
func (o *PortOperation) HasOperationalStatus() bool {
	if o != nil && o.OperationalStatus != nil {
		return true
	}

	return false
}

// SetOperationalStatus gets a reference to the given string and assigns it to the OperationalStatus field.
func (o *PortOperation) SetOperationalStatus(v string) {
	o.OperationalStatus = &v
}

// GetConnectionCount returns the ConnectionCount field value if set, zero value otherwise.
func (o *PortOperation) GetConnectionCount() int32 {
	if o == nil || o.ConnectionCount == nil {
		var ret int32
		return ret
	}
	return *o.ConnectionCount
}

// GetConnectionCountOk returns a tuple with the ConnectionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortOperation) GetConnectionCountOk() (*int32, bool) {
	if o == nil || o.ConnectionCount == nil {
		return nil, false
	}
	return o.ConnectionCount, true
}

// HasConnectionCount returns a boolean if a field has been set.
func (o *PortOperation) HasConnectionCount() bool {
	if o != nil && o.ConnectionCount != nil {
		return true
	}

	return false
}

// SetConnectionCount gets a reference to the given int32 and assigns it to the ConnectionCount field.
func (o *PortOperation) SetConnectionCount(v int32) {
	o.ConnectionCount = &v
}

// GetOpStatusChangedAt returns the OpStatusChangedAt field value if set, zero value otherwise.
func (o *PortOperation) GetOpStatusChangedAt() time.Time {
	if o == nil || o.OpStatusChangedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.OpStatusChangedAt
}

// GetOpStatusChangedAtOk returns a tuple with the OpStatusChangedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortOperation) GetOpStatusChangedAtOk() (*time.Time, bool) {
	if o == nil || o.OpStatusChangedAt == nil {
		return nil, false
	}
	return o.OpStatusChangedAt, true
}

// HasOpStatusChangedAt returns a boolean if a field has been set.
func (o *PortOperation) HasOpStatusChangedAt() bool {
	if o != nil && o.OpStatusChangedAt != nil {
		return true
	}

	return false
}

// SetOpStatusChangedAt gets a reference to the given time.Time and assigns it to the OpStatusChangedAt field.
func (o *PortOperation) SetOpStatusChangedAt(v time.Time) {
	o.OpStatusChangedAt = &v
}

func (o PortOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OperationalStatus != nil {
		toSerialize["operationalStatus"] = o.OperationalStatus
	}
	if o.ConnectionCount != nil {
		toSerialize["connectionCount"] = o.ConnectionCount
	}
	if o.OpStatusChangedAt != nil {
		toSerialize["opStatusChangedAt"] = o.OpStatusChangedAt
	}
	return json.Marshal(toSerialize)
}

type NullablePortOperation struct {
	value *PortOperation
	isSet bool
}

func (v NullablePortOperation) Get() *PortOperation {
	return v.value
}

func (v *NullablePortOperation) Set(val *PortOperation) {
	v.value = val
	v.isSet = true
}

func (v NullablePortOperation) IsSet() bool {
	return v.isSet
}

func (v *NullablePortOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortOperation(val *PortOperation) *NullablePortOperation {
	return &NullablePortOperation{value: val, isSet: true}
}

func (v NullablePortOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionSearchResponse List of connections
type ConnectionSearchResponse struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	Sort []SortCriteriaResponse `json:"sort,omitempty"`
	Data []Connection `json:"data,omitempty"`
}

// NewConnectionSearchResponse instantiates a new ConnectionSearchResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionSearchResponse() *ConnectionSearchResponse {
	this := ConnectionSearchResponse{}
	return &this
}

// NewConnectionSearchResponseWithDefaults instantiates a new ConnectionSearchResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionSearchResponseWithDefaults() *ConnectionSearchResponse {
	this := ConnectionSearchResponse{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ConnectionSearchResponse) GetPagination() Pagination {
	if o == nil || o.Pagination == nil {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionSearchResponse) GetPaginationOk() (*Pagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ConnectionSearchResponse) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *ConnectionSearchResponse) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *ConnectionSearchResponse) GetSort() []SortCriteriaResponse {
	if o == nil || o.Sort == nil {
		var ret []SortCriteriaResponse
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionSearchResponse) GetSortOk() ([]SortCriteriaResponse, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *ConnectionSearchResponse) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given []SortCriteriaResponse and assigns it to the Sort field.
func (o *ConnectionSearchResponse) SetSort(v []SortCriteriaResponse) {
	o.Sort = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConnectionSearchResponse) GetData() []Connection {
	if o == nil || o.Data == nil {
		var ret []Connection
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionSearchResponse) GetDataOk() ([]Connection, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConnectionSearchResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []Connection and assigns it to the Data field.
func (o *ConnectionSearchResponse) SetData(v []Connection) {
	o.Data = v
}

func (o ConnectionSearchResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionSearchResponse struct {
	value *ConnectionSearchResponse
	isSet bool
}

func (v NullableConnectionSearchResponse) Get() *ConnectionSearchResponse {
	return v.value
}

func (v *NullableConnectionSearchResponse) Set(val *ConnectionSearchResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionSearchResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionSearchResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionSearchResponse(val *ConnectionSearchResponse) *NullableConnectionSearchResponse {
	return &NullableConnectionSearchResponse{value: val, isSet: true}
}

func (v NullableConnectionSearchResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionSearchResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



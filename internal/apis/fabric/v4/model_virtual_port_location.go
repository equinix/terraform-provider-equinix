/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// VirtualPortLocation Geographic data for the port.
type VirtualPortLocation struct {
	// Code assigned to the Equinix International Business Exchange (IBX) data center from which the port is ordered. <br> The port might be in a different location.
	Ibx *string `json:"ibx,omitempty"`
}

// NewVirtualPortLocation instantiates a new VirtualPortLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualPortLocation() *VirtualPortLocation {
	this := VirtualPortLocation{}
	return &this
}

// NewVirtualPortLocationWithDefaults instantiates a new VirtualPortLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualPortLocationWithDefaults() *VirtualPortLocation {
	this := VirtualPortLocation{}
	return &this
}

// GetIbx returns the Ibx field value if set, zero value otherwise.
func (o *VirtualPortLocation) GetIbx() string {
	if o == nil || o.Ibx == nil {
		var ret string
		return ret
	}
	return *o.Ibx
}

// GetIbxOk returns a tuple with the Ibx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualPortLocation) GetIbxOk() (*string, bool) {
	if o == nil || o.Ibx == nil {
		return nil, false
	}
	return o.Ibx, true
}

// HasIbx returns a boolean if a field has been set.
func (o *VirtualPortLocation) HasIbx() bool {
	if o != nil && o.Ibx != nil {
		return true
	}

	return false
}

// SetIbx gets a reference to the given string and assigns it to the Ibx field.
func (o *VirtualPortLocation) SetIbx(v string) {
	o.Ibx = &v
}

func (o VirtualPortLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Ibx != nil {
		toSerialize["ibx"] = o.Ibx
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualPortLocation struct {
	value *VirtualPortLocation
	isSet bool
}

func (v NullableVirtualPortLocation) Get() *VirtualPortLocation {
	return v.value
}

func (v *NullableVirtualPortLocation) Set(val *VirtualPortLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualPortLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualPortLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualPortLocation(val *VirtualPortLocation) *NullableVirtualPortLocation {
	return &NullableVirtualPortLocation{value: val, isSet: true}
}

func (v NullableVirtualPortLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualPortLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



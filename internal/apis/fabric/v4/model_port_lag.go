/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// PortLAG Link aggregation group
type PortLAG struct {
	// If LAG enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Link aggregation group identifier
	Id *string `json:"id,omitempty"`
	// Link aggregation group name
	Name *string `json:"name,omitempty"`
	// LAG port status
	MemberStatus *string `json:"memberStatus,omitempty"`
}

// NewPortLAG instantiates a new PortLAG object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPortLAG() *PortLAG {
	this := PortLAG{}
	return &this
}

// NewPortLAGWithDefaults instantiates a new PortLAG object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortLAGWithDefaults() *PortLAG {
	this := PortLAG{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *PortLAG) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortLAG) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *PortLAG) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *PortLAG) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PortLAG) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortLAG) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PortLAG) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PortLAG) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PortLAG) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortLAG) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PortLAG) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PortLAG) SetName(v string) {
	o.Name = &v
}

// GetMemberStatus returns the MemberStatus field value if set, zero value otherwise.
func (o *PortLAG) GetMemberStatus() string {
	if o == nil || o.MemberStatus == nil {
		var ret string
		return ret
	}
	return *o.MemberStatus
}

// GetMemberStatusOk returns a tuple with the MemberStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PortLAG) GetMemberStatusOk() (*string, bool) {
	if o == nil || o.MemberStatus == nil {
		return nil, false
	}
	return o.MemberStatus, true
}

// HasMemberStatus returns a boolean if a field has been set.
func (o *PortLAG) HasMemberStatus() bool {
	if o != nil && o.MemberStatus != nil {
		return true
	}

	return false
}

// SetMemberStatus gets a reference to the given string and assigns it to the MemberStatus field.
func (o *PortLAG) SetMemberStatus(v string) {
	o.MemberStatus = &v
}

func (o PortLAG) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.MemberStatus != nil {
		toSerialize["memberStatus"] = o.MemberStatus
	}
	return json.Marshal(toSerialize)
}

type NullablePortLAG struct {
	value *PortLAG
	isSet bool
}

func (v NullablePortLAG) Get() *PortLAG {
	return v.value
}

func (v *NullablePortLAG) Set(val *PortLAG) {
	v.value = val
	v.isSet = true
}

func (v NullablePortLAG) IsSet() bool {
	return v.isSet
}

func (v *NullablePortLAG) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortLAG(val *PortLAG) *NullablePortLAG {
	return &NullablePortLAG{value: val, isSet: true}
}

func (v NullablePortLAG) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortLAG) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



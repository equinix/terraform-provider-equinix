/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// BandwidthUtilization Bandwidth utilization statistics (octet counters-based)
type BandwidthUtilization struct {
	// Aggregated data transfer capacity. Possible values- Mbps, megabits (1 million bits) per second; Gbps, gigabits (1 billion bits) per second.
	Unit *string `json:"unit,omitempty"`
	// An interval formatted value, indicating the time-interval the metric objects within the response represent
	MetricInterval *string `json:"metricInterval,omitempty"`
	Inbound *Direction `json:"inbound,omitempty"`
	Outbound *Direction `json:"outbound,omitempty"`
}

// NewBandwidthUtilization instantiates a new BandwidthUtilization object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBandwidthUtilization() *BandwidthUtilization {
	this := BandwidthUtilization{}
	return &this
}

// NewBandwidthUtilizationWithDefaults instantiates a new BandwidthUtilization object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBandwidthUtilizationWithDefaults() *BandwidthUtilization {
	this := BandwidthUtilization{}
	return &this
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *BandwidthUtilization) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthUtilization) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *BandwidthUtilization) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *BandwidthUtilization) SetUnit(v string) {
	o.Unit = &v
}

// GetMetricInterval returns the MetricInterval field value if set, zero value otherwise.
func (o *BandwidthUtilization) GetMetricInterval() string {
	if o == nil || o.MetricInterval == nil {
		var ret string
		return ret
	}
	return *o.MetricInterval
}

// GetMetricIntervalOk returns a tuple with the MetricInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthUtilization) GetMetricIntervalOk() (*string, bool) {
	if o == nil || o.MetricInterval == nil {
		return nil, false
	}
	return o.MetricInterval, true
}

// HasMetricInterval returns a boolean if a field has been set.
func (o *BandwidthUtilization) HasMetricInterval() bool {
	if o != nil && o.MetricInterval != nil {
		return true
	}

	return false
}

// SetMetricInterval gets a reference to the given string and assigns it to the MetricInterval field.
func (o *BandwidthUtilization) SetMetricInterval(v string) {
	o.MetricInterval = &v
}

// GetInbound returns the Inbound field value if set, zero value otherwise.
func (o *BandwidthUtilization) GetInbound() Direction {
	if o == nil || o.Inbound == nil {
		var ret Direction
		return ret
	}
	return *o.Inbound
}

// GetInboundOk returns a tuple with the Inbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthUtilization) GetInboundOk() (*Direction, bool) {
	if o == nil || o.Inbound == nil {
		return nil, false
	}
	return o.Inbound, true
}

// HasInbound returns a boolean if a field has been set.
func (o *BandwidthUtilization) HasInbound() bool {
	if o != nil && o.Inbound != nil {
		return true
	}

	return false
}

// SetInbound gets a reference to the given Direction and assigns it to the Inbound field.
func (o *BandwidthUtilization) SetInbound(v Direction) {
	o.Inbound = &v
}

// GetOutbound returns the Outbound field value if set, zero value otherwise.
func (o *BandwidthUtilization) GetOutbound() Direction {
	if o == nil || o.Outbound == nil {
		var ret Direction
		return ret
	}
	return *o.Outbound
}

// GetOutboundOk returns a tuple with the Outbound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthUtilization) GetOutboundOk() (*Direction, bool) {
	if o == nil || o.Outbound == nil {
		return nil, false
	}
	return o.Outbound, true
}

// HasOutbound returns a boolean if a field has been set.
func (o *BandwidthUtilization) HasOutbound() bool {
	if o != nil && o.Outbound != nil {
		return true
	}

	return false
}

// SetOutbound gets a reference to the given Direction and assigns it to the Outbound field.
func (o *BandwidthUtilization) SetOutbound(v Direction) {
	o.Outbound = &v
}

func (o BandwidthUtilization) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	if o.MetricInterval != nil {
		toSerialize["metricInterval"] = o.MetricInterval
	}
	if o.Inbound != nil {
		toSerialize["inbound"] = o.Inbound
	}
	if o.Outbound != nil {
		toSerialize["outbound"] = o.Outbound
	}
	return json.Marshal(toSerialize)
}

type NullableBandwidthUtilization struct {
	value *BandwidthUtilization
	isSet bool
}

func (v NullableBandwidthUtilization) Get() *BandwidthUtilization {
	return v.value
}

func (v *NullableBandwidthUtilization) Set(val *BandwidthUtilization) {
	v.value = val
	v.isSet = true
}

func (v NullableBandwidthUtilization) IsSet() bool {
	return v.isSet
}

func (v *NullableBandwidthUtilization) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBandwidthUtilization(val *BandwidthUtilization) *NullableBandwidthUtilization {
	return &NullableBandwidthUtilization{value: val, isSet: true}
}

func (v NullableBandwidthUtilization) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBandwidthUtilization) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



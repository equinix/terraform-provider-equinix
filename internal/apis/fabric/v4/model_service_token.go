/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"time"
)

// ServiceToken Create Service Tokens (v4) generates Equinix Fabricâ„¢ service tokens. These tokens authorize users to access protected resources and services. The tokens remove sensitive content from the environment, rather than just masking it, making the protected data impossible to unencrypt or decrypt. Resource owners can distribute the tokens to trusted partners and vendors, allowing selected third parties to work directly with Equinix network assets.
type ServiceToken struct {
	Type ServiceTokenType `json:"type"`
	// An absolute URL that is the subject of the link's context.
	Href *string `json:"href,omitempty"`
	// Equinix-assigned service token identifier
	Uuid *string `json:"uuid,omitempty"`
	// Service token description
	Description *string `json:"description,omitempty"`
	// Lifespan (in days) of the service token.
	Expiry int32 `json:"expiry"`
	// Expiration date and time of the service token.
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	Connection ServiceTokenConnection `json:"connection"`
	State *ServiceTokenState `json:"state,omitempty"`
	// Service token related notifications
	Notifications []SimplifiedNotification `json:"notifications,omitempty"`
	Account *SimplifiedAccount `json:"account,omitempty"`
	Changelog *Changelog `json:"changelog,omitempty"`
}

// NewServiceToken instantiates a new ServiceToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceToken(type_ ServiceTokenType, expiry int32, connection ServiceTokenConnection) *ServiceToken {
	this := ServiceToken{}
	this.Type = type_
	this.Expiry = expiry
	this.Connection = connection
	return &this
}

// NewServiceTokenWithDefaults instantiates a new ServiceToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTokenWithDefaults() *ServiceToken {
	this := ServiceToken{}
	return &this
}

// GetType returns the Type field value
func (o *ServiceToken) GetType() ServiceTokenType {
	if o == nil {
		var ret ServiceTokenType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetTypeOk() (*ServiceTokenType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ServiceToken) SetType(v ServiceTokenType) {
	o.Type = v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ServiceToken) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ServiceToken) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ServiceToken) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ServiceToken) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ServiceToken) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ServiceToken) SetUuid(v string) {
	o.Uuid = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ServiceToken) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ServiceToken) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ServiceToken) SetDescription(v string) {
	o.Description = &v
}

// GetExpiry returns the Expiry field value
func (o *ServiceToken) GetExpiry() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetExpiryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Expiry, true
}

// SetExpiry sets field value
func (o *ServiceToken) SetExpiry(v int32) {
	o.Expiry = v
}

// GetExpirationDateTime returns the ExpirationDateTime field value if set, zero value otherwise.
func (o *ServiceToken) GetExpirationDateTime() time.Time {
	if o == nil || o.ExpirationDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil || o.ExpirationDateTime == nil {
		return nil, false
	}
	return o.ExpirationDateTime, true
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *ServiceToken) HasExpirationDateTime() bool {
	if o != nil && o.ExpirationDateTime != nil {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given time.Time and assigns it to the ExpirationDateTime field.
func (o *ServiceToken) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime = &v
}

// GetConnection returns the Connection field value
func (o *ServiceToken) GetConnection() ServiceTokenConnection {
	if o == nil {
		var ret ServiceTokenConnection
		return ret
	}

	return o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetConnectionOk() (*ServiceTokenConnection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Connection, true
}

// SetConnection sets field value
func (o *ServiceToken) SetConnection(v ServiceTokenConnection) {
	o.Connection = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ServiceToken) GetState() ServiceTokenState {
	if o == nil || o.State == nil {
		var ret ServiceTokenState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetStateOk() (*ServiceTokenState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ServiceToken) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given ServiceTokenState and assigns it to the State field.
func (o *ServiceToken) SetState(v ServiceTokenState) {
	o.State = &v
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *ServiceToken) GetNotifications() []SimplifiedNotification {
	if o == nil || o.Notifications == nil {
		var ret []SimplifiedNotification
		return ret
	}
	return o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetNotificationsOk() ([]SimplifiedNotification, bool) {
	if o == nil || o.Notifications == nil {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *ServiceToken) HasNotifications() bool {
	if o != nil && o.Notifications != nil {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []SimplifiedNotification and assigns it to the Notifications field.
func (o *ServiceToken) SetNotifications(v []SimplifiedNotification) {
	o.Notifications = v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ServiceToken) GetAccount() SimplifiedAccount {
	if o == nil || o.Account == nil {
		var ret SimplifiedAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetAccountOk() (*SimplifiedAccount, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ServiceToken) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SimplifiedAccount and assigns it to the Account field.
func (o *ServiceToken) SetAccount(v SimplifiedAccount) {
	o.Account = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *ServiceToken) GetChangelog() Changelog {
	if o == nil || o.Changelog == nil {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceToken) GetChangelogOk() (*Changelog, bool) {
	if o == nil || o.Changelog == nil {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *ServiceToken) HasChangelog() bool {
	if o != nil && o.Changelog != nil {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *ServiceToken) SetChangelog(v Changelog) {
	o.Changelog = &v
}

func (o ServiceToken) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["expiry"] = o.Expiry
	}
	if o.ExpirationDateTime != nil {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime
	}
	if true {
		toSerialize["connection"] = o.Connection
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Notifications != nil {
		toSerialize["notifications"] = o.Notifications
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Changelog != nil {
		toSerialize["changelog"] = o.Changelog
	}
	return json.Marshal(toSerialize)
}

type NullableServiceToken struct {
	value *ServiceToken
	isSet bool
}

func (v NullableServiceToken) Get() *ServiceToken {
	return v.value
}

func (v *NullableServiceToken) Set(val *ServiceToken) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceToken) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceToken(val *ServiceToken) *NullableServiceToken {
	return &NullableServiceToken{value: val, isSet: true}
}

func (v NullableServiceToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"time"
)

// Statistics This API provides service-level traffic metrics so that you can view access and gather key information required to manage service subscription sizing and capacity.
type Statistics struct {
	// Start and duration of the statistical analysis interval.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// End and duration of the statistical analysis interval.
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
	// Point of view for connection metrics - aSide or zSide
	ViewPoint *string `json:"viewPoint,omitempty"`
	BandwidthUtilization *BandwidthUtilization `json:"bandwidthUtilization,omitempty"`
}

// NewStatistics instantiates a new Statistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatistics() *Statistics {
	this := Statistics{}
	return &this
}

// NewStatisticsWithDefaults instantiates a new Statistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatisticsWithDefaults() *Statistics {
	this := Statistics{}
	return &this
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise.
func (o *Statistics) GetStartDateTime() time.Time {
	if o == nil || o.StartDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil || o.StartDateTime == nil {
		return nil, false
	}
	return o.StartDateTime, true
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *Statistics) HasStartDateTime() bool {
	if o != nil && o.StartDateTime != nil {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given time.Time and assigns it to the StartDateTime field.
func (o *Statistics) SetStartDateTime(v time.Time) {
	o.StartDateTime = &v
}

// GetEndDateTime returns the EndDateTime field value if set, zero value otherwise.
func (o *Statistics) GetEndDateTime() time.Time {
	if o == nil || o.EndDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetEndDateTimeOk() (*time.Time, bool) {
	if o == nil || o.EndDateTime == nil {
		return nil, false
	}
	return o.EndDateTime, true
}

// HasEndDateTime returns a boolean if a field has been set.
func (o *Statistics) HasEndDateTime() bool {
	if o != nil && o.EndDateTime != nil {
		return true
	}

	return false
}

// SetEndDateTime gets a reference to the given time.Time and assigns it to the EndDateTime field.
func (o *Statistics) SetEndDateTime(v time.Time) {
	o.EndDateTime = &v
}

// GetViewPoint returns the ViewPoint field value if set, zero value otherwise.
func (o *Statistics) GetViewPoint() string {
	if o == nil || o.ViewPoint == nil {
		var ret string
		return ret
	}
	return *o.ViewPoint
}

// GetViewPointOk returns a tuple with the ViewPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetViewPointOk() (*string, bool) {
	if o == nil || o.ViewPoint == nil {
		return nil, false
	}
	return o.ViewPoint, true
}

// HasViewPoint returns a boolean if a field has been set.
func (o *Statistics) HasViewPoint() bool {
	if o != nil && o.ViewPoint != nil {
		return true
	}

	return false
}

// SetViewPoint gets a reference to the given string and assigns it to the ViewPoint field.
func (o *Statistics) SetViewPoint(v string) {
	o.ViewPoint = &v
}

// GetBandwidthUtilization returns the BandwidthUtilization field value if set, zero value otherwise.
func (o *Statistics) GetBandwidthUtilization() BandwidthUtilization {
	if o == nil || o.BandwidthUtilization == nil {
		var ret BandwidthUtilization
		return ret
	}
	return *o.BandwidthUtilization
}

// GetBandwidthUtilizationOk returns a tuple with the BandwidthUtilization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Statistics) GetBandwidthUtilizationOk() (*BandwidthUtilization, bool) {
	if o == nil || o.BandwidthUtilization == nil {
		return nil, false
	}
	return o.BandwidthUtilization, true
}

// HasBandwidthUtilization returns a boolean if a field has been set.
func (o *Statistics) HasBandwidthUtilization() bool {
	if o != nil && o.BandwidthUtilization != nil {
		return true
	}

	return false
}

// SetBandwidthUtilization gets a reference to the given BandwidthUtilization and assigns it to the BandwidthUtilization field.
func (o *Statistics) SetBandwidthUtilization(v BandwidthUtilization) {
	o.BandwidthUtilization = &v
}

func (o Statistics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartDateTime != nil {
		toSerialize["startDateTime"] = o.StartDateTime
	}
	if o.EndDateTime != nil {
		toSerialize["endDateTime"] = o.EndDateTime
	}
	if o.ViewPoint != nil {
		toSerialize["viewPoint"] = o.ViewPoint
	}
	if o.BandwidthUtilization != nil {
		toSerialize["bandwidthUtilization"] = o.BandwidthUtilization
	}
	return json.Marshal(toSerialize)
}

type NullableStatistics struct {
	value *Statistics
	isSet bool
}

func (v NullableStatistics) Get() *Statistics {
	return v.value
}

func (v *NullableStatistics) Set(val *Statistics) {
	v.value = val
	v.isSet = true
}

func (v NullableStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatistics(val *Statistics) *NullableStatistics {
	return &NullableStatistics{value: val, isSet: true}
}

func (v NullableStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



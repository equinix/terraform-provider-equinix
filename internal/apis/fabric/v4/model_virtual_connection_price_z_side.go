/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// VirtualConnectionPriceZSide struct for VirtualConnectionPriceZSide
type VirtualConnectionPriceZSide struct {
	AccessPoint *VirtualConnectionPriceZSideAccessPoint `json:"accessPoint,omitempty"`
}

// NewVirtualConnectionPriceZSide instantiates a new VirtualConnectionPriceZSide object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualConnectionPriceZSide() *VirtualConnectionPriceZSide {
	this := VirtualConnectionPriceZSide{}
	return &this
}

// NewVirtualConnectionPriceZSideWithDefaults instantiates a new VirtualConnectionPriceZSide object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualConnectionPriceZSideWithDefaults() *VirtualConnectionPriceZSide {
	this := VirtualConnectionPriceZSide{}
	return &this
}

// GetAccessPoint returns the AccessPoint field value if set, zero value otherwise.
func (o *VirtualConnectionPriceZSide) GetAccessPoint() VirtualConnectionPriceZSideAccessPoint {
	if o == nil || o.AccessPoint == nil {
		var ret VirtualConnectionPriceZSideAccessPoint
		return ret
	}
	return *o.AccessPoint
}

// GetAccessPointOk returns a tuple with the AccessPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualConnectionPriceZSide) GetAccessPointOk() (*VirtualConnectionPriceZSideAccessPoint, bool) {
	if o == nil || o.AccessPoint == nil {
		return nil, false
	}
	return o.AccessPoint, true
}

// HasAccessPoint returns a boolean if a field has been set.
func (o *VirtualConnectionPriceZSide) HasAccessPoint() bool {
	if o != nil && o.AccessPoint != nil {
		return true
	}

	return false
}

// SetAccessPoint gets a reference to the given VirtualConnectionPriceZSideAccessPoint and assigns it to the AccessPoint field.
func (o *VirtualConnectionPriceZSide) SetAccessPoint(v VirtualConnectionPriceZSideAccessPoint) {
	o.AccessPoint = &v
}

func (o VirtualConnectionPriceZSide) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessPoint != nil {
		toSerialize["accessPoint"] = o.AccessPoint
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualConnectionPriceZSide struct {
	value *VirtualConnectionPriceZSide
	isSet bool
}

func (v NullableVirtualConnectionPriceZSide) Get() *VirtualConnectionPriceZSide {
	return v.value
}

func (v *NullableVirtualConnectionPriceZSide) Set(val *VirtualConnectionPriceZSide) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualConnectionPriceZSide) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualConnectionPriceZSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualConnectionPriceZSide(val *VirtualConnectionPriceZSide) *NullableVirtualConnectionPriceZSide {
	return &NullableVirtualConnectionPriceZSide{value: val, isSet: true}
}

func (v NullableVirtualConnectionPriceZSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualConnectionPriceZSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



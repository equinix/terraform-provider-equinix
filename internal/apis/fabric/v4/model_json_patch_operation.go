/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// JsonPatchOperation Service Profile Access Points
type JsonPatchOperation struct {
	// the operation to be performed
	Op string `json:"op"`
	// A JSON Pointer path.
	Path string `json:"path"`
}

// NewJsonPatchOperation instantiates a new JsonPatchOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonPatchOperation(op string, path string) *JsonPatchOperation {
	this := JsonPatchOperation{}
	this.Op = op
	this.Path = path
	return &this
}

// NewJsonPatchOperationWithDefaults instantiates a new JsonPatchOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonPatchOperationWithDefaults() *JsonPatchOperation {
	this := JsonPatchOperation{}
	return &this
}

// GetOp returns the Op field value
func (o *JsonPatchOperation) GetOp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Op
}

// GetOpOk returns a tuple with the Op field value
// and a boolean to check if the value has been set.
func (o *JsonPatchOperation) GetOpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Op, true
}

// SetOp sets field value
func (o *JsonPatchOperation) SetOp(v string) {
	o.Op = v
}

// GetPath returns the Path field value
func (o *JsonPatchOperation) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *JsonPatchOperation) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *JsonPatchOperation) SetPath(v string) {
	o.Path = v
}

func (o JsonPatchOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["op"] = o.Op
	}
	if true {
		toSerialize["path"] = o.Path
	}
	return json.Marshal(toSerialize)
}

type NullableJsonPatchOperation struct {
	value *JsonPatchOperation
	isSet bool
}

func (v NullableJsonPatchOperation) Get() *JsonPatchOperation {
	return v.value
}

func (v *NullableJsonPatchOperation) Set(val *JsonPatchOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonPatchOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonPatchOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonPatchOperation(val *JsonPatchOperation) *NullableJsonPatchOperation {
	return &NullableJsonPatchOperation{value: val, isSet: true}
}

func (v NullableJsonPatchOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonPatchOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



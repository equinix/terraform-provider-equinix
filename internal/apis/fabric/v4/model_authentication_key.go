/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// AuthenticationKey Authentication Key Support and Customization
type AuthenticationKey struct {
	Required *bool `json:"required,omitempty"`
	Label *string `json:"label,omitempty"`
	Description *string `json:"description,omitempty"`
}

// NewAuthenticationKey instantiates a new AuthenticationKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationKey() *AuthenticationKey {
	this := AuthenticationKey{}
	var required bool = false
	this.Required = &required
	return &this
}

// NewAuthenticationKeyWithDefaults instantiates a new AuthenticationKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationKeyWithDefaults() *AuthenticationKey {
	this := AuthenticationKey{}
	var required bool = false
	this.Required = &required
	return &this
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *AuthenticationKey) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationKey) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *AuthenticationKey) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *AuthenticationKey) SetRequired(v bool) {
	o.Required = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *AuthenticationKey) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationKey) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *AuthenticationKey) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *AuthenticationKey) SetLabel(v string) {
	o.Label = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AuthenticationKey) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationKey) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AuthenticationKey) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AuthenticationKey) SetDescription(v string) {
	o.Description = &v
}

func (o AuthenticationKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	return json.Marshal(toSerialize)
}

type NullableAuthenticationKey struct {
	value *AuthenticationKey
	isSet bool
}

func (v NullableAuthenticationKey) Get() *AuthenticationKey {
	return v.value
}

func (v *NullableAuthenticationKey) Set(val *AuthenticationKey) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationKey) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationKey(val *AuthenticationKey) *NullableAuthenticationKey {
	return &NullableAuthenticationKey{value: val, isSet: true}
}

func (v NullableAuthenticationKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



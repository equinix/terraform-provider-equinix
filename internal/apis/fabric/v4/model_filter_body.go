/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// FilterBody Search requests containing criteria
type FilterBody struct {
	Filter *SearchExpression `json:"filter,omitempty"`
}

// NewFilterBody instantiates a new FilterBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterBody() *FilterBody {
	this := FilterBody{}
	return &this
}

// NewFilterBodyWithDefaults instantiates a new FilterBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterBodyWithDefaults() *FilterBody {
	this := FilterBody{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *FilterBody) GetFilter() SearchExpression {
	if o == nil || o.Filter == nil {
		var ret SearchExpression
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilterBody) GetFilterOk() (*SearchExpression, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *FilterBody) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given SearchExpression and assigns it to the Filter field.
func (o *FilterBody) SetFilter(v SearchExpression) {
	o.Filter = &v
}

func (o FilterBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	return json.Marshal(toSerialize)
}

type NullableFilterBody struct {
	value *FilterBody
	isSet bool
}

func (v NullableFilterBody) Get() *FilterBody {
	return v.value
}

func (v *NullableFilterBody) Set(val *FilterBody) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterBody) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterBody(val *FilterBody) *NullableFilterBody {
	return &NullableFilterBody{value: val, isSet: true}
}

func (v NullableFilterBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// PhysicalPortSettings Physical Port configuration settings
type PhysicalPortSettings struct {
	ErrorMessage *string `json:"errorMessage,omitempty"`
	SharedPortType *string `json:"sharedPortType,omitempty"`
	SharedPortProduct *string `json:"sharedPortProduct,omitempty"`
	PackageType *string `json:"packageType,omitempty"`
}

// NewPhysicalPortSettings instantiates a new PhysicalPortSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalPortSettings(portType string) *PhysicalPortSettings {
	this := PhysicalPortSettings{}
	this.PortType = portType
	return &this
}

// NewPhysicalPortSettingsWithDefaults instantiates a new PhysicalPortSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalPortSettingsWithDefaults() *PhysicalPortSettings {
	this := PhysicalPortSettings{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *PhysicalPortSettings) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalPortSettings) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *PhysicalPortSettings) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *PhysicalPortSettings) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetSharedPortType returns the SharedPortType field value if set, zero value otherwise.
func (o *PhysicalPortSettings) GetSharedPortType() string {
	if o == nil || o.SharedPortType == nil {
		var ret string
		return ret
	}
	return *o.SharedPortType
}

// GetSharedPortTypeOk returns a tuple with the SharedPortType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalPortSettings) GetSharedPortTypeOk() (*string, bool) {
	if o == nil || o.SharedPortType == nil {
		return nil, false
	}
	return o.SharedPortType, true
}

// HasSharedPortType returns a boolean if a field has been set.
func (o *PhysicalPortSettings) HasSharedPortType() bool {
	if o != nil && o.SharedPortType != nil {
		return true
	}

	return false
}

// SetSharedPortType gets a reference to the given string and assigns it to the SharedPortType field.
func (o *PhysicalPortSettings) SetSharedPortType(v string) {
	o.SharedPortType = &v
}

// GetSharedPortProduct returns the SharedPortProduct field value if set, zero value otherwise.
func (o *PhysicalPortSettings) GetSharedPortProduct() string {
	if o == nil || o.SharedPortProduct == nil {
		var ret string
		return ret
	}
	return *o.SharedPortProduct
}

// GetSharedPortProductOk returns a tuple with the SharedPortProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalPortSettings) GetSharedPortProductOk() (*string, bool) {
	if o == nil || o.SharedPortProduct == nil {
		return nil, false
	}
	return o.SharedPortProduct, true
}

// HasSharedPortProduct returns a boolean if a field has been set.
func (o *PhysicalPortSettings) HasSharedPortProduct() bool {
	if o != nil && o.SharedPortProduct != nil {
		return true
	}

	return false
}

// SetSharedPortProduct gets a reference to the given string and assigns it to the SharedPortProduct field.
func (o *PhysicalPortSettings) SetSharedPortProduct(v string) {
	o.SharedPortProduct = &v
}

// GetPackageType returns the PackageType field value if set, zero value otherwise.
func (o *PhysicalPortSettings) GetPackageType() string {
	if o == nil || o.PackageType == nil {
		var ret string
		return ret
	}
	return *o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalPortSettings) GetPackageTypeOk() (*string, bool) {
	if o == nil || o.PackageType == nil {
		return nil, false
	}
	return o.PackageType, true
}

// HasPackageType returns a boolean if a field has been set.
func (o *PhysicalPortSettings) HasPackageType() bool {
	if o != nil && o.PackageType != nil {
		return true
	}

	return false
}

// SetPackageType gets a reference to the given string and assigns it to the PackageType field.
func (o *PhysicalPortSettings) SetPackageType(v string) {
	o.PackageType = &v
}

func (o PhysicalPortSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorMessage != nil {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if o.SharedPortType != nil {
		toSerialize["sharedPortType"] = o.SharedPortType
	}
	if o.SharedPortProduct != nil {
		toSerialize["sharedPortProduct"] = o.SharedPortProduct
	}
	if o.PackageType != nil {
		toSerialize["packageType"] = o.PackageType
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalPortSettings struct {
	value *PhysicalPortSettings
	isSet bool
}

func (v NullablePhysicalPortSettings) Get() *PhysicalPortSettings {
	return v.value
}

func (v *NullablePhysicalPortSettings) Set(val *PhysicalPortSettings) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalPortSettings) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalPortSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalPortSettings(val *PhysicalPortSettings) *NullablePhysicalPortSettings {
	return &NullablePhysicalPortSettings{value: val, isSet: true}
}

func (v NullablePhysicalPortSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalPortSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// RemoveOperation Remove sub-resource from an existing model
type RemoveOperation struct {
	JsonPatchOperation
}

// NewRemoveOperation instantiates a new RemoveOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveOperation(op string, path string) *RemoveOperation {
	this := RemoveOperation{}
	this.Op = op
	this.Path = path
	return &this
}

// NewRemoveOperationWithDefaults instantiates a new RemoveOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveOperationWithDefaults() *RemoveOperation {
	this := RemoveOperation{}
	return &this
}

func (o RemoveOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	serializedJsonPatchOperation, errJsonPatchOperation := json.Marshal(o.JsonPatchOperation)
	if errJsonPatchOperation != nil {
		return []byte{}, errJsonPatchOperation
	}
	errJsonPatchOperation = json.Unmarshal([]byte(serializedJsonPatchOperation), &toSerialize)
	if errJsonPatchOperation != nil {
		return []byte{}, errJsonPatchOperation
	}
	return json.Marshal(toSerialize)
}

type NullableRemoveOperation struct {
	value *RemoveOperation
	isSet bool
}

func (v NullableRemoveOperation) Get() *RemoveOperation {
	return v.value
}

func (v *NullableRemoveOperation) Set(val *RemoveOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveOperation(val *RemoveOperation) *NullableRemoveOperation {
	return &NullableRemoveOperation{value: val, isSet: true}
}

func (v NullableRemoveOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// ServiceProfileFilter - struct for ServiceProfileFilter
type ServiceProfileFilter struct {
	ServiceProfileAndFilter *ServiceProfileAndFilter
	ServiceProfileSimpleExpression *ServiceProfileSimpleExpression
}

// ServiceProfileAndFilterAsServiceProfileFilter is a convenience function that returns ServiceProfileAndFilter wrapped in ServiceProfileFilter
func ServiceProfileAndFilterAsServiceProfileFilter(v *ServiceProfileAndFilter) ServiceProfileFilter {
	return ServiceProfileFilter{
		ServiceProfileAndFilter: v,
	}
}

// ServiceProfileSimpleExpressionAsServiceProfileFilter is a convenience function that returns ServiceProfileSimpleExpression wrapped in ServiceProfileFilter
func ServiceProfileSimpleExpressionAsServiceProfileFilter(v *ServiceProfileSimpleExpression) ServiceProfileFilter {
	return ServiceProfileFilter{
		ServiceProfileSimpleExpression: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServiceProfileFilter) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ServiceProfileAndFilter
	err = newStrictDecoder(data).Decode(&dst.ServiceProfileAndFilter)
	if err == nil {
		jsonServiceProfileAndFilter, _ := json.Marshal(dst.ServiceProfileAndFilter)
		if string(jsonServiceProfileAndFilter) == "{}" { // empty struct
			dst.ServiceProfileAndFilter = nil
		} else {
			match++
		}
	} else {
		dst.ServiceProfileAndFilter = nil
	}

	// try to unmarshal data into ServiceProfileSimpleExpression
	err = newStrictDecoder(data).Decode(&dst.ServiceProfileSimpleExpression)
	if err == nil {
		jsonServiceProfileSimpleExpression, _ := json.Marshal(dst.ServiceProfileSimpleExpression)
		if string(jsonServiceProfileSimpleExpression) == "{}" { // empty struct
			dst.ServiceProfileSimpleExpression = nil
		} else {
			match++
		}
	} else {
		dst.ServiceProfileSimpleExpression = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ServiceProfileAndFilter = nil
		dst.ServiceProfileSimpleExpression = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ServiceProfileFilter)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ServiceProfileFilter)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServiceProfileFilter) MarshalJSON() ([]byte, error) {
	if src.ServiceProfileAndFilter != nil {
		return json.Marshal(&src.ServiceProfileAndFilter)
	}

	if src.ServiceProfileSimpleExpression != nil {
		return json.Marshal(&src.ServiceProfileSimpleExpression)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServiceProfileFilter) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ServiceProfileAndFilter != nil {
		return obj.ServiceProfileAndFilter
	}

	if obj.ServiceProfileSimpleExpression != nil {
		return obj.ServiceProfileSimpleExpression
	}

	// all schemas are nil
	return nil
}

type NullableServiceProfileFilter struct {
	value *ServiceProfileFilter
	isSet bool
}

func (v NullableServiceProfileFilter) Get() *ServiceProfileFilter {
	return v.value
}

func (v *NullableServiceProfileFilter) Set(val *ServiceProfileFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProfileFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProfileFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProfileFilter(val *ServiceProfileFilter) *NullableServiceProfileFilter {
	return &NullableServiceProfileFilter{value: val, isSet: true}
}

func (v NullableServiceProfileFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProfileFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



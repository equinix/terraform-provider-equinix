/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ServiceTokens Service tokens authorize a user to access protected resources and services available on the Equinix Fabric network. The owner of the resources can distribute service tokens to third-party users (trusted partners and vendors), allowing them to directly access and work with the resources on the network without involving the resource owners.
type ServiceTokens struct {
	// List of Service Tokens
	Data []ServiceToken `json:"data,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
}

// NewServiceTokens instantiates a new ServiceTokens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceTokens() *ServiceTokens {
	this := ServiceTokens{}
	return &this
}

// NewServiceTokensWithDefaults instantiates a new ServiceTokens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceTokensWithDefaults() *ServiceTokens {
	this := ServiceTokens{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ServiceTokens) GetData() []ServiceToken {
	if o == nil || o.Data == nil {
		var ret []ServiceToken
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokens) GetDataOk() ([]ServiceToken, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ServiceTokens) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []ServiceToken and assigns it to the Data field.
func (o *ServiceTokens) SetData(v []ServiceToken) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ServiceTokens) GetPagination() Pagination {
	if o == nil || o.Pagination == nil {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceTokens) GetPaginationOk() (*Pagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ServiceTokens) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *ServiceTokens) SetPagination(v Pagination) {
	o.Pagination = &v
}

func (o ServiceTokens) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	return json.Marshal(toSerialize)
}

type NullableServiceTokens struct {
	value *ServiceTokens
	isSet bool
}

func (v NullableServiceTokens) Get() *ServiceTokens {
	return v.value
}

func (v *NullableServiceTokens) Set(val *ServiceTokens) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTokens) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTokens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTokens(val *ServiceTokens) *NullableServiceTokens {
	return &NullableServiceTokens{value: val, isSet: true}
}

func (v NullableServiceTokens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTokens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



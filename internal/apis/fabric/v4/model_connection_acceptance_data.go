/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionAcceptanceData Connection acceptance data
type ConnectionAcceptanceData struct {
	ZSide *ConnectionSide `json:"zSide,omitempty"`
}

// NewConnectionAcceptanceData instantiates a new ConnectionAcceptanceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionAcceptanceData() *ConnectionAcceptanceData {
	this := ConnectionAcceptanceData{}
	return &this
}

// NewConnectionAcceptanceDataWithDefaults instantiates a new ConnectionAcceptanceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionAcceptanceDataWithDefaults() *ConnectionAcceptanceData {
	this := ConnectionAcceptanceData{}
	return &this
}

// GetZSide returns the ZSide field value if set, zero value otherwise.
func (o *ConnectionAcceptanceData) GetZSide() ConnectionSide {
	if o == nil || o.ZSide == nil {
		var ret ConnectionSide
		return ret
	}
	return *o.ZSide
}

// GetZSideOk returns a tuple with the ZSide field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionAcceptanceData) GetZSideOk() (*ConnectionSide, bool) {
	if o == nil || o.ZSide == nil {
		return nil, false
	}
	return o.ZSide, true
}

// HasZSide returns a boolean if a field has been set.
func (o *ConnectionAcceptanceData) HasZSide() bool {
	if o != nil && o.ZSide != nil {
		return true
	}

	return false
}

// SetZSide gets a reference to the given ConnectionSide and assigns it to the ZSide field.
func (o *ConnectionAcceptanceData) SetZSide(v ConnectionSide) {
	o.ZSide = &v
}

func (o ConnectionAcceptanceData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ZSide != nil {
		toSerialize["zSide"] = o.ZSide
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionAcceptanceData struct {
	value *ConnectionAcceptanceData
	isSet bool
}

func (v NullableConnectionAcceptanceData) Get() *ConnectionAcceptanceData {
	return v.value
}

func (v *NullableConnectionAcceptanceData) Set(val *ConnectionAcceptanceData) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionAcceptanceData) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionAcceptanceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionAcceptanceData(val *ConnectionAcceptanceData) *NullableConnectionAcceptanceData {
	return &NullableConnectionAcceptanceData{value: val, isSet: true}
}

func (v NullableConnectionAcceptanceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionAcceptanceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



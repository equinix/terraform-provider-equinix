/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// AccessPointType Access point type
type AccessPointType string

// List of AccessPointType
const (
	VD AccessPointType = "VD"
	VG AccessPointType = "VG"
	SP AccessPointType = "SP"
	IGW AccessPointType = "IGW"
	COLO AccessPointType = "COLO"
	SUBNET AccessPointType = "SUBNET"
	GW AccessPointType = "GW"
)

// All allowed values of AccessPointType enum
var AllowedAccessPointTypeEnumValues = []AccessPointType{
	"VD",
	"VG",
	"SP",
	"IGW",
	"COLO",
	"SUBNET",
	"GW",
}

func (v *AccessPointType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccessPointType(value)
	for _, existing := range AllowedAccessPointTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccessPointType", value)
}

// NewAccessPointTypeFromValue returns a pointer to a valid AccessPointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccessPointTypeFromValue(v string) (*AccessPointType, error) {
	ev := AccessPointType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccessPointType: valid values are %v", v, AllowedAccessPointTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccessPointType) IsValid() bool {
	for _, existing := range AllowedAccessPointTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccessPointType value
func (v AccessPointType) Ptr() *AccessPointType {
	return &v
}

type NullableAccessPointType struct {
	value *AccessPointType
	isSet bool
}

func (v NullableAccessPointType) Get() *AccessPointType {
	return v.value
}

func (v *NullableAccessPointType) Set(val *AccessPointType) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessPointType) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessPointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessPointType(val *AccessPointType) *NullableAccessPointType {
	return &NullableAccessPointType{value: val, isSet: true}
}

func (v NullableAccessPointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessPointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// NexusProviderStatus Connection provider readiness status
type NexusProviderStatus string

// List of NexusProviderStatus
const (
	AVAILABLE NexusProviderStatus = "AVAILABLE"
	DEPROVISIONED NexusProviderStatus = "DEPROVISIONED"
	DEPROVISIONING NexusProviderStatus = "DEPROVISIONING"
	FAILED NexusProviderStatus = "FAILED"
	NOT_AVAILABLE NexusProviderStatus = "NOT_AVAILABLE"
	PENDING_APPROVAL NexusProviderStatus = "PENDING_APPROVAL"
	PROVISIONED NexusProviderStatus = "PROVISIONED"
	PROVISIONING NexusProviderStatus = "PROVISIONING"
	REJECTED NexusProviderStatus = "REJECTED"
	PENDING_BGP NexusProviderStatus = "PENDING_BGP"
	DELETED NexusProviderStatus = "DELETED"
	NOTPROVISIONED NexusProviderStatus = "NOTPROVISIONED"
	DELETING NexusProviderStatus = "DELETING"
	PENDING_DELETE NexusProviderStatus = "PENDING DELETE"
)

// All allowed values of NexusProviderStatus enum
var AllowedNexusProviderStatusEnumValues = []NexusProviderStatus{
	"AVAILABLE",
	"DEPROVISIONED",
	"DEPROVISIONING",
	"FAILED",
	"NOT_AVAILABLE",
	"PENDING_APPROVAL",
	"PROVISIONED",
	"PROVISIONING",
	"REJECTED",
	"PENDING_BGP",
	"DELETED",
	"NOTPROVISIONED",
	"DELETING",
	"PENDING DELETE",
}

func (v *NexusProviderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NexusProviderStatus(value)
	for _, existing := range AllowedNexusProviderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NexusProviderStatus", value)
}

// NewNexusProviderStatusFromValue returns a pointer to a valid NexusProviderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNexusProviderStatusFromValue(v string) (*NexusProviderStatus, error) {
	ev := NexusProviderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NexusProviderStatus: valid values are %v", v, AllowedNexusProviderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NexusProviderStatus) IsValid() bool {
	for _, existing := range AllowedNexusProviderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NexusProviderStatus value
func (v NexusProviderStatus) Ptr() *NexusProviderStatus {
	return &v
}

type NullableNexusProviderStatus struct {
	value *NexusProviderStatus
	isSet bool
}

func (v NullableNexusProviderStatus) Get() *NexusProviderStatus {
	return v.value
}

func (v *NullableNexusProviderStatus) Set(val *NexusProviderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNexusProviderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNexusProviderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNexusProviderStatus(val *NexusProviderStatus) *NullableNexusProviderStatus {
	return &NullableNexusProviderStatus{value: val, isSet: true}
}

func (v NullableNexusProviderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNexusProviderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


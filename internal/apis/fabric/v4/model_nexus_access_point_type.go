/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// NexusAccessPointType Access point type
type NexusAccessPointType string

// List of NexusAccessPointType
const (
	VD NexusAccessPointType = "VD"
	SP NexusAccessPointType = "SP"
	COLO NexusAccessPointType = "COLO"
	GW NexusAccessPointType = "GW"
	CHAINGROUP NexusAccessPointType = "CHAINGROUP"
)

// All allowed values of NexusAccessPointType enum
var AllowedNexusAccessPointTypeEnumValues = []NexusAccessPointType{
	"VD",
	"SP",
	"COLO",
	"GW",
	"CHAINGROUP",
}

func (v *NexusAccessPointType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NexusAccessPointType(value)
	for _, existing := range AllowedNexusAccessPointTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NexusAccessPointType", value)
}

// NewNexusAccessPointTypeFromValue returns a pointer to a valid NexusAccessPointType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNexusAccessPointTypeFromValue(v string) (*NexusAccessPointType, error) {
	ev := NexusAccessPointType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NexusAccessPointType: valid values are %v", v, AllowedNexusAccessPointTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NexusAccessPointType) IsValid() bool {
	for _, existing := range AllowedNexusAccessPointTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NexusAccessPointType value
func (v NexusAccessPointType) Ptr() *NexusAccessPointType {
	return &v
}

type NullableNexusAccessPointType struct {
	value *NexusAccessPointType
	isSet bool
}

func (v NullableNexusAccessPointType) Get() *NexusAccessPointType {
	return v.value
}

func (v *NullableNexusAccessPointType) Set(val *NexusAccessPointType) {
	v.value = val
	v.isSet = true
}

func (v NullableNexusAccessPointType) IsSet() bool {
	return v.isSet
}

func (v *NullableNexusAccessPointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNexusAccessPointType(val *NexusAccessPointType) *NullableNexusAccessPointType {
	return &NullableNexusAccessPointType{value: val, isSet: true}
}

func (v NullableNexusAccessPointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNexusAccessPointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


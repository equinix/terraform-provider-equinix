/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// Metro GET Metros retrieves all Equinix® Fabric™ metros, as well as latency data for each location.This performance data helps network planning engineers and administrators make strategic decisions about port locations and traffic routes.
type Metro struct {
	// The Canonical URL at which the resource resides.
	Href *string `json:"href,omitempty"`
	// Indicator of a Fabric Metro
	Type *string `json:"type,omitempty"`
	// Code Assigned to an Equinix IBX data center in a specified metropolitan area.
	Code *string `json:"code,omitempty"`
	// Board geographic area in which the data center is located
	Region *string `json:"region,omitempty"`
	// Name of the region in which the data center is located.
	Name *string `json:"name,omitempty"`
	GeoCoordinates *GeoCoordinates `json:"geoCoordinates,omitempty"`
	ConnectedMetros []ConnectedMetro `json:"connectedMetros,omitempty"`
}

// NewMetro instantiates a new Metro object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetro() *Metro {
	this := Metro{}
	return &this
}

// NewMetroWithDefaults instantiates a new Metro object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetroWithDefaults() *Metro {
	this := Metro{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Metro) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Metro) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Metro) SetHref(v string) {
	o.Href = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Metro) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Metro) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Metro) SetType(v string) {
	o.Type = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Metro) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Metro) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Metro) SetCode(v string) {
	o.Code = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Metro) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Metro) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Metro) SetRegion(v string) {
	o.Region = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Metro) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Metro) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Metro) SetName(v string) {
	o.Name = &v
}

// GetGeoCoordinates returns the GeoCoordinates field value if set, zero value otherwise.
func (o *Metro) GetGeoCoordinates() GeoCoordinates {
	if o == nil || o.GeoCoordinates == nil {
		var ret GeoCoordinates
		return ret
	}
	return *o.GeoCoordinates
}

// GetGeoCoordinatesOk returns a tuple with the GeoCoordinates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetGeoCoordinatesOk() (*GeoCoordinates, bool) {
	if o == nil || o.GeoCoordinates == nil {
		return nil, false
	}
	return o.GeoCoordinates, true
}

// HasGeoCoordinates returns a boolean if a field has been set.
func (o *Metro) HasGeoCoordinates() bool {
	if o != nil && o.GeoCoordinates != nil {
		return true
	}

	return false
}

// SetGeoCoordinates gets a reference to the given GeoCoordinates and assigns it to the GeoCoordinates field.
func (o *Metro) SetGeoCoordinates(v GeoCoordinates) {
	o.GeoCoordinates = &v
}

// GetConnectedMetros returns the ConnectedMetros field value if set, zero value otherwise.
func (o *Metro) GetConnectedMetros() []ConnectedMetro {
	if o == nil || o.ConnectedMetros == nil {
		var ret []ConnectedMetro
		return ret
	}
	return o.ConnectedMetros
}

// GetConnectedMetrosOk returns a tuple with the ConnectedMetros field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metro) GetConnectedMetrosOk() ([]ConnectedMetro, bool) {
	if o == nil || o.ConnectedMetros == nil {
		return nil, false
	}
	return o.ConnectedMetros, true
}

// HasConnectedMetros returns a boolean if a field has been set.
func (o *Metro) HasConnectedMetros() bool {
	if o != nil && o.ConnectedMetros != nil {
		return true
	}

	return false
}

// SetConnectedMetros gets a reference to the given []ConnectedMetro and assigns it to the ConnectedMetros field.
func (o *Metro) SetConnectedMetros(v []ConnectedMetro) {
	o.ConnectedMetros = v
}

func (o Metro) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.GeoCoordinates != nil {
		toSerialize["geoCoordinates"] = o.GeoCoordinates
	}
	if o.ConnectedMetros != nil {
		toSerialize["connectedMetros"] = o.ConnectedMetros
	}
	return json.Marshal(toSerialize)
}

type NullableMetro struct {
	value *Metro
	isSet bool
}

func (v NullableMetro) Get() *Metro {
	return v.value
}

func (v *NullableMetro) Set(val *Metro) {
	v.value = val
	v.isSet = true
}

func (v NullableMetro) IsSet() bool {
	return v.isSet
}

func (v *NullableMetro) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetro(val *Metro) *NullableMetro {
	return &NullableMetro{value: val, isSet: true}
}

func (v NullableMetro) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetro) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



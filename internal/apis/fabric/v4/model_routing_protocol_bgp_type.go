/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// RoutingProtocolBGPType struct for RoutingProtocolBGPType
type RoutingProtocolBGPType struct {
	// Routing protocol type
	Type string `json:"type"`
	Name *string `json:"name,omitempty"`
	BgpIpv4 *BGPConnectionIpv4Request `json:"bgpIpv4,omitempty"`
	BgpIpv6 *BGPConnectionIpv6Request `json:"bgpIpv6,omitempty"`
	// Customer asn
	CustomerAsn *int64 `json:"customerAsn,omitempty"`
	// BGP authorization key
	BgpAuthKey *string `json:"bgpAuthKey,omitempty"`
	Bfd *RoutingProtocolBFD `json:"bfd,omitempty"`
}

// NewRoutingProtocolBGPType instantiates a new RoutingProtocolBGPType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolBGPType(type_ string) *RoutingProtocolBGPType {
	this := RoutingProtocolBGPType{}
	this.Type = type_
	return &this
}

// NewRoutingProtocolBGPTypeWithDefaults instantiates a new RoutingProtocolBGPType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolBGPTypeWithDefaults() *RoutingProtocolBGPType {
	this := RoutingProtocolBGPType{}
	return &this
}

// GetType returns the Type field value
func (o *RoutingProtocolBGPType) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBGPType) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RoutingProtocolBGPType) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoutingProtocolBGPType) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBGPType) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoutingProtocolBGPType) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoutingProtocolBGPType) SetName(v string) {
	o.Name = &v
}

// GetBgpIpv4 returns the BgpIpv4 field value if set, zero value otherwise.
func (o *RoutingProtocolBGPType) GetBgpIpv4() BGPConnectionIpv4Request {
	if o == nil || o.BgpIpv4 == nil {
		var ret BGPConnectionIpv4Request
		return ret
	}
	return *o.BgpIpv4
}

// GetBgpIpv4Ok returns a tuple with the BgpIpv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBGPType) GetBgpIpv4Ok() (*BGPConnectionIpv4Request, bool) {
	if o == nil || o.BgpIpv4 == nil {
		return nil, false
	}
	return o.BgpIpv4, true
}

// HasBgpIpv4 returns a boolean if a field has been set.
func (o *RoutingProtocolBGPType) HasBgpIpv4() bool {
	if o != nil && o.BgpIpv4 != nil {
		return true
	}

	return false
}

// SetBgpIpv4 gets a reference to the given BGPConnectionIpv4Request and assigns it to the BgpIpv4 field.
func (o *RoutingProtocolBGPType) SetBgpIpv4(v BGPConnectionIpv4Request) {
	o.BgpIpv4 = &v
}

// GetBgpIpv6 returns the BgpIpv6 field value if set, zero value otherwise.
func (o *RoutingProtocolBGPType) GetBgpIpv6() BGPConnectionIpv6Request {
	if o == nil || o.BgpIpv6 == nil {
		var ret BGPConnectionIpv6Request
		return ret
	}
	return *o.BgpIpv6
}

// GetBgpIpv6Ok returns a tuple with the BgpIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBGPType) GetBgpIpv6Ok() (*BGPConnectionIpv6Request, bool) {
	if o == nil || o.BgpIpv6 == nil {
		return nil, false
	}
	return o.BgpIpv6, true
}

// HasBgpIpv6 returns a boolean if a field has been set.
func (o *RoutingProtocolBGPType) HasBgpIpv6() bool {
	if o != nil && o.BgpIpv6 != nil {
		return true
	}

	return false
}

// SetBgpIpv6 gets a reference to the given BGPConnectionIpv6Request and assigns it to the BgpIpv6 field.
func (o *RoutingProtocolBGPType) SetBgpIpv6(v BGPConnectionIpv6Request) {
	o.BgpIpv6 = &v
}

// GetCustomerAsn returns the CustomerAsn field value if set, zero value otherwise.
func (o *RoutingProtocolBGPType) GetCustomerAsn() int64 {
	if o == nil || o.CustomerAsn == nil {
		var ret int64
		return ret
	}
	return *o.CustomerAsn
}

// GetCustomerAsnOk returns a tuple with the CustomerAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBGPType) GetCustomerAsnOk() (*int64, bool) {
	if o == nil || o.CustomerAsn == nil {
		return nil, false
	}
	return o.CustomerAsn, true
}

// HasCustomerAsn returns a boolean if a field has been set.
func (o *RoutingProtocolBGPType) HasCustomerAsn() bool {
	if o != nil && o.CustomerAsn != nil {
		return true
	}

	return false
}

// SetCustomerAsn gets a reference to the given int64 and assigns it to the CustomerAsn field.
func (o *RoutingProtocolBGPType) SetCustomerAsn(v int64) {
	o.CustomerAsn = &v
}

// GetBgpAuthKey returns the BgpAuthKey field value if set, zero value otherwise.
func (o *RoutingProtocolBGPType) GetBgpAuthKey() string {
	if o == nil || o.BgpAuthKey == nil {
		var ret string
		return ret
	}
	return *o.BgpAuthKey
}

// GetBgpAuthKeyOk returns a tuple with the BgpAuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBGPType) GetBgpAuthKeyOk() (*string, bool) {
	if o == nil || o.BgpAuthKey == nil {
		return nil, false
	}
	return o.BgpAuthKey, true
}

// HasBgpAuthKey returns a boolean if a field has been set.
func (o *RoutingProtocolBGPType) HasBgpAuthKey() bool {
	if o != nil && o.BgpAuthKey != nil {
		return true
	}

	return false
}

// SetBgpAuthKey gets a reference to the given string and assigns it to the BgpAuthKey field.
func (o *RoutingProtocolBGPType) SetBgpAuthKey(v string) {
	o.BgpAuthKey = &v
}

// GetBfd returns the Bfd field value if set, zero value otherwise.
func (o *RoutingProtocolBGPType) GetBfd() RoutingProtocolBFD {
	if o == nil || o.Bfd == nil {
		var ret RoutingProtocolBFD
		return ret
	}
	return *o.Bfd
}

// GetBfdOk returns a tuple with the Bfd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolBGPType) GetBfdOk() (*RoutingProtocolBFD, bool) {
	if o == nil || o.Bfd == nil {
		return nil, false
	}
	return o.Bfd, true
}

// HasBfd returns a boolean if a field has been set.
func (o *RoutingProtocolBGPType) HasBfd() bool {
	if o != nil && o.Bfd != nil {
		return true
	}

	return false
}

// SetBfd gets a reference to the given RoutingProtocolBFD and assigns it to the Bfd field.
func (o *RoutingProtocolBGPType) SetBfd(v RoutingProtocolBFD) {
	o.Bfd = &v
}

func (o RoutingProtocolBGPType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.BgpIpv4 != nil {
		toSerialize["bgpIpv4"] = o.BgpIpv4
	}
	if o.BgpIpv6 != nil {
		toSerialize["bgpIpv6"] = o.BgpIpv6
	}
	if o.CustomerAsn != nil {
		toSerialize["customerAsn"] = o.CustomerAsn
	}
	if o.BgpAuthKey != nil {
		toSerialize["bgpAuthKey"] = o.BgpAuthKey
	}
	if o.Bfd != nil {
		toSerialize["bfd"] = o.Bfd
	}
	return json.Marshal(toSerialize)
}

type NullableRoutingProtocolBGPType struct {
	value *RoutingProtocolBGPType
	isSet bool
}

func (v NullableRoutingProtocolBGPType) Get() *RoutingProtocolBGPType {
	return v.value
}

func (v *NullableRoutingProtocolBGPType) Set(val *RoutingProtocolBGPType) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolBGPType) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolBGPType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolBGPType(val *RoutingProtocolBGPType) *NullableRoutingProtocolBGPType {
	return &NullableRoutingProtocolBGPType{value: val, isSet: true}
}

func (v NullableRoutingProtocolBGPType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolBGPType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectedMetro Arrays of objects containing latency data for the specified metros
type ConnectedMetro struct {
	// The Canonical URL at which the resource resides.
	Href *string `json:"href,omitempty"`
	// Code assigned to an Equinix International Business Exchange (IBX) data center in a specified metropolitan area.
	Code *string `json:"code,omitempty"`
	// Average latency (in milliseconds[ms]) between two specified metros.
	AvgLatency *float32 `json:"avgLatency,omitempty"`
}

// NewConnectedMetro instantiates a new ConnectedMetro object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectedMetro() *ConnectedMetro {
	this := ConnectedMetro{}
	return &this
}

// NewConnectedMetroWithDefaults instantiates a new ConnectedMetro object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectedMetroWithDefaults() *ConnectedMetro {
	this := ConnectedMetro{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ConnectedMetro) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedMetro) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ConnectedMetro) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ConnectedMetro) SetHref(v string) {
	o.Href = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ConnectedMetro) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedMetro) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ConnectedMetro) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ConnectedMetro) SetCode(v string) {
	o.Code = &v
}

// GetAvgLatency returns the AvgLatency field value if set, zero value otherwise.
func (o *ConnectedMetro) GetAvgLatency() float32 {
	if o == nil || o.AvgLatency == nil {
		var ret float32
		return ret
	}
	return *o.AvgLatency
}

// GetAvgLatencyOk returns a tuple with the AvgLatency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectedMetro) GetAvgLatencyOk() (*float32, bool) {
	if o == nil || o.AvgLatency == nil {
		return nil, false
	}
	return o.AvgLatency, true
}

// HasAvgLatency returns a boolean if a field has been set.
func (o *ConnectedMetro) HasAvgLatency() bool {
	if o != nil && o.AvgLatency != nil {
		return true
	}

	return false
}

// SetAvgLatency gets a reference to the given float32 and assigns it to the AvgLatency field.
func (o *ConnectedMetro) SetAvgLatency(v float32) {
	o.AvgLatency = &v
}

func (o ConnectedMetro) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.AvgLatency != nil {
		toSerialize["avgLatency"] = o.AvgLatency
	}
	return json.Marshal(toSerialize)
}

type NullableConnectedMetro struct {
	value *ConnectedMetro
	isSet bool
}

func (v NullableConnectedMetro) Get() *ConnectedMetro {
	return v.value
}

func (v *NullableConnectedMetro) Set(val *ConnectedMetro) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectedMetro) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectedMetro) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectedMetro(val *ConnectedMetro) *NullableConnectedMetro {
	return &NullableConnectedMetro{value: val, isSet: true}
}

func (v NullableConnectedMetro) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectedMetro) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



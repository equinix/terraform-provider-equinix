/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// Port Port specification
type Port struct {
	Type *PortType `json:"type,omitempty"`
	// Port Id
	Id *int32 `json:"id,omitempty"`
	// An absolute URL that is the subject of the link's context.
	Href *string `json:"href,omitempty"`
	// Equinix-assigned port identifier
	Uuid *string `json:"uuid,omitempty"`
	// Port name
	Name *string `json:"name,omitempty"`
	// Port description
	Description *string `json:"description,omitempty"`
	State *PortState `json:"state,omitempty"`
	Order *Order `json:"order,omitempty"`
	// Unique ID for a virtual port.
	CvpId *string `json:"cvpId,omitempty"`
	Operation *PortOperation `json:"operation,omitempty"`
	Account *SimplifiedAccount `json:"account,omitempty"`
	Changelog *Changelog `json:"changelog,omitempty"`
	// Port service Type
	ServiceType *string `json:"serviceType,omitempty"`
	// Port bandwidth in Mbps
	Bandwidth *int32 `json:"bandwidth,omitempty"`
	// Port available bandwidth in Mbps
	AvailableBandwidth *int32 `json:"availableBandwidth,omitempty"`
	// Port used bandwidth in Mbps
	UsedBandwidth *int32 `json:"usedBandwidth,omitempty"`
	Location *SimplifiedLocation `json:"location,omitempty"`
	Device *PortDevice `json:"device,omitempty"`
	Interface *PortInterface `json:"interface,omitempty"`
	Tether *PortTether `json:"tether,omitempty"`
	Redundancy *PortRedundancy `json:"redundancy,omitempty"`
	Encapsulation *PortEncapsulation `json:"encapsulation,omitempty"`
	Lag *PortLAG `json:"lag,omitempty"`
	// Port ASN
	Asn *int32 `json:"asn,omitempty"`
	Settings *PortSettings `json:"settings,omitempty"`
	// Number of physical ports
	PhysicalPortQuantity *int32 `json:"physicalPortQuantity,omitempty"`
	// Physical ports that implement this port
	PhysicalPorts []Port `json:"physicalPorts,omitempty"`
}

// NewPort instantiates a new Port object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPort() *Port {
	this := Port{}
	return &this
}

// NewPortWithDefaults instantiates a new Port object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPortWithDefaults() *Port {
	this := Port{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Port) GetType() PortType {
	if o == nil || o.Type == nil {
		var ret PortType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetTypeOk() (*PortType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Port) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given PortType and assigns it to the Type field.
func (o *Port) SetType(v PortType) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Port) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetIdOk() (*int32, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Port) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Port) SetId(v int32) {
	o.Id = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *Port) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *Port) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *Port) SetHref(v string) {
	o.Href = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *Port) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *Port) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *Port) SetUuid(v string) {
	o.Uuid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Port) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Port) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Port) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Port) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Port) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Port) SetDescription(v string) {
	o.Description = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Port) GetState() PortState {
	if o == nil || o.State == nil {
		var ret PortState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetStateOk() (*PortState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Port) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given PortState and assigns it to the State field.
func (o *Port) SetState(v PortState) {
	o.State = &v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *Port) GetOrder() Order {
	if o == nil || o.Order == nil {
		var ret Order
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetOrderOk() (*Order, bool) {
	if o == nil || o.Order == nil {
		return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *Port) HasOrder() bool {
	if o != nil && o.Order != nil {
		return true
	}

	return false
}

// SetOrder gets a reference to the given Order and assigns it to the Order field.
func (o *Port) SetOrder(v Order) {
	o.Order = &v
}

// GetCvpId returns the CvpId field value if set, zero value otherwise.
func (o *Port) GetCvpId() string {
	if o == nil || o.CvpId == nil {
		var ret string
		return ret
	}
	return *o.CvpId
}

// GetCvpIdOk returns a tuple with the CvpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetCvpIdOk() (*string, bool) {
	if o == nil || o.CvpId == nil {
		return nil, false
	}
	return o.CvpId, true
}

// HasCvpId returns a boolean if a field has been set.
func (o *Port) HasCvpId() bool {
	if o != nil && o.CvpId != nil {
		return true
	}

	return false
}

// SetCvpId gets a reference to the given string and assigns it to the CvpId field.
func (o *Port) SetCvpId(v string) {
	o.CvpId = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *Port) GetOperation() PortOperation {
	if o == nil || o.Operation == nil {
		var ret PortOperation
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetOperationOk() (*PortOperation, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *Port) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given PortOperation and assigns it to the Operation field.
func (o *Port) SetOperation(v PortOperation) {
	o.Operation = &v
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *Port) GetAccount() SimplifiedAccount {
	if o == nil || o.Account == nil {
		var ret SimplifiedAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetAccountOk() (*SimplifiedAccount, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *Port) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SimplifiedAccount and assigns it to the Account field.
func (o *Port) SetAccount(v SimplifiedAccount) {
	o.Account = &v
}

// GetChangelog returns the Changelog field value if set, zero value otherwise.
func (o *Port) GetChangelog() Changelog {
	if o == nil || o.Changelog == nil {
		var ret Changelog
		return ret
	}
	return *o.Changelog
}

// GetChangelogOk returns a tuple with the Changelog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetChangelogOk() (*Changelog, bool) {
	if o == nil || o.Changelog == nil {
		return nil, false
	}
	return o.Changelog, true
}

// HasChangelog returns a boolean if a field has been set.
func (o *Port) HasChangelog() bool {
	if o != nil && o.Changelog != nil {
		return true
	}

	return false
}

// SetChangelog gets a reference to the given Changelog and assigns it to the Changelog field.
func (o *Port) SetChangelog(v Changelog) {
	o.Changelog = &v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise.
func (o *Port) GetServiceType() string {
	if o == nil || o.ServiceType == nil {
		var ret string
		return ret
	}
	return *o.ServiceType
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetServiceTypeOk() (*string, bool) {
	if o == nil || o.ServiceType == nil {
		return nil, false
	}
	return o.ServiceType, true
}

// HasServiceType returns a boolean if a field has been set.
func (o *Port) HasServiceType() bool {
	if o != nil && o.ServiceType != nil {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given string and assigns it to the ServiceType field.
func (o *Port) SetServiceType(v string) {
	o.ServiceType = &v
}

// GetBandwidth returns the Bandwidth field value if set, zero value otherwise.
func (o *Port) GetBandwidth() int32 {
	if o == nil || o.Bandwidth == nil {
		var ret int32
		return ret
	}
	return *o.Bandwidth
}

// GetBandwidthOk returns a tuple with the Bandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetBandwidthOk() (*int32, bool) {
	if o == nil || o.Bandwidth == nil {
		return nil, false
	}
	return o.Bandwidth, true
}

// HasBandwidth returns a boolean if a field has been set.
func (o *Port) HasBandwidth() bool {
	if o != nil && o.Bandwidth != nil {
		return true
	}

	return false
}

// SetBandwidth gets a reference to the given int32 and assigns it to the Bandwidth field.
func (o *Port) SetBandwidth(v int32) {
	o.Bandwidth = &v
}

// GetAvailableBandwidth returns the AvailableBandwidth field value if set, zero value otherwise.
func (o *Port) GetAvailableBandwidth() int32 {
	if o == nil || o.AvailableBandwidth == nil {
		var ret int32
		return ret
	}
	return *o.AvailableBandwidth
}

// GetAvailableBandwidthOk returns a tuple with the AvailableBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetAvailableBandwidthOk() (*int32, bool) {
	if o == nil || o.AvailableBandwidth == nil {
		return nil, false
	}
	return o.AvailableBandwidth, true
}

// HasAvailableBandwidth returns a boolean if a field has been set.
func (o *Port) HasAvailableBandwidth() bool {
	if o != nil && o.AvailableBandwidth != nil {
		return true
	}

	return false
}

// SetAvailableBandwidth gets a reference to the given int32 and assigns it to the AvailableBandwidth field.
func (o *Port) SetAvailableBandwidth(v int32) {
	o.AvailableBandwidth = &v
}

// GetUsedBandwidth returns the UsedBandwidth field value if set, zero value otherwise.
func (o *Port) GetUsedBandwidth() int32 {
	if o == nil || o.UsedBandwidth == nil {
		var ret int32
		return ret
	}
	return *o.UsedBandwidth
}

// GetUsedBandwidthOk returns a tuple with the UsedBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetUsedBandwidthOk() (*int32, bool) {
	if o == nil || o.UsedBandwidth == nil {
		return nil, false
	}
	return o.UsedBandwidth, true
}

// HasUsedBandwidth returns a boolean if a field has been set.
func (o *Port) HasUsedBandwidth() bool {
	if o != nil && o.UsedBandwidth != nil {
		return true
	}

	return false
}

// SetUsedBandwidth gets a reference to the given int32 and assigns it to the UsedBandwidth field.
func (o *Port) SetUsedBandwidth(v int32) {
	o.UsedBandwidth = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Port) GetLocation() SimplifiedLocation {
	if o == nil || o.Location == nil {
		var ret SimplifiedLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetLocationOk() (*SimplifiedLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Port) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given SimplifiedLocation and assigns it to the Location field.
func (o *Port) SetLocation(v SimplifiedLocation) {
	o.Location = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Port) GetDevice() PortDevice {
	if o == nil || o.Device == nil {
		var ret PortDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetDeviceOk() (*PortDevice, bool) {
	if o == nil || o.Device == nil {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Port) HasDevice() bool {
	if o != nil && o.Device != nil {
		return true
	}

	return false
}

// SetDevice gets a reference to the given PortDevice and assigns it to the Device field.
func (o *Port) SetDevice(v PortDevice) {
	o.Device = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *Port) GetInterface() PortInterface {
	if o == nil || o.Interface == nil {
		var ret PortInterface
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetInterfaceOk() (*PortInterface, bool) {
	if o == nil || o.Interface == nil {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *Port) HasInterface() bool {
	if o != nil && o.Interface != nil {
		return true
	}

	return false
}

// SetInterface gets a reference to the given PortInterface and assigns it to the Interface field.
func (o *Port) SetInterface(v PortInterface) {
	o.Interface = &v
}

// GetTether returns the Tether field value if set, zero value otherwise.
func (o *Port) GetTether() PortTether {
	if o == nil || o.Tether == nil {
		var ret PortTether
		return ret
	}
	return *o.Tether
}

// GetTetherOk returns a tuple with the Tether field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetTetherOk() (*PortTether, bool) {
	if o == nil || o.Tether == nil {
		return nil, false
	}
	return o.Tether, true
}

// HasTether returns a boolean if a field has been set.
func (o *Port) HasTether() bool {
	if o != nil && o.Tether != nil {
		return true
	}

	return false
}

// SetTether gets a reference to the given PortTether and assigns it to the Tether field.
func (o *Port) SetTether(v PortTether) {
	o.Tether = &v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *Port) GetRedundancy() PortRedundancy {
	if o == nil || o.Redundancy == nil {
		var ret PortRedundancy
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetRedundancyOk() (*PortRedundancy, bool) {
	if o == nil || o.Redundancy == nil {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *Port) HasRedundancy() bool {
	if o != nil && o.Redundancy != nil {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given PortRedundancy and assigns it to the Redundancy field.
func (o *Port) SetRedundancy(v PortRedundancy) {
	o.Redundancy = &v
}

// GetEncapsulation returns the Encapsulation field value if set, zero value otherwise.
func (o *Port) GetEncapsulation() PortEncapsulation {
	if o == nil || o.Encapsulation == nil {
		var ret PortEncapsulation
		return ret
	}
	return *o.Encapsulation
}

// GetEncapsulationOk returns a tuple with the Encapsulation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetEncapsulationOk() (*PortEncapsulation, bool) {
	if o == nil || o.Encapsulation == nil {
		return nil, false
	}
	return o.Encapsulation, true
}

// HasEncapsulation returns a boolean if a field has been set.
func (o *Port) HasEncapsulation() bool {
	if o != nil && o.Encapsulation != nil {
		return true
	}

	return false
}

// SetEncapsulation gets a reference to the given PortEncapsulation and assigns it to the Encapsulation field.
func (o *Port) SetEncapsulation(v PortEncapsulation) {
	o.Encapsulation = &v
}

// GetLag returns the Lag field value if set, zero value otherwise.
func (o *Port) GetLag() PortLAG {
	if o == nil || o.Lag == nil {
		var ret PortLAG
		return ret
	}
	return *o.Lag
}

// GetLagOk returns a tuple with the Lag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetLagOk() (*PortLAG, bool) {
	if o == nil || o.Lag == nil {
		return nil, false
	}
	return o.Lag, true
}

// HasLag returns a boolean if a field has been set.
func (o *Port) HasLag() bool {
	if o != nil && o.Lag != nil {
		return true
	}

	return false
}

// SetLag gets a reference to the given PortLAG and assigns it to the Lag field.
func (o *Port) SetLag(v PortLAG) {
	o.Lag = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *Port) GetAsn() int32 {
	if o == nil || o.Asn == nil {
		var ret int32
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetAsnOk() (*int32, bool) {
	if o == nil || o.Asn == nil {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *Port) HasAsn() bool {
	if o != nil && o.Asn != nil {
		return true
	}

	return false
}

// SetAsn gets a reference to the given int32 and assigns it to the Asn field.
func (o *Port) SetAsn(v int32) {
	o.Asn = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *Port) GetSettings() PortSettings {
	if o == nil || o.Settings == nil {
		var ret PortSettings
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetSettingsOk() (*PortSettings, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *Port) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given PortSettings and assigns it to the Settings field.
func (o *Port) SetSettings(v PortSettings) {
	o.Settings = &v
}

// GetPhysicalPortQuantity returns the PhysicalPortQuantity field value if set, zero value otherwise.
func (o *Port) GetPhysicalPortQuantity() int32 {
	if o == nil || o.PhysicalPortQuantity == nil {
		var ret int32
		return ret
	}
	return *o.PhysicalPortQuantity
}

// GetPhysicalPortQuantityOk returns a tuple with the PhysicalPortQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetPhysicalPortQuantityOk() (*int32, bool) {
	if o == nil || o.PhysicalPortQuantity == nil {
		return nil, false
	}
	return o.PhysicalPortQuantity, true
}

// HasPhysicalPortQuantity returns a boolean if a field has been set.
func (o *Port) HasPhysicalPortQuantity() bool {
	if o != nil && o.PhysicalPortQuantity != nil {
		return true
	}

	return false
}

// SetPhysicalPortQuantity gets a reference to the given int32 and assigns it to the PhysicalPortQuantity field.
func (o *Port) SetPhysicalPortQuantity(v int32) {
	o.PhysicalPortQuantity = &v
}

// GetPhysicalPorts returns the PhysicalPorts field value if set, zero value otherwise.
func (o *Port) GetPhysicalPorts() []Port {
	if o == nil || o.PhysicalPorts == nil {
		var ret []Port
		return ret
	}
	return o.PhysicalPorts
}

// GetPhysicalPortsOk returns a tuple with the PhysicalPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Port) GetPhysicalPortsOk() ([]Port, bool) {
	if o == nil || o.PhysicalPorts == nil {
		return nil, false
	}
	return o.PhysicalPorts, true
}

// HasPhysicalPorts returns a boolean if a field has been set.
func (o *Port) HasPhysicalPorts() bool {
	if o != nil && o.PhysicalPorts != nil {
		return true
	}

	return false
}

// SetPhysicalPorts gets a reference to the given []Port and assigns it to the PhysicalPorts field.
func (o *Port) SetPhysicalPorts(v []Port) {
	o.PhysicalPorts = v
}

func (o Port) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Order != nil {
		toSerialize["order"] = o.Order
	}
	if o.CvpId != nil {
		toSerialize["cvpId"] = o.CvpId
	}
	if o.Operation != nil {
		toSerialize["operation"] = o.Operation
	}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Changelog != nil {
		toSerialize["changelog"] = o.Changelog
	}
	if o.ServiceType != nil {
		toSerialize["serviceType"] = o.ServiceType
	}
	if o.Bandwidth != nil {
		toSerialize["bandwidth"] = o.Bandwidth
	}
	if o.AvailableBandwidth != nil {
		toSerialize["availableBandwidth"] = o.AvailableBandwidth
	}
	if o.UsedBandwidth != nil {
		toSerialize["usedBandwidth"] = o.UsedBandwidth
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Device != nil {
		toSerialize["device"] = o.Device
	}
	if o.Interface != nil {
		toSerialize["interface"] = o.Interface
	}
	if o.Tether != nil {
		toSerialize["tether"] = o.Tether
	}
	if o.Redundancy != nil {
		toSerialize["redundancy"] = o.Redundancy
	}
	if o.Encapsulation != nil {
		toSerialize["encapsulation"] = o.Encapsulation
	}
	if o.Lag != nil {
		toSerialize["lag"] = o.Lag
	}
	if o.Asn != nil {
		toSerialize["asn"] = o.Asn
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if o.PhysicalPortQuantity != nil {
		toSerialize["physicalPortQuantity"] = o.PhysicalPortQuantity
	}
	if o.PhysicalPorts != nil {
		toSerialize["physicalPorts"] = o.PhysicalPorts
	}
	return json.Marshal(toSerialize)
}

type NullablePort struct {
	value *Port
	isSet bool
}

func (v NullablePort) Get() *Port {
	return v.value
}

func (v *NullablePort) Set(val *Port) {
	v.value = val
	v.isSet = true
}

func (v NullablePort) IsSet() bool {
	return v.isSet
}

func (v *NullablePort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePort(val *Port) *NullablePort {
	return &NullablePort{value: val, isSet: true}
}

func (v NullablePort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



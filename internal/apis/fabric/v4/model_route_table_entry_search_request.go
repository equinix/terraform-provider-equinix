/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// RouteTableEntrySearchRequest Search requests containing criteria
type RouteTableEntrySearchRequest struct {
	Filter *RouteTableEntryFilters `json:"filter,omitempty"`
	Pagination *PaginationRequest `json:"pagination,omitempty"`
	Sort []RouteTableEntrySortCriteria `json:"sort,omitempty"`
}

// NewRouteTableEntrySearchRequest instantiates a new RouteTableEntrySearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteTableEntrySearchRequest() *RouteTableEntrySearchRequest {
	this := RouteTableEntrySearchRequest{}
	return &this
}

// NewRouteTableEntrySearchRequestWithDefaults instantiates a new RouteTableEntrySearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteTableEntrySearchRequestWithDefaults() *RouteTableEntrySearchRequest {
	this := RouteTableEntrySearchRequest{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *RouteTableEntrySearchRequest) GetFilter() RouteTableEntryFilters {
	if o == nil || o.Filter == nil {
		var ret RouteTableEntryFilters
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntrySearchRequest) GetFilterOk() (*RouteTableEntryFilters, bool) {
	if o == nil || o.Filter == nil {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *RouteTableEntrySearchRequest) HasFilter() bool {
	if o != nil && o.Filter != nil {
		return true
	}

	return false
}

// SetFilter gets a reference to the given RouteTableEntryFilters and assigns it to the Filter field.
func (o *RouteTableEntrySearchRequest) SetFilter(v RouteTableEntryFilters) {
	o.Filter = &v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *RouteTableEntrySearchRequest) GetPagination() PaginationRequest {
	if o == nil || o.Pagination == nil {
		var ret PaginationRequest
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntrySearchRequest) GetPaginationOk() (*PaginationRequest, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *RouteTableEntrySearchRequest) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given PaginationRequest and assigns it to the Pagination field.
func (o *RouteTableEntrySearchRequest) SetPagination(v PaginationRequest) {
	o.Pagination = &v
}

// GetSort returns the Sort field value if set, zero value otherwise.
func (o *RouteTableEntrySearchRequest) GetSort() []RouteTableEntrySortCriteria {
	if o == nil || o.Sort == nil {
		var ret []RouteTableEntrySortCriteria
		return ret
	}
	return o.Sort
}

// GetSortOk returns a tuple with the Sort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntrySearchRequest) GetSortOk() ([]RouteTableEntrySortCriteria, bool) {
	if o == nil || o.Sort == nil {
		return nil, false
	}
	return o.Sort, true
}

// HasSort returns a boolean if a field has been set.
func (o *RouteTableEntrySearchRequest) HasSort() bool {
	if o != nil && o.Sort != nil {
		return true
	}

	return false
}

// SetSort gets a reference to the given []RouteTableEntrySortCriteria and assigns it to the Sort field.
func (o *RouteTableEntrySearchRequest) SetSort(v []RouteTableEntrySortCriteria) {
	o.Sort = v
}

func (o RouteTableEntrySearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Filter != nil {
		toSerialize["filter"] = o.Filter
	}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	if o.Sort != nil {
		toSerialize["sort"] = o.Sort
	}
	return json.Marshal(toSerialize)
}

type NullableRouteTableEntrySearchRequest struct {
	value *RouteTableEntrySearchRequest
	isSet bool
}

func (v NullableRouteTableEntrySearchRequest) Get() *RouteTableEntrySearchRequest {
	return v.value
}

func (v *NullableRouteTableEntrySearchRequest) Set(val *RouteTableEntrySearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteTableEntrySearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteTableEntrySearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteTableEntrySearchRequest(val *RouteTableEntrySearchRequest) *NullableRouteTableEntrySearchRequest {
	return &NullableRouteTableEntrySearchRequest{value: val, isSet: true}
}

func (v NullableRouteTableEntrySearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteTableEntrySearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// SimplifiedNotification struct for SimplifiedNotification
type SimplifiedNotification struct {
	// Notification Type
	Type string `json:"type"`
	SendInterval *string `json:"sendInterval,omitempty"`
	// Array of contact emails
	Emails []string `json:"emails"`
}

// NewSimplifiedNotification instantiates a new SimplifiedNotification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSimplifiedNotification(type_ string, emails []string) *SimplifiedNotification {
	this := SimplifiedNotification{}
	this.Type = type_
	this.Emails = emails
	return &this
}

// NewSimplifiedNotificationWithDefaults instantiates a new SimplifiedNotification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSimplifiedNotificationWithDefaults() *SimplifiedNotification {
	this := SimplifiedNotification{}
	return &this
}

// GetType returns the Type field value
func (o *SimplifiedNotification) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SimplifiedNotification) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SimplifiedNotification) SetType(v string) {
	o.Type = v
}

// GetSendInterval returns the SendInterval field value if set, zero value otherwise.
func (o *SimplifiedNotification) GetSendInterval() string {
	if o == nil || o.SendInterval == nil {
		var ret string
		return ret
	}
	return *o.SendInterval
}

// GetSendIntervalOk returns a tuple with the SendInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SimplifiedNotification) GetSendIntervalOk() (*string, bool) {
	if o == nil || o.SendInterval == nil {
		return nil, false
	}
	return o.SendInterval, true
}

// HasSendInterval returns a boolean if a field has been set.
func (o *SimplifiedNotification) HasSendInterval() bool {
	if o != nil && o.SendInterval != nil {
		return true
	}

	return false
}

// SetSendInterval gets a reference to the given string and assigns it to the SendInterval field.
func (o *SimplifiedNotification) SetSendInterval(v string) {
	o.SendInterval = &v
}

// GetEmails returns the Emails field value
func (o *SimplifiedNotification) GetEmails() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value
// and a boolean to check if the value has been set.
func (o *SimplifiedNotification) GetEmailsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Emails, true
}

// SetEmails sets field value
func (o *SimplifiedNotification) SetEmails(v []string) {
	o.Emails = v
}

func (o SimplifiedNotification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.SendInterval != nil {
		toSerialize["sendInterval"] = o.SendInterval
	}
	if true {
		toSerialize["emails"] = o.Emails
	}
	return json.Marshal(toSerialize)
}

type NullableSimplifiedNotification struct {
	value *SimplifiedNotification
	isSet bool
}

func (v NullableSimplifiedNotification) Get() *SimplifiedNotification {
	return v.value
}

func (v *NullableSimplifiedNotification) Set(val *SimplifiedNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableSimplifiedNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableSimplifiedNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSimplifiedNotification(val *SimplifiedNotification) *NullableSimplifiedNotification {
	return &NullableSimplifiedNotification{value: val, isSet: true}
}

func (v NullableSimplifiedNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSimplifiedNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



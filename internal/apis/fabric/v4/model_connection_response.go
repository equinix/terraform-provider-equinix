/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionResponse ValidateResponse
type ConnectionResponse struct {
	// Additional information
	AdditionalInfo []ConnectionSideAdditionalInfo `json:"additionalInfo,omitempty"`
	// Connection response data
	Data []Connection `json:"data,omitempty"`
}

// NewConnectionResponse instantiates a new ConnectionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionResponse() *ConnectionResponse {
	this := ConnectionResponse{}
	return &this
}

// NewConnectionResponseWithDefaults instantiates a new ConnectionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionResponseWithDefaults() *ConnectionResponse {
	this := ConnectionResponse{}
	return &this
}

// GetAdditionalInfo returns the AdditionalInfo field value if set, zero value otherwise.
func (o *ConnectionResponse) GetAdditionalInfo() []ConnectionSideAdditionalInfo {
	if o == nil || o.AdditionalInfo == nil {
		var ret []ConnectionSideAdditionalInfo
		return ret
	}
	return o.AdditionalInfo
}

// GetAdditionalInfoOk returns a tuple with the AdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionResponse) GetAdditionalInfoOk() ([]ConnectionSideAdditionalInfo, bool) {
	if o == nil || o.AdditionalInfo == nil {
		return nil, false
	}
	return o.AdditionalInfo, true
}

// HasAdditionalInfo returns a boolean if a field has been set.
func (o *ConnectionResponse) HasAdditionalInfo() bool {
	if o != nil && o.AdditionalInfo != nil {
		return true
	}

	return false
}

// SetAdditionalInfo gets a reference to the given []ConnectionSideAdditionalInfo and assigns it to the AdditionalInfo field.
func (o *ConnectionResponse) SetAdditionalInfo(v []ConnectionSideAdditionalInfo) {
	o.AdditionalInfo = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *ConnectionResponse) GetData() []Connection {
	if o == nil || o.Data == nil {
		var ret []Connection
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionResponse) GetDataOk() ([]Connection, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *ConnectionResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []Connection and assigns it to the Data field.
func (o *ConnectionResponse) SetData(v []Connection) {
	o.Data = v
}

func (o ConnectionResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalInfo != nil {
		toSerialize["additionalInfo"] = o.AdditionalInfo
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionResponse struct {
	value *ConnectionResponse
	isSet bool
}

func (v NullableConnectionResponse) Get() *ConnectionResponse {
	return v.value
}

func (v *NullableConnectionResponse) Set(val *ConnectionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionResponse(val *ConnectionResponse) *NullableConnectionResponse {
	return &NullableConnectionResponse{value: val, isSet: true}
}

func (v NullableConnectionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



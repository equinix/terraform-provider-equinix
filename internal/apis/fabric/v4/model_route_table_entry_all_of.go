/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// RouteTableEntryAllOf struct for RouteTableEntryAllOf
type RouteTableEntryAllOf struct {
	Type RouteTableEntryType `json:"type"`
	State RouteTableEntryState `json:"state"`
	Age *string `json:"age,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	NextHop *string `json:"nextHop,omitempty"`
	Metric *int32 `json:"metric,omitempty"`
	LocalPreference *int32 `json:"localPreference,omitempty"`
	AsPath []int32 `json:"asPath,omitempty"`
	Connection *RouteTableEntryConnection `json:"connection,omitempty"`
	ChangeLog Changelog `json:"changeLog"`
}

// NewRouteTableEntryAllOf instantiates a new RouteTableEntryAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteTableEntryAllOf(type_ RouteTableEntryType, state RouteTableEntryState, changeLog Changelog) *RouteTableEntryAllOf {
	this := RouteTableEntryAllOf{}
	this.Type = type_
	this.State = state
	this.ChangeLog = changeLog
	return &this
}

// NewRouteTableEntryAllOfWithDefaults instantiates a new RouteTableEntryAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteTableEntryAllOfWithDefaults() *RouteTableEntryAllOf {
	this := RouteTableEntryAllOf{}
	return &this
}

// GetType returns the Type field value
func (o *RouteTableEntryAllOf) GetType() RouteTableEntryType {
	if o == nil {
		var ret RouteTableEntryType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetTypeOk() (*RouteTableEntryType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RouteTableEntryAllOf) SetType(v RouteTableEntryType) {
	o.Type = v
}

// GetState returns the State field value
func (o *RouteTableEntryAllOf) GetState() RouteTableEntryState {
	if o == nil {
		var ret RouteTableEntryState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetStateOk() (*RouteTableEntryState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *RouteTableEntryAllOf) SetState(v RouteTableEntryState) {
	o.State = v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *RouteTableEntryAllOf) GetAge() string {
	if o == nil || o.Age == nil {
		var ret string
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetAgeOk() (*string, bool) {
	if o == nil || o.Age == nil {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *RouteTableEntryAllOf) HasAge() bool {
	if o != nil && o.Age != nil {
		return true
	}

	return false
}

// SetAge gets a reference to the given string and assigns it to the Age field.
func (o *RouteTableEntryAllOf) SetAge(v string) {
	o.Age = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *RouteTableEntryAllOf) GetPrefix() string {
	if o == nil || o.Prefix == nil {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetPrefixOk() (*string, bool) {
	if o == nil || o.Prefix == nil {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *RouteTableEntryAllOf) HasPrefix() bool {
	if o != nil && o.Prefix != nil {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *RouteTableEntryAllOf) SetPrefix(v string) {
	o.Prefix = &v
}

// GetNextHop returns the NextHop field value if set, zero value otherwise.
func (o *RouteTableEntryAllOf) GetNextHop() string {
	if o == nil || o.NextHop == nil {
		var ret string
		return ret
	}
	return *o.NextHop
}

// GetNextHopOk returns a tuple with the NextHop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetNextHopOk() (*string, bool) {
	if o == nil || o.NextHop == nil {
		return nil, false
	}
	return o.NextHop, true
}

// HasNextHop returns a boolean if a field has been set.
func (o *RouteTableEntryAllOf) HasNextHop() bool {
	if o != nil && o.NextHop != nil {
		return true
	}

	return false
}

// SetNextHop gets a reference to the given string and assigns it to the NextHop field.
func (o *RouteTableEntryAllOf) SetNextHop(v string) {
	o.NextHop = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *RouteTableEntryAllOf) GetMetric() int32 {
	if o == nil || o.Metric == nil {
		var ret int32
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetMetricOk() (*int32, bool) {
	if o == nil || o.Metric == nil {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *RouteTableEntryAllOf) HasMetric() bool {
	if o != nil && o.Metric != nil {
		return true
	}

	return false
}

// SetMetric gets a reference to the given int32 and assigns it to the Metric field.
func (o *RouteTableEntryAllOf) SetMetric(v int32) {
	o.Metric = &v
}

// GetLocalPreference returns the LocalPreference field value if set, zero value otherwise.
func (o *RouteTableEntryAllOf) GetLocalPreference() int32 {
	if o == nil || o.LocalPreference == nil {
		var ret int32
		return ret
	}
	return *o.LocalPreference
}

// GetLocalPreferenceOk returns a tuple with the LocalPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetLocalPreferenceOk() (*int32, bool) {
	if o == nil || o.LocalPreference == nil {
		return nil, false
	}
	return o.LocalPreference, true
}

// HasLocalPreference returns a boolean if a field has been set.
func (o *RouteTableEntryAllOf) HasLocalPreference() bool {
	if o != nil && o.LocalPreference != nil {
		return true
	}

	return false
}

// SetLocalPreference gets a reference to the given int32 and assigns it to the LocalPreference field.
func (o *RouteTableEntryAllOf) SetLocalPreference(v int32) {
	o.LocalPreference = &v
}

// GetAsPath returns the AsPath field value if set, zero value otherwise.
func (o *RouteTableEntryAllOf) GetAsPath() []int32 {
	if o == nil || o.AsPath == nil {
		var ret []int32
		return ret
	}
	return o.AsPath
}

// GetAsPathOk returns a tuple with the AsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetAsPathOk() ([]int32, bool) {
	if o == nil || o.AsPath == nil {
		return nil, false
	}
	return o.AsPath, true
}

// HasAsPath returns a boolean if a field has been set.
func (o *RouteTableEntryAllOf) HasAsPath() bool {
	if o != nil && o.AsPath != nil {
		return true
	}

	return false
}

// SetAsPath gets a reference to the given []int32 and assigns it to the AsPath field.
func (o *RouteTableEntryAllOf) SetAsPath(v []int32) {
	o.AsPath = v
}

// GetConnection returns the Connection field value if set, zero value otherwise.
func (o *RouteTableEntryAllOf) GetConnection() RouteTableEntryConnection {
	if o == nil || o.Connection == nil {
		var ret RouteTableEntryConnection
		return ret
	}
	return *o.Connection
}

// GetConnectionOk returns a tuple with the Connection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetConnectionOk() (*RouteTableEntryConnection, bool) {
	if o == nil || o.Connection == nil {
		return nil, false
	}
	return o.Connection, true
}

// HasConnection returns a boolean if a field has been set.
func (o *RouteTableEntryAllOf) HasConnection() bool {
	if o != nil && o.Connection != nil {
		return true
	}

	return false
}

// SetConnection gets a reference to the given RouteTableEntryConnection and assigns it to the Connection field.
func (o *RouteTableEntryAllOf) SetConnection(v RouteTableEntryConnection) {
	o.Connection = &v
}

// GetChangeLog returns the ChangeLog field value
func (o *RouteTableEntryAllOf) GetChangeLog() Changelog {
	if o == nil {
		var ret Changelog
		return ret
	}

	return o.ChangeLog
}

// GetChangeLogOk returns a tuple with the ChangeLog field value
// and a boolean to check if the value has been set.
func (o *RouteTableEntryAllOf) GetChangeLogOk() (*Changelog, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangeLog, true
}

// SetChangeLog sets field value
func (o *RouteTableEntryAllOf) SetChangeLog(v Changelog) {
	o.ChangeLog = v
}

func (o RouteTableEntryAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["state"] = o.State
	}
	if o.Age != nil {
		toSerialize["age"] = o.Age
	}
	if o.Prefix != nil {
		toSerialize["prefix"] = o.Prefix
	}
	if o.NextHop != nil {
		toSerialize["nextHop"] = o.NextHop
	}
	if o.Metric != nil {
		toSerialize["metric"] = o.Metric
	}
	if o.LocalPreference != nil {
		toSerialize["localPreference"] = o.LocalPreference
	}
	if o.AsPath != nil {
		toSerialize["asPath"] = o.AsPath
	}
	if o.Connection != nil {
		toSerialize["connection"] = o.Connection
	}
	if true {
		toSerialize["changeLog"] = o.ChangeLog
	}
	return json.Marshal(toSerialize)
}

type NullableRouteTableEntryAllOf struct {
	value *RouteTableEntryAllOf
	isSet bool
}

func (v NullableRouteTableEntryAllOf) Get() *RouteTableEntryAllOf {
	return v.value
}

func (v *NullableRouteTableEntryAllOf) Set(val *RouteTableEntryAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteTableEntryAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteTableEntryAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteTableEntryAllOf(val *RouteTableEntryAllOf) *NullableRouteTableEntryAllOf {
	return &NullableRouteTableEntryAllOf{value: val, isSet: true}
}

func (v NullableRouteTableEntryAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteTableEntryAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



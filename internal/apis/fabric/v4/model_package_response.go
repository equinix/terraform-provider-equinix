/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// PackageResponse struct for PackageResponse
type PackageResponse struct {
	Pagination *Pagination `json:"pagination,omitempty"`
	// Data returned from the API call.
	Data []VirtualGatewayPackage `json:"data,omitempty"`
}

// NewPackageResponse instantiates a new PackageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageResponse() *PackageResponse {
	this := PackageResponse{}
	return &this
}

// NewPackageResponseWithDefaults instantiates a new PackageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageResponseWithDefaults() *PackageResponse {
	this := PackageResponse{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *PackageResponse) GetPagination() Pagination {
	if o == nil || o.Pagination == nil {
		var ret Pagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageResponse) GetPaginationOk() (*Pagination, bool) {
	if o == nil || o.Pagination == nil {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *PackageResponse) HasPagination() bool {
	if o != nil && o.Pagination != nil {
		return true
	}

	return false
}

// SetPagination gets a reference to the given Pagination and assigns it to the Pagination field.
func (o *PackageResponse) SetPagination(v Pagination) {
	o.Pagination = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PackageResponse) GetData() []VirtualGatewayPackage {
	if o == nil || o.Data == nil {
		var ret []VirtualGatewayPackage
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageResponse) GetDataOk() ([]VirtualGatewayPackage, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PackageResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []VirtualGatewayPackage and assigns it to the Data field.
func (o *PackageResponse) SetData(v []VirtualGatewayPackage) {
	o.Data = v
}

func (o PackageResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pagination != nil {
		toSerialize["pagination"] = o.Pagination
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullablePackageResponse struct {
	value *PackageResponse
	isSet bool
}

func (v NullablePackageResponse) Get() *PackageResponse {
	return v.value
}

func (v *NullablePackageResponse) Set(val *PackageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageResponse(val *PackageResponse) *NullablePackageResponse {
	return &NullablePackageResponse{value: val, isSet: true}
}

func (v NullablePackageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



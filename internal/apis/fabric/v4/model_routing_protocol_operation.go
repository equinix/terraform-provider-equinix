/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// RoutingProtocolOperation struct for RoutingProtocolOperation
type RoutingProtocolOperation struct {
	Errors []Error `json:"errors,omitempty"`
}

// NewRoutingProtocolOperation instantiates a new RoutingProtocolOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingProtocolOperation() *RoutingProtocolOperation {
	this := RoutingProtocolOperation{}
	return &this
}

// NewRoutingProtocolOperationWithDefaults instantiates a new RoutingProtocolOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingProtocolOperationWithDefaults() *RoutingProtocolOperation {
	this := RoutingProtocolOperation{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RoutingProtocolOperation) GetErrors() []Error {
	if o == nil || o.Errors == nil {
		var ret []Error
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutingProtocolOperation) GetErrorsOk() ([]Error, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *RoutingProtocolOperation) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Error and assigns it to the Errors field.
func (o *RoutingProtocolOperation) SetErrors(v []Error) {
	o.Errors = v
}

func (o RoutingProtocolOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableRoutingProtocolOperation struct {
	value *RoutingProtocolOperation
	isSet bool
}

func (v NullableRoutingProtocolOperation) Get() *RoutingProtocolOperation {
	return v.value
}

func (v *NullableRoutingProtocolOperation) Set(val *RoutingProtocolOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingProtocolOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingProtocolOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingProtocolOperation(val *RoutingProtocolOperation) *NullableRoutingProtocolOperation {
	return &NullableRoutingProtocolOperation{value: val, isSet: true}
}

func (v NullableRoutingProtocolOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingProtocolOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



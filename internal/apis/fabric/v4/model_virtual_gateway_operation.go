/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// VirtualGatewayOperation Fabric Gateway Access point operational data
type VirtualGatewayOperation struct {
	// Access point used and maximum number of IPv4 BGP routes
	BgpIpv4RoutesUsage *int32 `json:"bgpIpv4RoutesUsage,omitempty"`
	// Access point used and maximum number of IPv6 BGP routes
	BgpIpv6RoutesUsage *int32 `json:"bgpIpv6RoutesUsage,omitempty"`
	// Access point used and maximum number of IPv4 static routes
	StaticIpv4RoutesUsage *int32 `json:"staticIpv4RoutesUsage,omitempty"`
	// Access point used and maximum number of IPv6 static routes
	StaticIpv6RoutesUsage *int32 `json:"staticIpv6RoutesUsage,omitempty"`
	// Access point used and maximum number of ACLs
	AclsUsage *int32 `json:"aclsUsage,omitempty"`
	// Access point used and maximum number of ACL rules
	AclRulesUsage *int32 `json:"aclRulesUsage,omitempty"`
	// Number of connections associated with this Access point
	ConnectionCount *int32 `json:"connectionCount,omitempty"`
}

// NewVirtualGatewayOperation instantiates a new VirtualGatewayOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualGatewayOperation() *VirtualGatewayOperation {
	this := VirtualGatewayOperation{}
	return &this
}

// NewVirtualGatewayOperationWithDefaults instantiates a new VirtualGatewayOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualGatewayOperationWithDefaults() *VirtualGatewayOperation {
	this := VirtualGatewayOperation{}
	return &this
}

// GetBgpIpv4RoutesUsage returns the BgpIpv4RoutesUsage field value if set, zero value otherwise.
func (o *VirtualGatewayOperation) GetBgpIpv4RoutesUsage() int32 {
	if o == nil || o.BgpIpv4RoutesUsage == nil {
		var ret int32
		return ret
	}
	return *o.BgpIpv4RoutesUsage
}

// GetBgpIpv4RoutesUsageOk returns a tuple with the BgpIpv4RoutesUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualGatewayOperation) GetBgpIpv4RoutesUsageOk() (*int32, bool) {
	if o == nil || o.BgpIpv4RoutesUsage == nil {
		return nil, false
	}
	return o.BgpIpv4RoutesUsage, true
}

// HasBgpIpv4RoutesUsage returns a boolean if a field has been set.
func (o *VirtualGatewayOperation) HasBgpIpv4RoutesUsage() bool {
	if o != nil && o.BgpIpv4RoutesUsage != nil {
		return true
	}

	return false
}

// SetBgpIpv4RoutesUsage gets a reference to the given int32 and assigns it to the BgpIpv4RoutesUsage field.
func (o *VirtualGatewayOperation) SetBgpIpv4RoutesUsage(v int32) {
	o.BgpIpv4RoutesUsage = &v
}

// GetBgpIpv6RoutesUsage returns the BgpIpv6RoutesUsage field value if set, zero value otherwise.
func (o *VirtualGatewayOperation) GetBgpIpv6RoutesUsage() int32 {
	if o == nil || o.BgpIpv6RoutesUsage == nil {
		var ret int32
		return ret
	}
	return *o.BgpIpv6RoutesUsage
}

// GetBgpIpv6RoutesUsageOk returns a tuple with the BgpIpv6RoutesUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualGatewayOperation) GetBgpIpv6RoutesUsageOk() (*int32, bool) {
	if o == nil || o.BgpIpv6RoutesUsage == nil {
		return nil, false
	}
	return o.BgpIpv6RoutesUsage, true
}

// HasBgpIpv6RoutesUsage returns a boolean if a field has been set.
func (o *VirtualGatewayOperation) HasBgpIpv6RoutesUsage() bool {
	if o != nil && o.BgpIpv6RoutesUsage != nil {
		return true
	}

	return false
}

// SetBgpIpv6RoutesUsage gets a reference to the given int32 and assigns it to the BgpIpv6RoutesUsage field.
func (o *VirtualGatewayOperation) SetBgpIpv6RoutesUsage(v int32) {
	o.BgpIpv6RoutesUsage = &v
}

// GetStaticIpv4RoutesUsage returns the StaticIpv4RoutesUsage field value if set, zero value otherwise.
func (o *VirtualGatewayOperation) GetStaticIpv4RoutesUsage() int32 {
	if o == nil || o.StaticIpv4RoutesUsage == nil {
		var ret int32
		return ret
	}
	return *o.StaticIpv4RoutesUsage
}

// GetStaticIpv4RoutesUsageOk returns a tuple with the StaticIpv4RoutesUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualGatewayOperation) GetStaticIpv4RoutesUsageOk() (*int32, bool) {
	if o == nil || o.StaticIpv4RoutesUsage == nil {
		return nil, false
	}
	return o.StaticIpv4RoutesUsage, true
}

// HasStaticIpv4RoutesUsage returns a boolean if a field has been set.
func (o *VirtualGatewayOperation) HasStaticIpv4RoutesUsage() bool {
	if o != nil && o.StaticIpv4RoutesUsage != nil {
		return true
	}

	return false
}

// SetStaticIpv4RoutesUsage gets a reference to the given int32 and assigns it to the StaticIpv4RoutesUsage field.
func (o *VirtualGatewayOperation) SetStaticIpv4RoutesUsage(v int32) {
	o.StaticIpv4RoutesUsage = &v
}

// GetStaticIpv6RoutesUsage returns the StaticIpv6RoutesUsage field value if set, zero value otherwise.
func (o *VirtualGatewayOperation) GetStaticIpv6RoutesUsage() int32 {
	if o == nil || o.StaticIpv6RoutesUsage == nil {
		var ret int32
		return ret
	}
	return *o.StaticIpv6RoutesUsage
}

// GetStaticIpv6RoutesUsageOk returns a tuple with the StaticIpv6RoutesUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualGatewayOperation) GetStaticIpv6RoutesUsageOk() (*int32, bool) {
	if o == nil || o.StaticIpv6RoutesUsage == nil {
		return nil, false
	}
	return o.StaticIpv6RoutesUsage, true
}

// HasStaticIpv6RoutesUsage returns a boolean if a field has been set.
func (o *VirtualGatewayOperation) HasStaticIpv6RoutesUsage() bool {
	if o != nil && o.StaticIpv6RoutesUsage != nil {
		return true
	}

	return false
}

// SetStaticIpv6RoutesUsage gets a reference to the given int32 and assigns it to the StaticIpv6RoutesUsage field.
func (o *VirtualGatewayOperation) SetStaticIpv6RoutesUsage(v int32) {
	o.StaticIpv6RoutesUsage = &v
}

// GetAclsUsage returns the AclsUsage field value if set, zero value otherwise.
func (o *VirtualGatewayOperation) GetAclsUsage() int32 {
	if o == nil || o.AclsUsage == nil {
		var ret int32
		return ret
	}
	return *o.AclsUsage
}

// GetAclsUsageOk returns a tuple with the AclsUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualGatewayOperation) GetAclsUsageOk() (*int32, bool) {
	if o == nil || o.AclsUsage == nil {
		return nil, false
	}
	return o.AclsUsage, true
}

// HasAclsUsage returns a boolean if a field has been set.
func (o *VirtualGatewayOperation) HasAclsUsage() bool {
	if o != nil && o.AclsUsage != nil {
		return true
	}

	return false
}

// SetAclsUsage gets a reference to the given int32 and assigns it to the AclsUsage field.
func (o *VirtualGatewayOperation) SetAclsUsage(v int32) {
	o.AclsUsage = &v
}

// GetAclRulesUsage returns the AclRulesUsage field value if set, zero value otherwise.
func (o *VirtualGatewayOperation) GetAclRulesUsage() int32 {
	if o == nil || o.AclRulesUsage == nil {
		var ret int32
		return ret
	}
	return *o.AclRulesUsage
}

// GetAclRulesUsageOk returns a tuple with the AclRulesUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualGatewayOperation) GetAclRulesUsageOk() (*int32, bool) {
	if o == nil || o.AclRulesUsage == nil {
		return nil, false
	}
	return o.AclRulesUsage, true
}

// HasAclRulesUsage returns a boolean if a field has been set.
func (o *VirtualGatewayOperation) HasAclRulesUsage() bool {
	if o != nil && o.AclRulesUsage != nil {
		return true
	}

	return false
}

// SetAclRulesUsage gets a reference to the given int32 and assigns it to the AclRulesUsage field.
func (o *VirtualGatewayOperation) SetAclRulesUsage(v int32) {
	o.AclRulesUsage = &v
}

// GetConnectionCount returns the ConnectionCount field value if set, zero value otherwise.
func (o *VirtualGatewayOperation) GetConnectionCount() int32 {
	if o == nil || o.ConnectionCount == nil {
		var ret int32
		return ret
	}
	return *o.ConnectionCount
}

// GetConnectionCountOk returns a tuple with the ConnectionCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualGatewayOperation) GetConnectionCountOk() (*int32, bool) {
	if o == nil || o.ConnectionCount == nil {
		return nil, false
	}
	return o.ConnectionCount, true
}

// HasConnectionCount returns a boolean if a field has been set.
func (o *VirtualGatewayOperation) HasConnectionCount() bool {
	if o != nil && o.ConnectionCount != nil {
		return true
	}

	return false
}

// SetConnectionCount gets a reference to the given int32 and assigns it to the ConnectionCount field.
func (o *VirtualGatewayOperation) SetConnectionCount(v int32) {
	o.ConnectionCount = &v
}

func (o VirtualGatewayOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BgpIpv4RoutesUsage != nil {
		toSerialize["bgpIpv4RoutesUsage"] = o.BgpIpv4RoutesUsage
	}
	if o.BgpIpv6RoutesUsage != nil {
		toSerialize["bgpIpv6RoutesUsage"] = o.BgpIpv6RoutesUsage
	}
	if o.StaticIpv4RoutesUsage != nil {
		toSerialize["staticIpv4RoutesUsage"] = o.StaticIpv4RoutesUsage
	}
	if o.StaticIpv6RoutesUsage != nil {
		toSerialize["staticIpv6RoutesUsage"] = o.StaticIpv6RoutesUsage
	}
	if o.AclsUsage != nil {
		toSerialize["aclsUsage"] = o.AclsUsage
	}
	if o.AclRulesUsage != nil {
		toSerialize["aclRulesUsage"] = o.AclRulesUsage
	}
	if o.ConnectionCount != nil {
		toSerialize["connectionCount"] = o.ConnectionCount
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualGatewayOperation struct {
	value *VirtualGatewayOperation
	isSet bool
}

func (v NullableVirtualGatewayOperation) Get() *VirtualGatewayOperation {
	return v.value
}

func (v *NullableVirtualGatewayOperation) Set(val *VirtualGatewayOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualGatewayOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualGatewayOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualGatewayOperation(val *VirtualGatewayOperation) *NullableVirtualGatewayOperation {
	return &NullableVirtualGatewayOperation{value: val, isSet: true}
}

func (v NullableVirtualGatewayOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualGatewayOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ConnectionRoutingProtocol struct for ConnectionRoutingProtocol
type ConnectionRoutingProtocol struct {
	// Routing protocol type
	Type *string `json:"type,omitempty"`
	// Routing protocol identifier
	Uuid *string `json:"uuid,omitempty"`
	// Customer asn
	CustomerAsn *int32 `json:"customerAsn,omitempty"`
	// Peer asn
	PeerAsn *int32 `json:"peerAsn,omitempty"`
	// BGP authorization key
	BgpAuthKey *string `json:"bgpAuthKey,omitempty"`
	Ipv4 *ConnectionIpv4 `json:"ipv4,omitempty"`
	// Route filters values
	RouteFilters []string `json:"routeFilters,omitempty"`
}

// NewConnectionRoutingProtocol instantiates a new ConnectionRoutingProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionRoutingProtocol() *ConnectionRoutingProtocol {
	this := ConnectionRoutingProtocol{}
	return &this
}

// NewConnectionRoutingProtocolWithDefaults instantiates a new ConnectionRoutingProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionRoutingProtocolWithDefaults() *ConnectionRoutingProtocol {
	this := ConnectionRoutingProtocol{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ConnectionRoutingProtocol) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRoutingProtocol) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ConnectionRoutingProtocol) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ConnectionRoutingProtocol) SetType(v string) {
	o.Type = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise.
func (o *ConnectionRoutingProtocol) GetUuid() string {
	if o == nil || o.Uuid == nil {
		var ret string
		return ret
	}
	return *o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRoutingProtocol) GetUuidOk() (*string, bool) {
	if o == nil || o.Uuid == nil {
		return nil, false
	}
	return o.Uuid, true
}

// HasUuid returns a boolean if a field has been set.
func (o *ConnectionRoutingProtocol) HasUuid() bool {
	if o != nil && o.Uuid != nil {
		return true
	}

	return false
}

// SetUuid gets a reference to the given string and assigns it to the Uuid field.
func (o *ConnectionRoutingProtocol) SetUuid(v string) {
	o.Uuid = &v
}

// GetCustomerAsn returns the CustomerAsn field value if set, zero value otherwise.
func (o *ConnectionRoutingProtocol) GetCustomerAsn() int32 {
	if o == nil || o.CustomerAsn == nil {
		var ret int32
		return ret
	}
	return *o.CustomerAsn
}

// GetCustomerAsnOk returns a tuple with the CustomerAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRoutingProtocol) GetCustomerAsnOk() (*int32, bool) {
	if o == nil || o.CustomerAsn == nil {
		return nil, false
	}
	return o.CustomerAsn, true
}

// HasCustomerAsn returns a boolean if a field has been set.
func (o *ConnectionRoutingProtocol) HasCustomerAsn() bool {
	if o != nil && o.CustomerAsn != nil {
		return true
	}

	return false
}

// SetCustomerAsn gets a reference to the given int32 and assigns it to the CustomerAsn field.
func (o *ConnectionRoutingProtocol) SetCustomerAsn(v int32) {
	o.CustomerAsn = &v
}

// GetPeerAsn returns the PeerAsn field value if set, zero value otherwise.
func (o *ConnectionRoutingProtocol) GetPeerAsn() int32 {
	if o == nil || o.PeerAsn == nil {
		var ret int32
		return ret
	}
	return *o.PeerAsn
}

// GetPeerAsnOk returns a tuple with the PeerAsn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRoutingProtocol) GetPeerAsnOk() (*int32, bool) {
	if o == nil || o.PeerAsn == nil {
		return nil, false
	}
	return o.PeerAsn, true
}

// HasPeerAsn returns a boolean if a field has been set.
func (o *ConnectionRoutingProtocol) HasPeerAsn() bool {
	if o != nil && o.PeerAsn != nil {
		return true
	}

	return false
}

// SetPeerAsn gets a reference to the given int32 and assigns it to the PeerAsn field.
func (o *ConnectionRoutingProtocol) SetPeerAsn(v int32) {
	o.PeerAsn = &v
}

// GetBgpAuthKey returns the BgpAuthKey field value if set, zero value otherwise.
func (o *ConnectionRoutingProtocol) GetBgpAuthKey() string {
	if o == nil || o.BgpAuthKey == nil {
		var ret string
		return ret
	}
	return *o.BgpAuthKey
}

// GetBgpAuthKeyOk returns a tuple with the BgpAuthKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRoutingProtocol) GetBgpAuthKeyOk() (*string, bool) {
	if o == nil || o.BgpAuthKey == nil {
		return nil, false
	}
	return o.BgpAuthKey, true
}

// HasBgpAuthKey returns a boolean if a field has been set.
func (o *ConnectionRoutingProtocol) HasBgpAuthKey() bool {
	if o != nil && o.BgpAuthKey != nil {
		return true
	}

	return false
}

// SetBgpAuthKey gets a reference to the given string and assigns it to the BgpAuthKey field.
func (o *ConnectionRoutingProtocol) SetBgpAuthKey(v string) {
	o.BgpAuthKey = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *ConnectionRoutingProtocol) GetIpv4() ConnectionIpv4 {
	if o == nil || o.Ipv4 == nil {
		var ret ConnectionIpv4
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRoutingProtocol) GetIpv4Ok() (*ConnectionIpv4, bool) {
	if o == nil || o.Ipv4 == nil {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *ConnectionRoutingProtocol) HasIpv4() bool {
	if o != nil && o.Ipv4 != nil {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given ConnectionIpv4 and assigns it to the Ipv4 field.
func (o *ConnectionRoutingProtocol) SetIpv4(v ConnectionIpv4) {
	o.Ipv4 = &v
}

// GetRouteFilters returns the RouteFilters field value if set, zero value otherwise.
func (o *ConnectionRoutingProtocol) GetRouteFilters() []string {
	if o == nil || o.RouteFilters == nil {
		var ret []string
		return ret
	}
	return o.RouteFilters
}

// GetRouteFiltersOk returns a tuple with the RouteFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionRoutingProtocol) GetRouteFiltersOk() ([]string, bool) {
	if o == nil || o.RouteFilters == nil {
		return nil, false
	}
	return o.RouteFilters, true
}

// HasRouteFilters returns a boolean if a field has been set.
func (o *ConnectionRoutingProtocol) HasRouteFilters() bool {
	if o != nil && o.RouteFilters != nil {
		return true
	}

	return false
}

// SetRouteFilters gets a reference to the given []string and assigns it to the RouteFilters field.
func (o *ConnectionRoutingProtocol) SetRouteFilters(v []string) {
	o.RouteFilters = v
}

func (o ConnectionRoutingProtocol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Uuid != nil {
		toSerialize["uuid"] = o.Uuid
	}
	if o.CustomerAsn != nil {
		toSerialize["customerAsn"] = o.CustomerAsn
	}
	if o.PeerAsn != nil {
		toSerialize["peerAsn"] = o.PeerAsn
	}
	if o.BgpAuthKey != nil {
		toSerialize["bgpAuthKey"] = o.BgpAuthKey
	}
	if o.Ipv4 != nil {
		toSerialize["ipv4"] = o.Ipv4
	}
	if o.RouteFilters != nil {
		toSerialize["routeFilters"] = o.RouteFilters
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionRoutingProtocol struct {
	value *ConnectionRoutingProtocol
	isSet bool
}

func (v NullableConnectionRoutingProtocol) Get() *ConnectionRoutingProtocol {
	return v.value
}

func (v *NullableConnectionRoutingProtocol) Set(val *ConnectionRoutingProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionRoutingProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionRoutingProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionRoutingProtocol(val *ConnectionRoutingProtocol) *NullableConnectionRoutingProtocol {
	return &NullableConnectionRoutingProtocol{value: val, isSet: true}
}

func (v NullableConnectionRoutingProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionRoutingProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



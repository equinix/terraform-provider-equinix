/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
	"fmt"
)

// NexusEquinixStatus Connection status
type NexusEquinixStatus string

// List of NexusEquinixStatus
const (
	PENDING_DELETE NexusEquinixStatus = "PENDING_DELETE"
	PROVISIONED NexusEquinixStatus = "PROVISIONED"
	PENDING_APPROVAL NexusEquinixStatus = "PENDING_APPROVAL"
	NOT_PROVISIONED NexusEquinixStatus = "NOT_PROVISIONED"
	DEPROVISIONING NexusEquinixStatus = "DEPROVISIONING"
	NOT_DEPROVISIONED NexusEquinixStatus = "NOT_DEPROVISIONED"
	PENDING_AUTO_APPROVAL NexusEquinixStatus = "PENDING_AUTO_APPROVAL"
	PROVISIONING NexusEquinixStatus = "PROVISIONING"
	PENDING_BGP_PEERING NexusEquinixStatus = "PENDING_BGP_PEERING"
	PENDING_PROVIDER_VLAN NexusEquinixStatus = "PENDING_PROVIDER_VLAN"
	DEPROVISIONED NexusEquinixStatus = "DEPROVISIONED"
	PENDING_BANDWIDTH_APPROVAL NexusEquinixStatus = "PENDING_BANDWIDTH_APPROVAL"
	PENDING_PROVIDER_VLAN_ERROR NexusEquinixStatus = "PENDING_PROVIDER_VLAN_ERROR"
	PENDING_INTERFACE_CONFIGURATION NexusEquinixStatus = "PENDING_INTERFACE_CONFIGURATION"
)

// All allowed values of NexusEquinixStatus enum
var AllowedNexusEquinixStatusEnumValues = []NexusEquinixStatus{
	"PENDING_DELETE",
	"PROVISIONED",
	"PENDING_APPROVAL",
	"NOT_PROVISIONED",
	"DEPROVISIONING",
	"NOT_DEPROVISIONED",
	"PENDING_AUTO_APPROVAL",
	"PROVISIONING",
	"PENDING_BGP_PEERING",
	"PENDING_PROVIDER_VLAN",
	"DEPROVISIONED",
	"PENDING_BANDWIDTH_APPROVAL",
	"PENDING_PROVIDER_VLAN_ERROR",
	"PENDING_INTERFACE_CONFIGURATION",
}

func (v *NexusEquinixStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NexusEquinixStatus(value)
	for _, existing := range AllowedNexusEquinixStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NexusEquinixStatus", value)
}

// NewNexusEquinixStatusFromValue returns a pointer to a valid NexusEquinixStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNexusEquinixStatusFromValue(v string) (*NexusEquinixStatus, error) {
	ev := NexusEquinixStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NexusEquinixStatus: valid values are %v", v, AllowedNexusEquinixStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NexusEquinixStatus) IsValid() bool {
	for _, existing := range AllowedNexusEquinixStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NexusEquinixStatus value
func (v NexusEquinixStatus) Ptr() *NexusEquinixStatus {
	return &v
}

type NullableNexusEquinixStatus struct {
	value *NexusEquinixStatus
	isSet bool
}

func (v NullableNexusEquinixStatus) Get() *NexusEquinixStatus {
	return v.value
}

func (v *NullableNexusEquinixStatus) Set(val *NexusEquinixStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNexusEquinixStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNexusEquinixStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNexusEquinixStatus(val *NexusEquinixStatus) *NullableNexusEquinixStatus {
	return &NullableNexusEquinixStatus{value: val, isSet: true}
}

func (v NullableNexusEquinixStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNexusEquinixStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


/*
Equinix Fabric API

Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>

API version: 4.2
Contact: api-support@equinix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v4

import (
	"encoding/json"
)

// ReplaceOperation Replace attribute value or sub-resource in the existing model
type ReplaceOperation struct {
	// value to replace with
	Value map[string]interface{} `json:"value"`
}

// NewReplaceOperation instantiates a new ReplaceOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplaceOperation(value map[string]interface{}, op string, path string) *ReplaceOperation {
	this := ReplaceOperation{}
	this.Op = op
	this.Path = path
	return &this
}

// NewReplaceOperationWithDefaults instantiates a new ReplaceOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplaceOperationWithDefaults() *ReplaceOperation {
	this := ReplaceOperation{}
	return &this
}

// GetValue returns the Value field value
func (o *ReplaceOperation) GetValue() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ReplaceOperation) GetValueOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value, true
}

// SetValue sets field value
func (o *ReplaceOperation) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o ReplaceOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableReplaceOperation struct {
	value *ReplaceOperation
	isSet bool
}

func (v NullableReplaceOperation) Get() *ReplaceOperation {
	return v.value
}

func (v *NullableReplaceOperation) Set(val *ReplaceOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableReplaceOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableReplaceOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplaceOperation(val *ReplaceOperation) *NullableReplaceOperation {
	return &NullableReplaceOperation{value: val, isSet: true}
}

func (v NullableReplaceOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplaceOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


